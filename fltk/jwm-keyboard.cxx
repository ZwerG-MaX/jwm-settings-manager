/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-keyboard.h"

void KeyboardUI::cb__i(Fl_Button*, void*) {
  flKeyboard keyboard;
std::string keyShortcut = key_browser->text(key_browser->value());
if (keyShortcut.compare("")!=0){
	keyboard.deleteKey(keyShortcut.c_str());
	key_browser->clear();
	keyboard.getKeys(key_browser);
	key_browser->redraw();
}
else{
	fl_message("Please click on an item to remove!");
};
}
void KeyboardUI::cb_(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void KeyboardUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
keyboard_window->hide();
UI ux;
ux.showSettings();
}
void KeyboardUI::cb_Cancel(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void KeyboardUI::cb_OK_i(Fl_Button*, void*) {
  saveJWMRC();
keyboard_window->hide();
UI ux;
ux.showSettings();
}
void KeyboardUI::cb_OK(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void KeyboardUI::cb_1_i(Fl_Button*, void*) {
  //Fl::add_handler(handle);
grabber_window()->show();
}
void KeyboardUI::cb_1(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void KeyboardUI::cb_OK1_i(Fl_Button*, void*) {
  add_cb();
}
void KeyboardUI::cb_OK1(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void KeyboardUI::cb_next_i(Fl_Menu_*, void*) {
  const char * action = "next";
menu_cb(action);
}
void KeyboardUI::cb_next(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_next_i(o,v);
}

void KeyboardUI::cb_nextstacked_i(Fl_Menu_*, void*) {
  const char * action = "nextstacked";
menu_cb(action);
}
void KeyboardUI::cb_nextstacked(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_nextstacked_i(o,v);
}

void KeyboardUI::cb_prev_i(Fl_Menu_*, void*) {
  const char * action = "prev";
menu_cb(action);
}
void KeyboardUI::cb_prev(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_prev_i(o,v);
}

void KeyboardUI::cb_prevstacked_i(Fl_Menu_*, void*) {
  const char * action = "prevstacked";
menu_cb(action);
}
void KeyboardUI::cb_prevstacked(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_prevstacked_i(o,v);
}

void KeyboardUI::cb_close_i(Fl_Menu_*, void*) {
  const char * action = "close";
menu_cb(action);
}
void KeyboardUI::cb_close(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_close_i(o,v);
}

void KeyboardUI::cb_fullscreen_i(Fl_Menu_*, void*) {
  const char * action = "fullscreen";
menu_cb(action);
}
void KeyboardUI::cb_fullscreen(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_fullscreen_i(o,v);
}

void KeyboardUI::cb_minimize_i(Fl_Menu_*, void*) {
  const char * action = "minimize";
menu_cb(action);
}
void KeyboardUI::cb_minimize(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_minimize_i(o,v);
}

void KeyboardUI::cb_maximize_i(Fl_Menu_*, void*) {
  const char * action = "maximize";
menu_cb(action);
}
void KeyboardUI::cb_maximize(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maximize_i(o,v);
}

void KeyboardUI::cb_shade_i(Fl_Menu_*, void*) {
  const char * action = "shade";
menu_cb(action);
}
void KeyboardUI::cb_shade(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_shade_i(o,v);
}

void KeyboardUI::cb_move_i(Fl_Menu_*, void*) {
  const char * action = "move";
menu_cb(action);
}
void KeyboardUI::cb_move(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_move_i(o,v);
}

void KeyboardUI::cb_resize_i(Fl_Menu_*, void*) {
  const char * action = "resize";
menu_cb(action);
}
void KeyboardUI::cb_resize(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_resize_i(o,v);
}

void KeyboardUI::cb_window_i(Fl_Menu_*, void*) {
  const char * action = "window";
menu_cb(action);
}
void KeyboardUI::cb_window(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_window_i(o,v);
}

void KeyboardUI::cb_root_menu_apps_i(Fl_Menu_*, void*) {
  const char * action = "root:5";
menu_cb(action);
}
void KeyboardUI::cb_root_menu_apps(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_root_menu_apps_i(o,v);
}

void KeyboardUI::cb_root_menu_places_i(Fl_Menu_*, void*) {
  const char * action = "root:7";
menu_cb(action);
}
void KeyboardUI::cb_root_menu_places(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_root_menu_places_i(o,v);
}

void KeyboardUI::cb_root_menu_shutdown_i(Fl_Menu_*, void*) {
  const char * action = "root:9";
menu_cb(action);
}
void KeyboardUI::cb_root_menu_shutdown(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_root_menu_shutdown_i(o,v);
}

void KeyboardUI::cb_rdesktop_i(Fl_Menu_*, void*) {
  const char * action = "rdesktop";
menu_cb(action);
}
void KeyboardUI::cb_rdesktop(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_rdesktop_i(o,v);
}

void KeyboardUI::cb_ldesktop_i(Fl_Menu_*, void*) {
  const char * action = "ldesktop";
menu_cb(action);
}
void KeyboardUI::cb_ldesktop(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_ldesktop_i(o,v);
}

void KeyboardUI::cb_udesktop_i(Fl_Menu_*, void*) {
  const char * action = "udesktop";
menu_cb(action);
}
void KeyboardUI::cb_udesktop(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_udesktop_i(o,v);
}

void KeyboardUI::cb_ddesktop_i(Fl_Menu_*, void*) {
  const char * action = "ddesktop";
menu_cb(action);
}
void KeyboardUI::cb_ddesktop(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_ddesktop_i(o,v);
}

void KeyboardUI::cb_restart_i(Fl_Menu_*, void*) {
  const char * action = "restart";
menu_cb(action);
}
void KeyboardUI::cb_restart(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_restart_i(o,v);
}

void KeyboardUI::cb_exit_i(Fl_Menu_*, void*) {
  const char * action = "exit";
menu_cb(action);
}
void KeyboardUI::cb_exit(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_exit_i(o,v);
}

void KeyboardUI::cb_showtray_i(Fl_Menu_*, void*) {
  const char * action = "showtray";
menu_cb(action);
}
void KeyboardUI::cb_showtray(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_showtray_i(o,v);
}

void KeyboardUI::cb_maxtop_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxtop";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxtop(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxtop_i(o,v);
}

void KeyboardUI::cb_maxbottom_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxbottom";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxbottom(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxbottom_i(o,v);
}

void KeyboardUI::cb_maxleft_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxleft";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxleft(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxleft_i(o,v);
}

void KeyboardUI::cb_maxright_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxright";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxright(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxright_i(o,v);
}

void KeyboardUI::cb_maxv_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxv";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxv(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxv_i(o,v);
}

void KeyboardUI::cb_maxh_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "maxh";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_maxh(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_maxh_i(o,v);
}

void KeyboardUI::cb_sendu_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "sendu";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_sendu(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_sendu_i(o,v);
}

void KeyboardUI::cb_sendd_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "sendd";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_sendd(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_sendd_i(o,v);
}

void KeyboardUI::cb_sendr_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "sendr";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_sendr(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_sendr_i(o,v);
}

void KeyboardUI::cb_sendl_i(Fl_Menu_* o, void*) {
  flPanel panel;
if(panel.newStyle()){
  const char * action = "sendl";
  menu_cb(action);
}
else{
  o->hide();
};
}
void KeyboardUI::cb_sendl(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_sendl_i(o,v);
}

unsigned char KeyboardUI::menu_Action_i18n_done = 0;
Fl_Menu_Item KeyboardUI::menu_Action[] = {
 {"move to the next window in the task list", 0,  (Fl_Callback*)KeyboardUI::cb_next, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the next window in the stacking order", 0,  (Fl_Callback*)KeyboardUI::cb_nextstacked, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the previous window in the task list", 0,  (Fl_Callback*)KeyboardUI::cb_prev, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the previous window in the stacking order", 0,  (Fl_Callback*)KeyboardUI::cb_prevstacked, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"close window", 0,  (Fl_Callback*)KeyboardUI::cb_close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"fullscreen window", 0,  (Fl_Callback*)KeyboardUI::cb_fullscreen, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"minimize window", 0,  (Fl_Callback*)KeyboardUI::cb_minimize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"maximize window", 0,  (Fl_Callback*)KeyboardUI::cb_maximize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"roll up window", 0,  (Fl_Callback*)KeyboardUI::cb_shade, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move window", 0,  (Fl_Callback*)KeyboardUI::cb_move, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"resize window", 0,  (Fl_Callback*)KeyboardUI::cb_resize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"show window menu", 0,  (Fl_Callback*)KeyboardUI::cb_window, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Application menu", 0,  (Fl_Callback*)KeyboardUI::cb_root_menu_apps, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Places Menu", 0,  (Fl_Callback*)KeyboardUI::cb_root_menu_places, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Shutdown menu", 0,  (Fl_Callback*)KeyboardUI::cb_root_menu_shutdown, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop to the right", 0,  (Fl_Callback*)KeyboardUI::cb_rdesktop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop to the left", 0,  (Fl_Callback*)KeyboardUI::cb_ldesktop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop up", 0,  (Fl_Callback*)KeyboardUI::cb_udesktop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop down", 0,  (Fl_Callback*)KeyboardUI::cb_ddesktop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"restart the Window Manager", 0,  (Fl_Callback*)KeyboardUI::cb_restart, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"exit the Window Manager", 0,  (Fl_Callback*)KeyboardUI::cb_exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show any hidden Panels", 0,  (Fl_Callback*)KeyboardUI::cb_showtray, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Top of the screen", 0,  (Fl_Callback*)KeyboardUI::cb_maxtop, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Bottom of the screen", 0,  (Fl_Callback*)KeyboardUI::cb_maxbottom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Left of the screen", 0,  (Fl_Callback*)KeyboardUI::cb_maxleft, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Right of the screen", 0,  (Fl_Callback*)KeyboardUI::cb_maxright, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize Vertical", 0,  (Fl_Callback*)KeyboardUI::cb_maxv, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize Horizontal", 0,  (Fl_Callback*)KeyboardUI::cb_maxh, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Up a Desktop", 0,  (Fl_Callback*)KeyboardUI::cb_sendu, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Down a Desktop", 0,  (Fl_Callback*)KeyboardUI::cb_sendd, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Right a Desktop", 0,  (Fl_Callback*)KeyboardUI::cb_sendr, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Left a Desktop", 0,  (Fl_Callback*)KeyboardUI::cb_sendl, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* KeyboardUI::next = KeyboardUI::menu_Action + 0;
Fl_Menu_Item* KeyboardUI::nextstacked = KeyboardUI::menu_Action + 1;
Fl_Menu_Item* KeyboardUI::prev = KeyboardUI::menu_Action + 2;
Fl_Menu_Item* KeyboardUI::prevstacked = KeyboardUI::menu_Action + 3;
Fl_Menu_Item* KeyboardUI::close = KeyboardUI::menu_Action + 4;
Fl_Menu_Item* KeyboardUI::fullscreen = KeyboardUI::menu_Action + 5;
Fl_Menu_Item* KeyboardUI::minimize = KeyboardUI::menu_Action + 6;
Fl_Menu_Item* KeyboardUI::maximize = KeyboardUI::menu_Action + 7;
Fl_Menu_Item* KeyboardUI::shade = KeyboardUI::menu_Action + 8;
Fl_Menu_Item* KeyboardUI::move = KeyboardUI::menu_Action + 9;
Fl_Menu_Item* KeyboardUI::resize = KeyboardUI::menu_Action + 10;
Fl_Menu_Item* KeyboardUI::window = KeyboardUI::menu_Action + 11;
Fl_Menu_Item* KeyboardUI::root_menu_apps = KeyboardUI::menu_Action + 12;
Fl_Menu_Item* KeyboardUI::root_menu_places = KeyboardUI::menu_Action + 13;
Fl_Menu_Item* KeyboardUI::root_menu_shutdown = KeyboardUI::menu_Action + 14;
Fl_Menu_Item* KeyboardUI::rdesktop = KeyboardUI::menu_Action + 15;
Fl_Menu_Item* KeyboardUI::ldesktop = KeyboardUI::menu_Action + 16;
Fl_Menu_Item* KeyboardUI::udesktop = KeyboardUI::menu_Action + 17;
Fl_Menu_Item* KeyboardUI::ddesktop = KeyboardUI::menu_Action + 18;
Fl_Menu_Item* KeyboardUI::restart = KeyboardUI::menu_Action + 19;
Fl_Menu_Item* KeyboardUI::exit = KeyboardUI::menu_Action + 20;
Fl_Menu_Item* KeyboardUI::showtray = KeyboardUI::menu_Action + 21;
Fl_Menu_Item* KeyboardUI::maxtop = KeyboardUI::menu_Action + 22;
Fl_Menu_Item* KeyboardUI::maxbottom = KeyboardUI::menu_Action + 23;
Fl_Menu_Item* KeyboardUI::maxleft = KeyboardUI::menu_Action + 24;
Fl_Menu_Item* KeyboardUI::maxright = KeyboardUI::menu_Action + 25;
Fl_Menu_Item* KeyboardUI::maxv = KeyboardUI::menu_Action + 26;
Fl_Menu_Item* KeyboardUI::maxh = KeyboardUI::menu_Action + 27;
Fl_Menu_Item* KeyboardUI::sendu = KeyboardUI::menu_Action + 28;
Fl_Menu_Item* KeyboardUI::sendd = KeyboardUI::menu_Action + 29;
Fl_Menu_Item* KeyboardUI::sendr = KeyboardUI::menu_Action + 30;
Fl_Menu_Item* KeyboardUI::sendl = KeyboardUI::menu_Action + 31;

void KeyboardUI::cb_Choose_i(Fl_Button*, void*) {
  std::string result = desktopFILE();
std::cout<<result<<std::endl;
std::string exec = "exec:";
exec+=result;
action_name->value(exec.c_str());
}
void KeyboardUI::cb_Choose(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Choose_i(o,v);
}

void KeyboardUI::cb_C_i(Fl_Menu_*, void*) {
  const char* mod = "C";
mod_cb(mod);
}
void KeyboardUI::cb_C(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_C_i(o,v);
}

void KeyboardUI::cb_A_i(Fl_Menu_*, void*) {
  const char* mod = "A";
mod_cb(mod);
}
void KeyboardUI::cb_A(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_A_i(o,v);
}

void KeyboardUI::cb_mod4_i(Fl_Menu_*, void*) {
  const char* mod = "4";
mod_cb(mod);
}
void KeyboardUI::cb_mod4(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_mod4_i(o,v);
}

void KeyboardUI::cb_S_i(Fl_Menu_*, void*) {
  const char* mod = "S";
mod_cb(mod);
}
void KeyboardUI::cb_S(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_S_i(o,v);
}

unsigned char KeyboardUI::menu_key_mod_i18n_done = 0;
Fl_Menu_Item KeyboardUI::menu_key_mod[] = {
 {"Ctrl", 0,  (Fl_Callback*)KeyboardUI::cb_C, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Alt", 0,  (Fl_Callback*)KeyboardUI::cb_A, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Super", 0,  (Fl_Callback*)KeyboardUI::cb_mod4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Shift", 0,  (Fl_Callback*)KeyboardUI::cb_S, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* KeyboardUI::C = KeyboardUI::menu_key_mod + 0;
Fl_Menu_Item* KeyboardUI::A = KeyboardUI::menu_key_mod + 1;
Fl_Menu_Item* KeyboardUI::mod4 = KeyboardUI::menu_key_mod + 2;
Fl_Menu_Item* KeyboardUI::S = KeyboardUI::menu_key_mod + 3;

void KeyboardUI::cb_Ctrl_i(Fl_Menu_*, void*) {
  const char* mod = "C";
mod2_cb(mod);
}
void KeyboardUI::cb_Ctrl(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Ctrl_i(o,v);
}

void KeyboardUI::cb_Alt_i(Fl_Menu_*, void*) {
  const char* mod = "A";
mod2_cb(mod);
}
void KeyboardUI::cb_Alt(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Alt_i(o,v);
}

void KeyboardUI::cb_Super_i(Fl_Menu_*, void*) {
  const char* mod = "4";
mod2_cb(mod);
}
void KeyboardUI::cb_Super(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Super_i(o,v);
}

void KeyboardUI::cb_Shift_i(Fl_Menu_*, void*) {
  const char* mod = "S";
mod2_cb(mod);
}
void KeyboardUI::cb_Shift(Fl_Menu_* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Shift_i(o,v);
}

unsigned char KeyboardUI::menu_key_mod2_i18n_done = 0;
Fl_Menu_Item KeyboardUI::menu_key_mod2[] = {
 {"Ctrl", 0,  (Fl_Callback*)KeyboardUI::cb_Ctrl, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Alt", 0,  (Fl_Callback*)KeyboardUI::cb_Alt, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Super", 0,  (Fl_Callback*)KeyboardUI::cb_Super, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Shift", 0,  (Fl_Callback*)KeyboardUI::cb_Shift, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void KeyboardUI::cb_key_i(Fl_Input*, void*) {
  key_event();
}
void KeyboardUI::cb_key(Fl_Input* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_key_i(o,v);
}

void KeyboardUI::cb_Cancel1_i(Fl_Button*, void*) {
  grab_win->hide();
}
void KeyboardUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((KeyboardUI*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

Fl_Double_Window* KeyboardUI::make_window() {
  load();
  saveChangesTemp();
  //Fl::add_handler(handle);
  { Fl_Double_Window* o = keyboard_window = new Fl_Double_Window(490, 315, gettext("Keyboard Settings"));
    keyboard_window->color((Fl_Color)31);
    keyboard_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 490, 310);
      o->color((Fl_Color)31);
      { Fl_Browser* o = key_browser = new Fl_Browser(10, 25, 470, 235, gettext("Keyboard Shortcuts"));
        key_browser->type(2);
        key_browser->box(FL_GTK_DOWN_BOX);
        key_browser->selection_color((Fl_Color)80);
        key_browser->labelfont(1);
        key_browser->align(Fl_Align(FL_ALIGN_TOP));
        static int widths[] = {35,75,105,0};o->column_widths(widths);
        flKeyboard keyboard;
        keyboard.getKeys(key_browser);
      } // Fl_Browser* key_browser
      { Fl_Button* o = new Fl_Button(60, 270, 35, 30, gettext("-"));
        o->box(FL_GTK_UP_BOX);
        o->labelfont(1);
        o->labelsize(34);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(355, 270, 65, 30, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(430, 270, 45, 30, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(15, 270, 40, 30, gettext("@+"));
        o->box(FL_GTK_UP_BOX);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Scroll* o
    Config config;config.under_mouse(o);
    keyboard_window->xclass("jsm-keyboard");
    keyboard_window->end();
  } // Fl_Double_Window* keyboard_window
  return keyboard_window;
}

Fl_Double_Window* KeyboardUI::grabber_window() {
  { Fl_Double_Window* o = grab_win = new Fl_Double_Window(475, 230, gettext("Create Shortcut"));
    grab_win->user_data((void*)(this));
    grab_win->when(FL_WHEN_RELEASE_ALWAYS);
    { Fl_Button* o = new Fl_Button(395, 180, 65, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)58);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    { Fl_Menu_Button* o = new Fl_Menu_Button(200, 125, 125, 30, gettext("Action"));
      o->box(FL_GTK_UP_BOX);
      o->selection_color((Fl_Color)80);
      if (!menu_Action_i18n_done) {
        int i=0;
        for ( ; i<32; i++)
          if (menu_Action[i].label())
            menu_Action[i].label(gettext(menu_Action[i].label()));
        menu_Action_i18n_done = 1;
      }
      o->menu(menu_Action);
    } // Fl_Menu_Button* o
    { Fl_Button* o = new Fl_Button(10, 125, 140, 30, gettext("Choose Program"));
      o->tooltip(gettext("Choose a program to add"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Choose);
    } // Fl_Button* o
    { action_name = new Fl_Input(15, 175, 275, 30);
      action_name->box(FL_GTK_DOWN_BOX);
      action_name->align(Fl_Align(129));
    } // Fl_Input* action_name
    { key_mod = new Fl_Menu_Button(5, 15, 195, 30, gettext("Choose a Key Modifier"));
      key_mod->tooltip(gettext("These are keys like Ctrl, Alt, Shift, and Super (Windows or Apple key)"));
      key_mod->box(FL_GTK_UP_BOX);
      if (!menu_key_mod_i18n_done) {
        int i=0;
        for ( ; i<4; i++)
          if (menu_key_mod[i].label())
            menu_key_mod[i].label(gettext(menu_key_mod[i].label()));
        menu_key_mod_i18n_done = 1;
      }
      key_mod->menu(menu_key_mod);
    } // Fl_Menu_Button* key_mod
    { key_mod2 = new Fl_Menu_Button(5, 55, 230, 30, gettext("Choose a 2nd Key Modifier"));
      key_mod2->tooltip(gettext("This is optional"));
      key_mod2->box(FL_GTK_UP_BOX);
      if (!menu_key_mod2_i18n_done) {
        int i=0;
        for ( ; i<4; i++)
          if (menu_key_mod2[i].label())
            menu_key_mod2[i].label(gettext(menu_key_mod2[i].label()));
        menu_key_mod2_i18n_done = 1;
      }
      key_mod2->menu(menu_key_mod2);
    } // Fl_Menu_Button* key_mod2
    { key = new Fl_Input(275, 40, 135, 30, gettext("Key"));
      key->box(FL_GTK_DOWN_BOX);
      key->callback((Fl_Callback*)cb_key);
      key->when(FL_WHEN_CHANGED);
    } // Fl_Input* key
    { new Fl_Box(160, 130, 25, 25, gettext("OR"));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(305, 180, 65, 30, gettext("Cancel"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)64);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { mod_output = new Fl_Output(290, 5, 50, 30);
      mod_output->box(FL_GTK_DOWN_BOX);
      mod_output->hide();
    } // Fl_Output* mod_output
    { key_output = new Fl_Output(350, 5, 50, 30);
      key_output->box(FL_GTK_DOWN_BOX);
      key_output->hide();
    } // Fl_Output* key_output
    Config config;config.under_mouse(o);
    Fl::focus(key);
    grab_win->xclass("jsm-keyboard");
    grab_win->end();
  } // Fl_Double_Window* grab_win
  return grab_win;
}

void KeyboardUI::add_cb() {
  flKeyboard keyboard;
  std::string action = action_name->value();
  if(action.compare("")==0){
    std::cout<<"No action chosen..."<<std::endl;
    return;
  }
  const char* this_keyInput = key_output->value();
  std::string keyInput = this_keyInput;
  
  if((action.compare("")!=0 )&& (keyInput.compare("")!=0)){
    const char* this_mod = mod_output->value();
    std::string mod = this_mod;  
    if(mod.compare("")!=0){
      keyboard.addKey(this_mod,this_keyInput,action.c_str());
    }
    else{
      keyboard.addKey(this_keyInput,action.c_str());
    }
    
    flKeyboard keyboard;
    key_browser->clear();
    keyboard.getKeys(key_browser);
    key_browser->redraw();
    grab_win->hide();
  }
}

void KeyboardUI::key_event() {
  //flKeyboard key;
  int k = Fl::event_key();
  std::string modifier_text = key->value();
  std::string key_display="";
  const char* event_text = Fl::event_text();
  int l_shift = Fl::event_key(FL_Shift_R);
  int r_shift = Fl::event_key(FL_Shift_L);
  int l_control = Fl::event_key(FL_Control_R);
  int r_control = Fl::event_key(FL_Control_L);
  int l_meta = Fl::event_key(FL_Meta_L);
  int r_meta = Fl::event_key(FL_Meta_R);
  int l_alt = Fl::event_key(FL_Alt_L);
  int r_alt = Fl::event_key(FL_Alt_R);
  bool alt = false;
  bool shift = false;
  bool meta = false;
  bool ctrl = false;
  if(r_alt||l_alt){alt=true;
    key_display="Alt ";
    mod_cb("A");
  }
  if(l_shift||r_shift){
    mod_cb("S");
    key_display="Shift + ";
    shift=true;
  }
  if(l_control||r_control){
    key_display="Control +";
    mod_cb("C");
    ctrl=true;
  }
  if(l_meta||r_meta){meta=true;
    key_display="Super ";
    mod_cb("4");
  }
  key_display+=event_text;
  const char* KEY = key_display.c_str();
  std::string key_test = KEY;
  if((key_test.compare("")!=0)&&(k<=256)){
    key_output->value(event_text);
    key_output->show();
    key->value(KEY);
  }
}

void KeyboardUI::menu_cb(const char* action) {
  action_name->value(action);
}

void KeyboardUI::mod_cb(const char* mod) {
  mod_output->set_visible();
  mod_output->value(mod);
}

void KeyboardUI::mod2_cb(const char* mod) {
  const char* test = mod_output->value();
  if(test !=NULL){
  	std::string modifier = mod_output->value();
  	std::string inputMod = mod;
  	modifier += mod;
  	mod_output->value(modifier.c_str());
  }
}

int KeyboardUI::handle(int e) {
  return (e == FL_SHORTCUT);
}
