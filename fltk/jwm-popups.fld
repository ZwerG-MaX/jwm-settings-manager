# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include "../include/common.hpp"} {public global
} 

decl {\#include "../include/fltkfunctions.hpp"} {public global
} 

class PopupsUI {open
} {
  decl {std::string DUNSTCONF;} {private local
  }
  Function {make_window()} {open
  } {
    Fl_Window popup_window {
      label Popups open
      xywh {725 134 275 220} type Double color 45 labelcolor 7 xclass {preferences-system-notifications} visible
    } {
      Fl_Scroll {} {open
        tooltip {This controls the look of popup tooltips such as those shown when the mouse sits over a panel item.} xywh {0 0 270 215}
      } {
        Fl_Button outline {
          label Outline
          callback {set_color(o,"Outline");}
          tooltip {The color of the window  outline.  The  default  is black.} xywh {105 40 75 25} box FLAT_BOX color 23 align 132
          code0 {o->color(get_color("Outline"));}
        }
        Fl_Value_Input delay_out {
          label milliseconds
          callback {delay_slider->value(o->value());}
          tooltip {The  delay  in milliseconds before popups activate. The default is 600.} xywh {185 10 25 25} box FLAT_BOX selection_color 72 labelsize 8 align 8
          code0 {get_delay(o);}
        }
        Fl_Slider delay_slider {
          label Delay
          callback {delay_out->value(o->value());}
          tooltip {The  delay  in milliseconds before popups activate. The default is 600.} xywh {105 10 75 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 maximum 1200 step 10 value 600
          code0 {get_delay(o);}
        }
        Fl_Menu_Button {} {
          label enabled
          tooltip {Determine if popups are shown. This is a comma-sep‐ arated  list  of one or more of the following: true (all enabled), false (no  popups  enabled),  button (tray buttons), clock (clocks), menu (menus), pager (pagers), and task (task list items).  The  default is true.} xywh {10 135 85 25} box FLAT_BOX color 23 selection_color 72
        } {
          MenuItem {} {
            label true
            callback {std::string value="true";
enabled(value);}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label false
            callback {std::string value="false";
enabled(value);}
            xywh {5 5 100 20}
          }
          MenuItem {} {
            label button
            callback {std::string value="button";
enabled(value);}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label clock
            callback {std::string value="clock";
enabled(value);}
            xywh {35 35 100 20}
          }
          MenuItem {} {
            label menu
            callback {std::string value="menu";
enabled(value);}
            xywh {45 45 100 20}
          }
          MenuItem {} {
            label pager
            callback {std::string value="pager";
enabled(value);}
            xywh {55 55 100 20}
          }
          MenuItem {} {
            label task
            callback {std::string value="task";
enabled(value);}
            xywh {65 65 100 20}
          }
        }
        Fl_Output enabled_out {
          tooltip {Determine if popups are shown. This is a comma-sep‐ arated  list  of one or more of the following: true (all enabled), false (no  popups  enabled),  button (tray buttons), clock (clocks), menu (menus), pager (pagers), and task (task list items).  The  default is true.} xywh {105 135 105 25} box FLAT_BOX color 55 selection_color 72
          code0 {std::string val=getElementAttribute("PopupStyle","enabled");}
          code1 {if(val.compare("")==0){val="true";}}
          code2 {o->value(val.c_str());}
        }
        Fl_Button {} {
          label Text
          callback {set_color(o,"Foreground");}
          tooltip {The text color} xywh {105 70 75 25} box FLAT_BOX color 23 align 132
          code0 {o->color(get_color("Foreground"));}
        }
        Fl_Button {} {
          label Background
          callback {set_color(o,"Background");}
          tooltip {The background color} xywh {105 100 75 25} box FLAT_BOX color 23 align 132
          code0 {o->color(get_color("Background"));}
        }
        Fl_Button {} {
          label OK
          callback {saveChanges();
quit();}
          xywh {210 190 60 25} box FLAT_BOX color 62 labelcolor 7 align 128
        }
        Fl_Button {} {
          label Cancel
          callback {cancel();}
          xywh {140 190 65 25} box FLAT_BOX color 80 labelcolor 7 align 128
        }
        Fl_Button {} {
          label Notifications
          callback {dunst_window()->show();}
          tooltip {Sytem notification pop up windows} xywh {10 190 100 25} box FLAT_BOX color 23 align 128
          code0 {if(!linuxcommon::test_exec("dunst"))o->hide();}
        }
      }
    }
  }
  Function {dunst_window()} {open
  } {
    Fl_Window dunst_win {
      label {System Notifications} open
      xywh {444 54 545 615} type Double hide
      code0 {startup(o);}
      code1 {debug_out("dunst window");} xclass {preferences-system-notifications}
    } {
      Fl_Scroll {} {open
        xywh {5 0 555 610}
      } {
        Fl_Button {} {
          label Font
          callback {std::string attribute ="font";}
          xywh {5 5 125 25} box FLAT_BOX color 23
        }
        Fl_Output font {
          xywh {145 5 90 25} box FLAT_BOX selection_color 80
          code0 {std::string attribute ="font";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Menu_Button {} {
          label Alignment open
          tooltip {Alignment of message text. Possible values are "left", "center" and "right".} xywh {5 33 125 25} box FLAT_BOX color 23 selection_color 72
        } {
          MenuItem {} {
            label left
            callback {std::string value="left";
alignment->value(value.c_str());
alignment->redraw();}
            xywh {5 5 100 20}
          }
          MenuItem {} {
            label center
            callback {std::string value="center";
alignment->value(value.c_str());
alignment->redraw();}
            xywh {5 5 100 20}
          }
          MenuItem {} {
            label right
            callback {std::string value="right";
alignment->value(value.c_str());
alignment->redraw();}
            xywh {5 5 100 20}
          }
        }
        Fl_Output alignment {
          tooltip {Alignment of message text. Possible values are "left", "center" and "right".} xywh {145 33 90 25} box FLAT_BOX selection_color 80
          code0 {std::string attribute ="alignment";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Menu_Button {} {
          label Follow open
          tooltip {Display notification on focused monitor.  Possible modes are:   mouse: follow mouse pointer   keyboard: follow window with keyboard focus   none: don't follow anything  "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property. This should be the case for almost all modern windowmanagers.  If this option is set to mouse or keyboard, the monitor option will be ignored.} xywh {5 60 125 25} box FLAT_BOX color 23 selection_color 72
        } {
          MenuItem {} {
            label mouse
            callback {std::string value="mouse";
follow->value(value.c_str());
follow->redraw();}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label keyboard
            callback {std::string value="keyboard";
follow->value(value.c_str());
follow->redraw();}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label none
            callback {std::string value="none";
follow->value(value.c_str());
follow->redraw();}
            xywh {15 15 100 20}
          }
        }
        Fl_Output follow {
          tooltip {Display notification on focused monitor.  Possible modes are:   mouse: follow mouse pointer   keyboard: follow window with keyboard focus   none: don't follow anything  "keyboard" needs a windowmanager that exports the _NET_ACTIVE_WINDOW property. This should be the case for almost all modern windowmanagers.  If this option is set to mouse or keyboard, the monitor option will be ignored.} xywh {145 60 90 25} box FLAT_BOX selection_color 80
          code0 {std::string attribute ="follow";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Menu_Button {} {
          label {Separator Color} open
          tooltip {Define a color for the separator. possible values are:  * auto: dunst tries to find a color fitting to the background;  * foreground: use the same color as the foreground;  * frame: use the same color as the frame;  * anything else will be interpreted as a X color.} xywh {5 114 125 25} box FLAT_BOX color 23 selection_color 72
        } {
          MenuItem {} {
            label auto
            callback {std::string value="auto";
separator_color->value(value.c_str());
separator_color->redraw();}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label foreground
            callback {std::string value="foreground";
separator_color->value(value.c_str());
separator_color->redraw();}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label frame
            callback {std::string value="frame";
separator_color->value(value.c_str());
separator_color->redraw();}
            xywh {25 25 100 20}
          }
          MenuItem {} {
            label color
            callback {color_picker(sep_col_b);
std::string tmp=widgetColor(sep_col_b);
separator_color->value(tmp.c_str());
separator_color->redraw();}
            xywh {35 35 100 20}
          }
        }
        Fl_Output separator_color {
          tooltip {Define a color for the separator. possible values are:  * auto: dunst tries to find a color fitting to the background;  * foreground: use the same color as the foreground;  * frame: use the same color as the frame;  * anything else will be interpreted as a X color.} xywh {145 114 90 25} box FLAT_BOX selection_color 80
          code0 {std::string attribute ="separator_color";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Check_Button word_wrap {
          label {Word wrap}
          callback {std::string attribute ="word_wrap";
if(o->value()==1){bounce_freq->deactivate();}
else{bounce_freq->activate();}}
          tooltip {Split notifications into multiple lines if they don't fit into geometery} xywh {5 140 90 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="word_wrap";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Value_Input bounce_freq {
          label {Bounce Frequency}
          tooltip {The frequency with wich text that is longer than the notification window allows bounces back and forth. This option conflicts with "word_wrap". Set to 0 to disable.} xywh {145 140 25 20} box FLAT_BOX selection_color 80 align 8
          code0 {if(word_wrap->value()==1){o->deactivate();}}
          code1 {std::string attribute = "bounce_freq";}
          code2 {dunst_valuator(o,attribute);}
        }
        Fl_Check_Button allow_markup {
          label {Allow Markup}
          callback {std::string attribute ="allow_markup";}
          tooltip {For a complete reference see <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>. If markup is not allowed, those tags will be stripped out of the message.} xywh {5 165 90 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="allow_markup";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Output format {
          label Format
          callback {std::string attribute ="format";}
          tooltip {The format of the message.  Possible variables are:   %a  appname   %s  summary   %b  body   %i  iconname (including its path)   %I  iconname (without its path)   %p  progress value if set ([  0%] to [100%]) or nothing} xywh {145 165 150 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="format";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Check_Button sort {
          label {Sort by urgency}
          callback {std::string attribute ="sort";}
          tooltip {Sort messages by urgency.} xywh {5 185 90 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="sort";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Check_Button indicate_hidden {
          label {Indicate hidden}
          callback {std::string attribute ="indicate_hidden";}
          tooltip {Show how many messages are currently hidden (because of geometry).} xywh {5 209 90 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="indicate_hidden";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Check_Button ignore_newline {
          label {Ignore newlines}
          callback {std::string attribute ="ignore_newline";}
          tooltip {Ignore newlines '\\n' in notifications.} xywh {5 232 140 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="ignore_newline";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Check_Button shrink {
          label Shrink
          callback {std::string attribute ="shrink";}
          tooltip {Shrink window if it's smaller than the width.  Will be ignored if width is 0.} xywh {5 255 140 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="shrink";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Check_Button sticky_history {
          label {Sticky History}
          callback {std::string attribute ="sticky_history";}
          tooltip {Should a notification popped up from history be sticky or timeout as if it would normally do.} xywh {145 204 140 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="sticky_history";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Value_Input idle_threshold {
          label {idle threshold}
          callback {std::string attribute ="idle_threshold";}
          tooltip {Don't remove messages, if the user is idle (no mouse or keyboard input) for longer than idle_threshold seconds. Set to 0 to disable.} xywh {5 305 40 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="idle_threshold";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Check_Button show_indicators {
          label {Show Indicators}
          callback {std::string attribute ="show_indicators";}
          tooltip {Display indicators for URLs (U) and actions (A)} xywh {145 227 140 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="show_indicators";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Output geometry {
          label Geometery
          callback {std::string attribute ="geometry";}
          xywh {5 415 175 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="geometry";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Slider trans_slide {
          label Transparency
          callback {transparency->value(o->value());}
          tooltip {The transparency of the window.  Range: [0; 100]. This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc.).} xywh {395 440 90 25} type Horizontal box GTK_DOWN_BOX color 41 align 4 maximum 100 step 1
        }
        Fl_Value_Input transparency {
          callback {trans_slide->value(o->value());}
          tooltip {The transparency of the window.  Range: [0; 100]. This option will only work if a compositing windowmanager is present (e.g. xcompmgr, compiz, etc.).} xywh {495 440 25 25} box FLAT_BOX selection_color 80 align 8 when 3 maximum 100 step 1
          code0 {std::string attribute ="transparency";}
          code1 {dunst_valuator(o,attribute);}
          code2 {//trans_slide->value(o->value());}
        }
        Fl_Value_Input show_age_threshold {
          label {Age threshold}
          callback {std::string attribute = "show_age_threshold";}
          tooltip {Show age of message if message is older than this ammount in seconds} xywh {5 280 40 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute = "show_age_threshold";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input monitor {
          label Monitor
          callback {std::string attribute ="monitor";}
          tooltip {Which monitor should the notifications be displayed on.} xywh {5 330 40 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="monitor";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input history_length {
          label {History Length}
          callback {std::string attribute ="history_length";}
          tooltip {Maximum amount of notifications kept in history} xywh {5 355 40 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="history_length";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input line_height {
          label {Line Height}
          callback {std::string attribute ="line_height";}
          tooltip {The height of a single line.  If the height is smaller than the font height, it will get raised to the font height. This adds empty space above and under the text.} xywh {155 280 45 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="line_height";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input separator_height {
          label {Separator Height}
          callback {std::string attribute ="separator_height";}
          tooltip {Draw a line of this pixel height between two notifications. Set to 0 to disable.} xywh {155 305 45 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="separator_height";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input padding {
          label {Text Padding}
          callback {std::string attribute ="padding";}
          tooltip {Padding between text and separator.} xywh {155 330 45 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="padding";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Value_Input horizontal_padding {
          label {Horizontal Padding}
          callback {std::string attribute ="horizontal_padding";}
          tooltip {Padding between text and separator.} xywh {155 355 45 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="horizontal_padding";}
          code1 {dunst_valuator(o,attribute);}
        }
        Fl_Button sep_col_b {
          callback {color_picker(o);
std::string tmp=widgetColor(o);
separator_color->value(tmp.c_str());
separator_color->redraw();}
          tooltip {Choose a color} xywh {245 114 65 25} box FLAT_BOX color 23
        }
        Fl_Check_Button startup_notification {
          label {Startup Notification}
          callback {std::string attribute ="startup_notification";}
          tooltip {Print a notification on startup. This is mainly for error detection, since dbus (re-)starts dunst automatically after a crash.} xywh {145 250 140 25} down_box GTK_DOWN_BOX color 7 selection_color 2
          code0 {std::string attribute ="startup_notification";}
          code1 {dunst_bool(o,"global",attribute);}
        }
        Fl_Output dmenu {
          label {Dmenu path}
          callback {std::string attribute ="dmenu";}
          xywh {5 380 175 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="dmenu";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Box {} {
          label Frame
          xywh {405 355 125 70} box FLAT_BOX color 42 align 1
        }
        Fl_Value_Input Frame_width {
          label Width
          callback {std::string attribute ="width";
std::string element="frame";}
          xywh {410 360 25 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string element="frame";}
          code1 {std::string attribute ="width";}
          code2 {dunst_valuator(o,element,attribute);}
        }
        Fl_Button Frame_color {
          label Color
          callback {color_picker(o);}
          xywh {410 385 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="frame";}
          code1 {std::string attribute="color";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Box {} {
          label Shortcuts
          xywh {315 20 225 130} box FLAT_BOX color 42 align 1
        }
        Fl_Output close {
          label Close
          callback {std::string attribute ="close";}
          tooltip {Close notification.} xywh {320 25 150 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="close";}
          code1 {dunst_input(o,"shortcuts",attribute);}
        }
        Fl_Output close_all {
          label {Close All}
          callback {std::string attribute ="close_all";}
          tooltip {Close all notifications.} xywh {320 55 150 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="close_all";}
          code1 {dunst_input(o,"shortcuts",attribute);}
        }
        Fl_Output history {
          label History
          callback {std::string attribute ="history";}
          tooltip {Redisplay last message(s). On the US keyboard layout "grave" is normally above TAB and left of "1".} xywh {320 85 150 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="history";}
          code1 {dunst_input(o,"shortcuts",attribute);}
        }
        Fl_Output context {
          label Context
          callback {std::string attribute ="context";}
          tooltip {Context menu.} xywh {320 115 150 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="context";}
          code1 {dunst_input(o,"shortcuts",attribute);}
        }
        Fl_Box {} {
          label {Low Urgency}
          xywh {365 490 175 90} box FLAT_BOX color 42 align 1
        }
        Fl_Button Low_foreground {
          label Foreground
          callback {color_picker(o);}
          tooltip {Background color} xywh {370 495 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_low";}
          code1 {std::string attribute="foreground";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Value_Input Low_timeout {
          label Timeout
          xywh {370 555 25 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string element="urgency_low";}
          code1 {std::string attribute ="timeout";}
          code2 {dunst_valuator(o,element,attribute);}
        }
        Fl_Button Low_background {
          label Background
          callback {color_picker(o);}
          tooltip {Background color} xywh {370 525 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_low";}
          code1 {std::string attribute="background";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Box {} {
          label {Normal Urgency}
          xywh {185 490 175 90} box FLAT_BOX color 42 align 1
        }
        Fl_Button Norm_foreground {
          label Foreground
          callback {color_picker(o);}
          tooltip {Background color} xywh {190 495 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_normal";}
          code1 {std::string attribute="foreground";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Value_Input Norm_timeout {
          label Timeout
          xywh {190 555 25 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string element="urgency_normal";}
          code1 {std::string attribute ="timeout";}
          code2 {dunst_valuator(o,element,attribute);}
        }
        Fl_Button Norm_background {
          label Background
          callback {color_picker(o);}
          tooltip {Background color} xywh {190 525 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_normal";}
          code1 {std::string attribute="background";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Box {} {
          label {Critical Urgency}
          xywh {5 490 175 90} box FLAT_BOX color 42 align 1
        }
        Fl_Button Crit_foreground {
          label Foreground
          callback {color_picker(o);}
          tooltip {Background color} xywh {10 495 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_critical";}
          code1 {std::string attribute="foreground";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Value_Input Crit_timeout {
          label Timeout
          xywh {10 555 25 20} box FLAT_BOX selection_color 80 align 8
          code0 {std::string element="urgency_critical";}
          code1 {std::string attribute ="timeout";}
          code2 {dunst_valuator(o,element,attribute);}
        }
        Fl_Button Crit_background {
          label Background
          callback {color_picker(o);}
          tooltip {Background color} xywh {10 525 70 25} box FLAT_BOX color 23 align 8
          code0 {std::string element="urgency_critical";}
          code1 {std::string attribute="background";}
          code2 {dunst_color(o,element,attribute);}
        }
        Fl_Browser icon_folders {
          label {Icon Folders}
          callback {if(!checkFlBrowserItem(o))return;
int line=o->value();
const char* txt=o->text(line);
icon_folders_input->value(txt);
icon_folders_input->redraw();}
          xywh {355 165 180 135} type Select box FLAT_BOX selection_color 80 align 1
          code0 {dunst_icons();}
        }
        Fl_Input icon_folders_input {
          callback {int line=0;
const char* txt=o->value();
if(checkFlBrowserItem(icon_folders)){
  line=icon_folders->value();
  icon_folders->text(line,txt);
}
else{icon_folders->add(txt);}
icon_folders->redraw();}
          xywh {355 305 180 25} box FLAT_BOX selection_color 80
        }
        Fl_Output browser {
          label Browser
          tooltip {Browser for opening urls in context menu.} xywh {5 445 175 25} box FLAT_BOX selection_color 80 align 8
          code0 {std::string attribute ="browser";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Menu_Button {} {
          label {Icon Alignment}
          tooltip {Alignment of icons. Possible values are "left", "center" and "right".} xywh {5 87 125 25} box FLAT_BOX color 23 selection_color 72
        } {
          MenuItem {} {
            label left
            callback {std::string value="left";
icon_position->value(value.c_str());
icon_position->redraw();}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label off
            callback {std::string value="off";
icon_position->value(value.c_str());
icon_position->redraw();}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label right
            callback {std::string value="right";
icon_position->value(value.c_str());
icon_position->redraw();}
            xywh {15 15 100 20}
          }
        }
        Fl_Output icon_position {
          tooltip {Alignment of Icons. Possible values are "left", "center" and "right".} xywh {145 87 90 25} box FLAT_BOX selection_color 80
          code0 {std::string attribute ="icon_position";}
          code1 {dunst_input(o,attribute);}
        }
        Fl_Button {} {
          label Save
          callback {make_dunst_conf();
dunst_win->hide();}
          tooltip {This will OVERWRITE the current configuration} xywh {470 585 70 25} box FLAT_BOX color 62 labelcolor 7
        }
        Fl_Button {} {
          label Quit
          callback {dunst_win->hide();}
          xywh {390 585 70 25} box FLAT_BOX color 80 labelcolor 7
        }
      }
    }
  }
  Function {enabled(std::string value)} {} {
    code {if(!setElementAttribute("PopupStyle","enabled",value)){
  debug_out("Could not set popup style");
}
enabled_out->value(value.c_str());
enabled_out->redraw();} {}
  }
  Function {get_color(std::string element)} {return_type {unsigned int}
  } {
    code {std::string color=getElementText("PopupStyle",element);
return flCOLOR(color);} {}
  }
  Function {set_color(Fl_Widget*o,std::string element)} {} {
    code {int retval=0;
double* color = choose_a_color(retval,o);
if(retval!=0){
  if(!setElementFloat("PopupStyle",element,color)){
    errorOUT("Could not set the color");
    return;
  }
  std::string tmp=getElementText("PopupStyle",element);
  unsigned int colorSet=flCOLOR(tmp);
  o->color(colorSet);
  o->redraw();
}} {}
  }
  Function {get_dunst_global(std::string attribute)} {return_type {std::string}
  } {
    code {return get_dunst("global",attribute);} {}
  }
  Function {get_dunst(std::string element, std::string attribute)} {open return_type {std::string}
  } {
    code {debug_out("get_dunst("+element+","+attribute);
if(DUNSTCONF.compare("")==0)DUNSTCONF=dunst_config();
std::string filename=DUNSTCONF;
if(filename.compare("")==0){return "";}
attribute+=" =";
std::string tmp= linuxcommon::get_line_with_equal_after_header(element,filename,attribute);
debug_out("result="+tmp);
unsigned int find=tmp.find("\\"");
if(find==0){tmp=tmp.erase(0,1);}
find=tmp.find("\\"");
unsigned int len=tmp.length();
if(find==len-1){tmp=tmp.erase(len-1,std::string::npos);}
return tmp;} {}
  }
  Function {dunst_input(Fl_Input *o,std::string element,std::string attribute)} {} {
    code {std::string tmp=get_dunst(element,attribute);
if(tmp.compare("")==0){
  debug_out(element+"->"+attribute+" contained nothing");
  return;
}
o->value(tmp.c_str());
o->redraw();} {}
  }
  Function {dunst_valuator(Fl_Valuator *o,std::string element,std::string attribute)} {} {
    code {std::string tmp=get_dunst(element,attribute);
if(tmp.compare("")==0){
  debug_out(element+"->"+attribute+" contained nothing");
  return;
}
double val=linuxcommon::convert_string_to_double(tmp);
o->value(val);
o->redraw();} {}
  }
  Function {dunst_valuator(Fl_Valuator *o,std::string attribute)} {} {
    code {//GLOBAL
dunst_valuator(o,"global",attribute);} {}
  }
  Function {dunst_input(Fl_Input *o,std::string attribute)} {} {
    code {//GLOBAL
dunst_input(o,"global",attribute);} {}
  }
  Function {dunst_bool(Fl_Check_Button *o,std::string element,std::string attribute)} {} {
    code {std::string tmp=get_dunst(element,attribute);
if(tmp.compare("")==0){
  debug_out(element+"->"+attribute+" contained nothing");
  return;
}
std::transform(tmp.begin(), tmp.end(), tmp.begin(), ::tolower);
if((tmp.compare("true")==0)||(tmp.compare("yes")==0)){o->value(1);}
else{o->value(0);}} {}
  }
  Function {dunst_color(Fl_Widget *o,std::string element,std::string attribute)} {open
  } {
    code {std::string tmp=get_dunst(element,attribute);
if(tmp.compare("")==0){
  debug_out(element+"->"+attribute+" contained nothing");
  return;
}
unsigned int color=flCOLOR(tmp);
o->color(color);
o->redraw();} {}
  }
  Function {dunst_config()} {open return_type {std::string}
  } {
    code {std::string xdg_config=linuxcommon::get_config_dir();
xdg_config+="dunst/dunstrc";
if(!linuxcommon::test_file(xdg_config)){
  errorOUT("Could not find the right file");
  return "";
}
return xdg_config;} {}
  }
  Function {dunst_icons()} {} {
    code {std::string list=get_dunst_global("icon_folders");
std::vector<std::string> myVec=linuxcommon::delimiter_vector_from_string(list,":");
populateBrowserWithStringVector(icon_folders,myVec);} {}
  }
  Function {color_picker(Fl_Widget* o)} {open
  } {
    code {int retval=0;
double* color=choose_a_color(retval,o);
std::string COLORstring=colorToString(color);
unsigned int COLOR=flCOLOR(COLORstring);
o->color(COLOR);
std::cout<<o->color()<<std::endl;} {}
  }
  Function {make_dunst_conf()} {open
  } {
    code {std::string TOTAL="\#DO NOT MANUALLY EDIT\\n[global]";
TOTAL+=out_val(font,"font",false);
TOTAL+=bool_val(allow_markup,"allow_markup",false);
TOTAL+=out_val(format,"format",true);
TOTAL+=bool_val(sort,"sort",false);
TOTAL+=bool_val(indicate_hidden,"indicate_hidden",false);
TOTAL+=out_val(alignment,"alignment",false);
TOTAL+=int_val(bounce_freq,"bounce_freq");
TOTAL+=int_val(show_age_threshold,"show_age_threshold");
TOTAL+=bool_val(word_wrap,"word_wrap",false);
TOTAL+=bool_val(ignore_newline,"ignore_newline",false);
TOTAL+=out_val(geometry,"geometry",true);
TOTAL+=bool_val(shrink,"shrink",false);
TOTAL+=int_val(transparency,"transparency");
TOTAL+=int_val(idle_threshold,"idle_threshold");
TOTAL+=int_val(monitor,"monitor");
TOTAL+=out_val(follow,"follow",false);
TOTAL+=bool_val(sticky_history,"sticky_history",false);
TOTAL+=int_val(history_length,"history_length");
TOTAL+=bool_val(show_indicators,"show_indicators",false);
TOTAL+=int_val(line_height,"line_height");
TOTAL+=int_val(separator_height,"separator_height");
TOTAL+=int_val(padding,"padding");
TOTAL+=int_val(horizontal_padding,"horizontal_padding");
TOTAL+=out_val(separator_color,"separator_color",false);
TOTAL+=bool_val(startup_notification,"startup_notification",true);
TOTAL+=out_val(dmenu,"dmenu",false);
TOTAL+=out_val(browser,"browser",false);
TOTAL+=out_val(icon_position,"icon_position",false);
TOTAL+=icon_val();
TOTAL+="\\n[frame]";
TOTAL+=int_val(Frame_width,"width");
TOTAL+=color_val(Frame_color,"color");
TOTAL+="\\n[shortcuts]";
TOTAL+=out_val(close,"close",false);
TOTAL+=out_val(close_all,"close_all",false);
TOTAL+=out_val(history,"history",false);
TOTAL+=out_val(context,"context",false);
TOTAL+="\\n[urgency_low]";
TOTAL+=color_val(Low_background,"background");
TOTAL+=color_val(Low_foreground,"foreground");
TOTAL+=int_val(Low_timeout,"timeout");
TOTAL+="\\n[urgency_normal]";
TOTAL+=color_val(Norm_background,"background");
TOTAL+=color_val(Norm_foreground,"foreground");
TOTAL+=int_val(Norm_timeout,"timeout");
TOTAL+="\\n[urgency_critical]";
TOTAL+=color_val(Crit_background,"background");
TOTAL+=color_val(Crit_foreground,"foreground");
TOTAL+=int_val(Crit_timeout,"timeout");
if(DUNSTCONF.compare("")==0)DUNSTCONF=dunst_config();
std::string filename=DUNSTCONF;
if(!linuxcommon::save_string_to_file(TOTAL,filename)){
  errorOUT("Could not save the file:");
  std::cout<<TOTAL<<std::endl;
}} {}
  }
  Function {out_val(Fl_Input *o,std::string thing,bool quote)} {open return_type {std::string}
  } {
    code {std::string tmp;
if(!InputIsEmpty(o)){
  tmp=o->value();
  if(isColor(tmp)){quote=true;}
  if(quote){tmp="\\""+tmp+"\\"";}
  tmp="\\n    "+thing+" = "+tmp;
}
return tmp;} {}
  }
  Function {bool_val(Fl_Check_Button *o,std::string thing,bool boolean)} {open return_type {std::string}
  } {
    code {std::string tmp;
std::string value="no";
if(boolean){value="false";}
if(o->value()==1){
  value="yes";
  if(boolean)value="true";
}
tmp="\\n    "+thing+" = "+value;
return tmp;} {}
  }
  Function {int_val(Fl_Valuator *o,std::string thing)} {open return_type {std::string}
  } {
    code {std::string tmp;
const char* value=linuxcommon::convert_num_to_string(o->value());
if(value==NULL){return "";}
tmp="\\n    "+thing+" = ";
tmp+=value;
return tmp;} {}
  }
  Function {color_val(Fl_Widget *o,std::string thing)} {open return_type {std::string}
  } {
    code {std::string tmp;
std::string value=widgetColor(o);
if(value.compare("")==0){return "";}
value="\\""+value+"\\"";
tmp="\\n    "+thing+" = ";
tmp+=value;
return tmp;} {}
  }
  Function {icon_val()} {open return_type {std::string}
  } {
    code {int total=icon_folders->size();
std::string result="\\n    icon_folders = ";
for(int start=1;start<total;start++){
  const char* tmp=icon_folders->text(start);
  if(tmp!=NULL){
    if(result.compare("")!=0)
    	result=result+":";
    result+=tmp;
  }
}
return result;} {}
  }
  Function {get_delay(Fl_Valuator*o)} {open
  } {
    code {std::string val=getElementAttribute("PopupStyle","delay");
int num=linuxcommon::convert_string_to_number(val.c_str());
o->value(num);} {selected
    }
  }
  Function {set_delay(Fl_Valuator*o)} {open
  } {
    code {double num=o->value();
const char* value=linuxcommon::convert_num_to_string(num);
if(value==NULL){
  errorOUT("Invalid value");
  return;
}
if(!setElementAttribute("PopupStyle","delay",value)){
  errorOUT("Could not set delay");
}} {}
  }
} 
