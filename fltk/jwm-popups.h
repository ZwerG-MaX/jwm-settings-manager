/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef jwm_popups_h
#define jwm_popups_h
#include <FL/Fl.H>
#include <libintl.h>
#include "../include/jwmrc.hpp"
#include "../include/common.hpp"
#include "../include/fltkfunctions.hpp"
#include "../include/ui.hpp"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Input.H>

class PopupsUI : public FLTK_FUNCTIONS {
  std::string DUNSTCONF; 
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *popup_window;
  Fl_Button *outline;
private:
  inline void cb_outline_i(Fl_Button*, void*);
  static void cb_outline(Fl_Button*, void*);
public:
  Fl_Value_Input *delay_out;
private:
  inline void cb_delay_out_i(Fl_Value_Input*, void*);
  static void cb_delay_out(Fl_Value_Input*, void*);
public:
  Fl_Slider *delay_slider;
private:
  inline void cb_delay_slider_i(Fl_Slider*, void*);
  static void cb_delay_slider(Fl_Slider*, void*);
  static unsigned char menu_enabled_i18n_done;
  static Fl_Menu_Item menu_enabled[];
  inline void cb_true_i(Fl_Menu_*, void*);
  static void cb_true(Fl_Menu_*, void*);
  inline void cb_false_i(Fl_Menu_*, void*);
  static void cb_false(Fl_Menu_*, void*);
  inline void cb_button_i(Fl_Menu_*, void*);
  static void cb_button(Fl_Menu_*, void*);
  inline void cb_clock_i(Fl_Menu_*, void*);
  static void cb_clock(Fl_Menu_*, void*);
  inline void cb_menu_i(Fl_Menu_*, void*);
  static void cb_menu(Fl_Menu_*, void*);
  inline void cb_pager_i(Fl_Menu_*, void*);
  static void cb_pager(Fl_Menu_*, void*);
  inline void cb_task_i(Fl_Menu_*, void*);
  static void cb_task(Fl_Menu_*, void*);
public:
  Fl_Output *enabled_out;
private:
  inline void cb_Text_i(Fl_Button*, void*);
  static void cb_Text(Fl_Button*, void*);
  inline void cb_Background_i(Fl_Button*, void*);
  static void cb_Background(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_Notifications_i(Fl_Button*, void*);
  static void cb_Notifications(Fl_Button*, void*);
public:
  Fl_Double_Window* dunst_window();
  Fl_Double_Window *dunst_win;
private:
  inline void cb_Font_i(Fl_Button*, void*);
  static void cb_Font(Fl_Button*, void*);
public:
  Fl_Output *font;
  static unsigned char menu_Alignment_i18n_done;
  static Fl_Menu_Item menu_Alignment[];
private:
  inline void cb_left_i(Fl_Menu_*, void*);
  static void cb_left(Fl_Menu_*, void*);
  inline void cb_center_i(Fl_Menu_*, void*);
  static void cb_center(Fl_Menu_*, void*);
  inline void cb_right_i(Fl_Menu_*, void*);
  static void cb_right(Fl_Menu_*, void*);
public:
  Fl_Output *alignment;
  static unsigned char menu_Follow_i18n_done;
  static Fl_Menu_Item menu_Follow[];
private:
  inline void cb_mouse_i(Fl_Menu_*, void*);
  static void cb_mouse(Fl_Menu_*, void*);
  inline void cb_keyboard_i(Fl_Menu_*, void*);
  static void cb_keyboard(Fl_Menu_*, void*);
  inline void cb_none_i(Fl_Menu_*, void*);
  static void cb_none(Fl_Menu_*, void*);
public:
  Fl_Output *follow;
  static unsigned char menu_Separator_i18n_done;
  static Fl_Menu_Item menu_Separator[];
private:
  inline void cb_auto_i(Fl_Menu_*, void*);
  static void cb_auto(Fl_Menu_*, void*);
  inline void cb_foreground_i(Fl_Menu_*, void*);
  static void cb_foreground(Fl_Menu_*, void*);
  inline void cb_frame_i(Fl_Menu_*, void*);
  static void cb_frame(Fl_Menu_*, void*);
  inline void cb_color_i(Fl_Menu_*, void*);
  static void cb_color(Fl_Menu_*, void*);
public:
  Fl_Output *separator_color;
  Fl_Check_Button *word_wrap;
private:
  inline void cb_word_wrap_i(Fl_Check_Button*, void*);
  static void cb_word_wrap(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *bounce_freq;
  Fl_Check_Button *allow_markup;
private:
  inline void cb_allow_markup_i(Fl_Check_Button*, void*);
  static void cb_allow_markup(Fl_Check_Button*, void*);
public:
  Fl_Output *format;
private:
  inline void cb_format_i(Fl_Output*, void*);
  static void cb_format(Fl_Output*, void*);
public:
  Fl_Check_Button *sort;
private:
  inline void cb_sort_i(Fl_Check_Button*, void*);
  static void cb_sort(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *indicate_hidden;
private:
  inline void cb_indicate_hidden_i(Fl_Check_Button*, void*);
  static void cb_indicate_hidden(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *ignore_newline;
private:
  inline void cb_ignore_newline_i(Fl_Check_Button*, void*);
  static void cb_ignore_newline(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *shrink;
private:
  inline void cb_shrink_i(Fl_Check_Button*, void*);
  static void cb_shrink(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *sticky_history;
private:
  inline void cb_sticky_history_i(Fl_Check_Button*, void*);
  static void cb_sticky_history(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *idle_threshold;
private:
  inline void cb_idle_threshold_i(Fl_Value_Input*, void*);
  static void cb_idle_threshold(Fl_Value_Input*, void*);
public:
  Fl_Check_Button *show_indicators;
private:
  inline void cb_show_indicators_i(Fl_Check_Button*, void*);
  static void cb_show_indicators(Fl_Check_Button*, void*);
public:
  Fl_Output *geometry;
private:
  inline void cb_geometry_i(Fl_Output*, void*);
  static void cb_geometry(Fl_Output*, void*);
public:
  Fl_Slider *trans_slide;
private:
  inline void cb_trans_slide_i(Fl_Slider*, void*);
  static void cb_trans_slide(Fl_Slider*, void*);
public:
  Fl_Value_Input *transparency;
private:
  inline void cb_transparency_i(Fl_Value_Input*, void*);
  static void cb_transparency(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *show_age_threshold;
private:
  inline void cb_show_age_threshold_i(Fl_Value_Input*, void*);
  static void cb_show_age_threshold(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *monitor;
private:
  inline void cb_monitor_i(Fl_Value_Input*, void*);
  static void cb_monitor(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *history_length;
private:
  inline void cb_history_length_i(Fl_Value_Input*, void*);
  static void cb_history_length(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *line_height;
private:
  inline void cb_line_height_i(Fl_Value_Input*, void*);
  static void cb_line_height(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *separator_height;
private:
  inline void cb_separator_height_i(Fl_Value_Input*, void*);
  static void cb_separator_height(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *padding;
private:
  inline void cb_padding_i(Fl_Value_Input*, void*);
  static void cb_padding(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *horizontal_padding;
private:
  inline void cb_horizontal_padding_i(Fl_Value_Input*, void*);
  static void cb_horizontal_padding(Fl_Value_Input*, void*);
public:
  Fl_Button *sep_col_b;
private:
  inline void cb_sep_col_b_i(Fl_Button*, void*);
  static void cb_sep_col_b(Fl_Button*, void*);
public:
  Fl_Check_Button *startup_notification;
private:
  inline void cb_startup_notification_i(Fl_Check_Button*, void*);
  static void cb_startup_notification(Fl_Check_Button*, void*);
public:
  Fl_Output *dmenu;
private:
  inline void cb_dmenu_i(Fl_Output*, void*);
  static void cb_dmenu(Fl_Output*, void*);
public:
  Fl_Value_Input *Frame_width;
private:
  inline void cb_Frame_width_i(Fl_Value_Input*, void*);
  static void cb_Frame_width(Fl_Value_Input*, void*);
public:
  Fl_Button *Frame_color;
private:
  inline void cb_Frame_color_i(Fl_Button*, void*);
  static void cb_Frame_color(Fl_Button*, void*);
public:
  Fl_Output *close;
private:
  inline void cb_close_i(Fl_Output*, void*);
  static void cb_close(Fl_Output*, void*);
public:
  Fl_Output *close_all;
private:
  inline void cb_close_all_i(Fl_Output*, void*);
  static void cb_close_all(Fl_Output*, void*);
public:
  Fl_Output *history;
private:
  inline void cb_history_i(Fl_Output*, void*);
  static void cb_history(Fl_Output*, void*);
public:
  Fl_Output *context;
private:
  inline void cb_context_i(Fl_Output*, void*);
  static void cb_context(Fl_Output*, void*);
public:
  Fl_Button *Low_foreground;
private:
  inline void cb_Low_foreground_i(Fl_Button*, void*);
  static void cb_Low_foreground(Fl_Button*, void*);
public:
  Fl_Value_Input *Low_timeout;
  Fl_Button *Low_background;
private:
  inline void cb_Low_background_i(Fl_Button*, void*);
  static void cb_Low_background(Fl_Button*, void*);
public:
  Fl_Button *Norm_foreground;
private:
  inline void cb_Norm_foreground_i(Fl_Button*, void*);
  static void cb_Norm_foreground(Fl_Button*, void*);
public:
  Fl_Value_Input *Norm_timeout;
  Fl_Button *Norm_background;
private:
  inline void cb_Norm_background_i(Fl_Button*, void*);
  static void cb_Norm_background(Fl_Button*, void*);
public:
  Fl_Button *Crit_foreground;
private:
  inline void cb_Crit_foreground_i(Fl_Button*, void*);
  static void cb_Crit_foreground(Fl_Button*, void*);
public:
  Fl_Value_Input *Crit_timeout;
  Fl_Button *Crit_background;
private:
  inline void cb_Crit_background_i(Fl_Button*, void*);
  static void cb_Crit_background(Fl_Button*, void*);
public:
  Fl_Browser *icon_folders;
private:
  inline void cb_icon_folders_i(Fl_Browser*, void*);
  static void cb_icon_folders(Fl_Browser*, void*);
public:
  Fl_Input *icon_folders_input;
private:
  inline void cb_icon_folders_input_i(Fl_Input*, void*);
  static void cb_icon_folders_input(Fl_Input*, void*);
public:
  Fl_Output *browser;
  static unsigned char menu_Icon_i18n_done;
  static Fl_Menu_Item menu_Icon[];
private:
  inline void cb_left1_i(Fl_Menu_*, void*);
  static void cb_left1(Fl_Menu_*, void*);
  inline void cb_off_i(Fl_Menu_*, void*);
  static void cb_off(Fl_Menu_*, void*);
  inline void cb_right1_i(Fl_Menu_*, void*);
  static void cb_right1(Fl_Menu_*, void*);
public:
  Fl_Output *icon_position;
private:
  inline void cb_Save_i(Fl_Button*, void*);
  static void cb_Save(Fl_Button*, void*);
  inline void cb_Quit_i(Fl_Button*, void*);
  static void cb_Quit(Fl_Button*, void*);
public:
  void enabled(std::string value);
  unsigned int get_color(std::string element);
  void set_color(Fl_Widget*o,std::string element);
  std::string get_dunst_global(std::string attribute);
  std::string get_dunst(std::string element, std::string attribute);
  void dunst_input(Fl_Input *o,std::string element,std::string attribute);
  void dunst_valuator(Fl_Valuator *o,std::string element,std::string attribute);
  void dunst_valuator(Fl_Valuator *o,std::string attribute);
  void dunst_input(Fl_Input *o,std::string attribute);
  void dunst_bool(Fl_Check_Button *o,std::string element,std::string attribute);
  void dunst_color(Fl_Widget *o,std::string element,std::string attribute);
  std::string dunst_config();
  void dunst_icons();
  void color_picker(Fl_Widget* o);
  void make_dunst_conf();
  std::string out_val(Fl_Input *o,std::string thing,bool quote);
  std::string bool_val(Fl_Check_Button *o,std::string thing,bool boolean);
  std::string int_val(Fl_Valuator *o,std::string thing);
  std::string color_val(Fl_Widget *o,std::string thing);
  std::string icon_val();
  void get_delay(Fl_Valuator*o);
  void set_delay(Fl_Valuator*o);
};
#endif
