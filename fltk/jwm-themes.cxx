/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-themes.h"

void ThemesUI::cb_ok_i(Fl_Button*, void*) {
  const char* result = current_theme->label();
if(result!=NULL){
  std::string temp=result;
  change_theme(temp,false);
};
}
void ThemesUI::cb_ok(Fl_Button* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_ok_i(o,v);
}

void ThemesUI::cb_sys_theme_i(Fl_Browser* o, void*) {
  std::string filename=theme_cb(o, true,current_theme);
if(usr_theme->value()>0)
  usr_theme->select(usr_theme->value(),0);
updateTheme(o,button,button_icon,tray,awin,awin2,awin_text,iwin,iwin2,iwin_text,amin,amax,aclose,imin,imax,iclose,filename,false);
}
void ThemesUI::cb_sys_theme(Fl_Browser* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_sys_theme_i(o,v);
}

void ThemesUI::cb_save_button_i(Fl_Button*, void*) {
  save_theme(usr_theme);
}
void ThemesUI::cb_save_button(Fl_Button* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void ThemesUI::cb_cancel_button_i(Fl_Button*, void*) {
  cancel();
}
void ThemesUI::cb_cancel_button(Fl_Button* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_cancel_button_i(o,v);
}

void ThemesUI::cb_usr_theme_i(Fl_Browser* o, void*) {
  std::string filename=theme_cb(o, false,current_theme);
if(sys_theme->value()>0)
  sys_theme->select(sys_theme->value(),0);
updateTheme(o,button,button_icon,tray,awin,awin2,awin_text,iwin,iwin2,iwin_text,amin,amax,aclose,imin,imax,iclose,filename,true);
}
void ThemesUI::cb_usr_theme(Fl_Browser* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_usr_theme_i(o,v);
}

void ThemesUI::cb_overwritten_i(Fl_Button*, void*) {
  const char* result = current_theme->label();
if(result!=NULL){
  std::string temp=result;
  change_theme(temp,true);
};
}
void ThemesUI::cb_overwritten(Fl_Button* o, void* v) {
  ((ThemesUI*)(o->parent()->parent()->user_data()))->cb_overwritten_i(o,v);
}

Fl_Double_Window* ThemesUI::make_window() {
  { Fl_Double_Window* o = themes_window = new Fl_Double_Window(590, 300, gettext("Themes"));
    themes_window->color(FL_DARK1);
    themes_window->labelcolor(FL_BACKGROUND2_COLOR);
    themes_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 585, 295);
      o->color((Fl_Color)31);
      { ok = new Fl_Button(380, 162, 195, 30, gettext("Change Colors ONLY"));
        ok->tooltip(gettext("This will copy your current theme somewhere else"));
        ok->box(FL_FLAT_BOX);
        ok->color((Fl_Color)61);
        ok->selection_color((Fl_Color)58);
        ok->labelcolor(FL_BACKGROUND2_COLOR);
        ok->callback((Fl_Callback*)cb_ok);
      } // Fl_Button* ok
      { Fl_Browser* o = sys_theme = new Fl_Browser(15, 20, 130, 105, gettext("Themes"));
        sys_theme->tooltip(gettext("All the installed system themes"));
        sys_theme->type(2);
        sys_theme->box(FL_FLAT_BOX);
        sys_theme->selection_color(FL_DARK_RED);
        sys_theme->callback((Fl_Callback*)cb_sys_theme);
        sys_theme->align(Fl_Align(FL_ALIGN_TOP));
        populateThemes(o);
      } // Fl_Browser* sys_theme
      { button_icon = new Fl_Box(150, 20, 45, 40);
        button_icon->box(FL_FLAT_BOX);
        button_icon->color((Fl_Color)23);
      } // Fl_Box* button_icon
      { button = new Fl_Box(195, 20, 75, 40, gettext("Button"));
        button->box(FL_FLAT_BOX);
        button->color((Fl_Color)23);
      } // Fl_Box* button
      { tray = new Fl_Box(270, 20, 305, 40, gettext("Panel"));
        tray->box(FL_FLAT_BOX);
        tray->color((Fl_Color)23);
      } // Fl_Box* tray
      { awin2 = new Fl_Box(150, 77, 425, 30);
        awin2->box(FL_FLAT_BOX);
        awin2->color((Fl_Color)23);
      } // Fl_Box* awin2
      { awin = new Fl_Box(150, 67, 425, 40);
        awin->box(FL_FLAT_BOX);
        awin->color((Fl_Color)23);
      } // Fl_Box* awin
      { awin_text = new Fl_Box(150, 67, 425, 40, gettext("Window (Active)"));
        awin_text->color((Fl_Color)23);
      } // Fl_Box* awin_text
      { amin = new Fl_Box(480, 72, 30, 30);
        amin->color((Fl_Color)23);
      } // Fl_Box* amin
      { amax = new Fl_Box(510, 72, 30, 30);
        amax->color((Fl_Color)23);
      } // Fl_Box* amax
      { aclose = new Fl_Box(540, 72, 30, 30);
        aclose->color((Fl_Color)23);
      } // Fl_Box* aclose
      { iwin = new Fl_Box(150, 115, 425, 40);
        iwin->box(FL_FLAT_BOX);
        iwin->color((Fl_Color)23);
      } // Fl_Box* iwin
      { iwin2 = new Fl_Box(150, 125, 425, 30);
        iwin2->box(FL_FLAT_BOX);
        iwin2->color((Fl_Color)23);
      } // Fl_Box* iwin2
      { iwin_text = new Fl_Box(150, 115, 425, 40, gettext("Window (Inactive)"));
        iwin_text->color((Fl_Color)23);
      } // Fl_Box* iwin_text
      { imin = new Fl_Box(480, 120, 30, 30);
        imin->color((Fl_Color)23);
      } // Fl_Box* imin
      { imax = new Fl_Box(510, 120, 30, 30);
        imax->color((Fl_Color)23);
      } // Fl_Box* imax
      { iclose = new Fl_Box(540, 120, 30, 30);
        iclose->color((Fl_Color)23);
      } // Fl_Box* iclose
      { save_button = new Fl_Button(155, 162, 160, 30, gettext("Save Custom Theme"));
        save_button->tooltip(gettext("This will copy your current theme somewhere else"));
        save_button->box(FL_FLAT_BOX);
        save_button->color((Fl_Color)94);
        save_button->callback((Fl_Callback*)cb_save_button);
      } // Fl_Button* save_button
      { cancel_button = new Fl_Button(205, 200, 65, 33, gettext("Cancel"));
        cancel_button->tooltip(gettext("This will copy your current theme somewhere else"));
        cancel_button->box(FL_FLAT_BOX);
        cancel_button->color((Fl_Color)80);
        cancel_button->selection_color((Fl_Color)64);
        cancel_button->labelcolor(FL_BACKGROUND2_COLOR);
        cancel_button->callback((Fl_Callback*)cb_cancel_button);
      } // Fl_Button* cancel_button
      { Fl_Browser* o = usr_theme = new Fl_Browser(15, 145, 130, 140, gettext("User Themes"));
        usr_theme->tooltip(gettext("This contains all the themes in ~/.themes which MAY NOT be JWM themes"));
        usr_theme->type(2);
        usr_theme->box(FL_FLAT_BOX);
        usr_theme->selection_color(FL_DARK_RED);
        usr_theme->callback((Fl_Callback*)cb_usr_theme);
        usr_theme->align(Fl_Align(FL_ALIGN_TOP));
        populateUserThemes(o);
      } // Fl_Browser* usr_theme
      { overwritten = new Fl_Button(380, 200, 195, 35, gettext("Overwrite Current Theme"));
        overwritten->tooltip(gettext("This will copy your current theme somewhere else"));
        overwritten->box(FL_FLAT_BOX);
        overwritten->color((Fl_Color)61);
        overwritten->selection_color((Fl_Color)58);
        overwritten->labelcolor(FL_BACKGROUND2_COLOR);
        overwritten->callback((Fl_Callback*)cb_overwritten);
      } // Fl_Button* overwritten
      { current_theme = new Fl_Box(160, 255, 415, 30);
        current_theme->box(FL_FLAT_BOX);
        current_theme->color((Fl_Color)55);
      } // Fl_Box* current_theme
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_theme_xpm);
    themes_window->xclass("jsm-theme");
    themes_window->end();
  } // Fl_Double_Window* themes_window
  return themes_window;
}
