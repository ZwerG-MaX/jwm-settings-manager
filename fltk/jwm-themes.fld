# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/flThemes.h"} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include <FL/fl_ask.H>} {public global
} 

decl {\#include <FL/Fl_PNG_Image.H>} {public global
} 

decl {\#include <FL/Fl_Native_File_Chooser.H>} {public global
} 

class ThemesUI {open
} {
  Function {make_window()} {open
  } {
    Fl_Window themes_window {
      label Themes open selected
      xywh {247 403 610 345} type Double color 31 labelcolor 7 hide
      code0 {Config config;config.under_mouse(o);} xclass JSM
    } {
      Fl_Scroll {} {open
        xywh {0 0 845 660} color 31
      } {
        Fl_Button ok {
          label OK
          callback {const char* result = current_theme->label();
change_theme(result);}
          tooltip {This will copy your current theme somewhere else} xywh {505 240 65 30} box GTK_UP_BOX color 61 selection_color 58 labelcolor 7
        }
        Fl_Browser sys_theme {
          label Themes
          callback {theme_cb(o, true);}
          xywh {10 30 130 105} type Hold box GTK_DOWN_BOX selection_color 72 align 1
          code0 {flThemes theme;}
          code1 {theme.populateThemes(o);}
        }
        Fl_Box tray {
          label Panel
          xywh {280 30 305 40} box FLAT_BOX
        }
        Fl_Box button {
          label Button
          xywh {205 30 75 40} box FLAT_BOX
        }
        Fl_Box awin {
          xywh {160 100 425 40} box FLAT_BOX
        }
        Fl_Box awin2 {
          xywh {160 110 425 30} box FLAT_BOX
        }
        Fl_Box awin_text {
          label {Window (Active)}
          xywh {160 100 425 40}
        }
        Fl_Box iwin {
          xywh {160 155 425 40} box FLAT_BOX
        }
        Fl_Box iwin2 {
          xywh {160 165 425 30} box FLAT_BOX
        }
        Fl_Box iwin_text {
          label {Window (Inactive)}
          xywh {160 155 425 40}
        }
        Fl_Button save_button {
          label {Save Custom Theme}
          callback {save_theme();}
          tooltip {This will copy your current theme somewhere else} xywh {165 240 160 30} box GTK_UP_BOX color 94
        }
        Fl_Button cancel {
          label Cancel
          callback {themes_window->hide();
UI ux;
ux.showSettings();}
          tooltip {This will copy your current theme somewhere else} xywh {430 240 65 30} box GTK_UP_BOX color 80 selection_color 64 labelcolor 7
        }
        Fl_Browser usr_theme {
          label {User Themes}
          callback {theme_cb(o, false);}
          xywh {10 155 130 140} type Hold box GTK_DOWN_BOX selection_color 72 align 1
          code0 {flThemes theme;}
          code1 {theme.populateUserThemes(o);}
        }
        Fl_Box button_icon {
          xywh {160 30 45 40} box FLAT_BOX
        }
      }
      Fl_Box current_theme {
        xywh {25 305 570 30} box GTK_DOWN_BOX color 55
      }
      Fl_Box amin {
        xywh {490 105 30 30}
      }
      Fl_Box amax {
        xywh {520 105 30 30}
      }
      Fl_Box aclose {
        xywh {550 105 30 30}
      }
      Fl_Box imin {
        xywh {485 160 30 30}
      }
      Fl_Box imax {
        xywh {515 160 30 30}
      }
      Fl_Box iclose {
        xywh {545 160 30 30}
      }
    }
  }
  Function {change_theme(const char* whichTheme)} {open
  } {
    code {flThemes theme;
theme.copier(whichTheme);
theme.saveJWMRC(themes_window);
UI ux;
ux.showSettings();} {}
  }
  Function {save_theme()} {open
  } {
    code {flThemes theme;
std::string save_name = choose_directory(gettext("Save File"));
if (save_name.compare("")==0){return;}
const char* save_file = save_name.c_str();
int result = theme.saveAs(save_file);
if(result!=0){fl_alert("Problem saving: %s",save_file);}} {}
  }
  Function {choose_directory(const char* whichChoice)} {open return_type {std::string}
  } {
    code {std::string result="";
std::string label = gettext("Choose ");
label += whichChoice;
const char * message = label.c_str();
flThemes themie;
const char* directory_path = (themie.userThemeDir()).c_str();
Fl_Native_File_Chooser fnfc;
fnfc.title(message);
fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
fnfc.directory(directory_path); // default directory to use
int choice =0;
// Show native chooser
switch ( fnfc.show() ){
  case -1:
//     printf("ERROR: %s\\n", fnfc.errmsg());
     break; // ERROR
  case 1:
//    printf("CANCEL\\n");
    break; // CANCEL
  default:
    result = fnfc.filename();
    /*
    std::string message = gettext("Save as ");
    message +=result;
    const char* yes = gettext("Yes");
    const char* no = gettext("No");
    const char* q = gettext("Cancel");
    */
    choice = fl_choice("Save","No","Yes","Cancel");
    if (choice==1){
      break;
    }
    break; // FILE CHOSEN
}
return result;} {}
  }
  Function {choose_file()} {open return_type {std::string}
  } {
    code {std::string result="";
std::string label = gettext("Choose a file");
const char * message = label.c_str();
flThemes themie;
const char* directory_path = (themie.userThemeDir()).c_str();
Fl_Native_File_Chooser fnfc;
fnfc.title(message);
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.directory(directory_path); // default directory to use
// Show native chooser
switch ( fnfc.show() ){
  case -1:
//     printf("ERROR: %s\\n", fnfc.errmsg());
     break; // ERROR
  case 1:
//    printf("CANCEL\\n");
    break; // CANCEL
  default:
    result = fnfc.filename();
    break; // FILE SAVE NAME
}
return result;} {}
  }
  Function {save_system_theme()} {open
  } {
    code {std::string themeName = sys_theme->text(sys_theme->value());
change_theme(themeName.c_str());} {}
  }
  Function {theme_cb(Fl_Browser* browser,bool systemTheme)} {open
  } {
    code {int line = browser->value();
std::string text = browser->text(line);
std::string path ="";
flThemes theme;
if(systemTheme){
path = theme.sysThemeDir();
path= path + text+"/";
}
else{path = theme.userThemeDir();}
if(path.compare("")==0){return;}
path+=text;
//std::cout<<"filename: "<<path<<std::endl;
current_theme->copy_label(path.c_str());
theme.updateTheme(button,button_icon,tray,awin,awin2,awin_text,iwin,iwin2,iwin_text,amin,amax,aclose,imin,imax,iclose,path);} {}
  }
} 
