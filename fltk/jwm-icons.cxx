/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-icons.h"

void IconsUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
//icons_window->hide();
/*UI ux;
ux.showSettings();*/;
}
void IconsUI::cb_Cancel(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void IconsUI::cb_save_button_i(Fl_Button*, void*) {
  if(!switchTheme(iconsBrowser,32)){
  std::cerr<<"Error switching themes"<<std::endl;
};
}
void IconsUI::cb_save_button(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void IconsUI::cb_icon_themes_button_i(Fl_Light_Button*, void*) {
  iconsBrowser->clear();
directories_button->value(0);
directories_button->value(0);
edit_button->hide();
populateIconThemes(iconsBrowser);
}
void IconsUI::cb_icon_themes_button(Fl_Light_Button* o, void* v) {
  ((IconsUI*)(o->parent()->parent()->user_data()))->cb_icon_themes_button_i(o,v);
}

void IconsUI::cb_directories_button_i(Fl_Light_Button*, void*) {
  iconsBrowser->clear();
icon_themes_button->value(0);
icon_themes_button->value(0);
edit_button->show();
populateFLBrowser(iconsBrowser,"IconPath");
}
void IconsUI::cb_directories_button(Fl_Light_Button* o, void* v) {
  ((IconsUI*)(o->parent()->parent()->user_data()))->cb_directories_button_i(o,v);
}

void IconsUI::cb_edit_button_i(Fl_Button*, void*) {
  editor_window()->show();
if(!edit_value(iconsBrowser,dir_edit_input)){
  std::cerr<<"Line was not edited"<<std::endl;
};
}
void IconsUI::cb_edit_button(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->parent()->user_data()))->cb_edit_button_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_gear16[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,
2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,48,0,3,0,0,0,2,0,149,
0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,2,0,24,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,20,0,151,0,218,0,79,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,1,0,0,0,
69,0,193,0,96,0,2,0,0,0,0,0,0,0,0,0,0,0,22,0,156,0,251,0,255,0,221,0,75,0,22,0,
169,0,255,0,255,0,255,0,255,0,167,0,22,0,73,0,217,0,255,0,231,0,89,0,2,0,0,0,0,
0,0,0,24,0,162,0,252,0,255,0,255,0,255,0,224,0,199,0,245,0,255,0,255,0,255,0,
255,0,245,0,200,0,225,0,255,0,255,0,255,0,228,0,85,0,2,0,0,0,0,0,46,0,212,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,255,0,196,0,25,0,0,0,0,0,0,0,71,0,219,0,255,0,255,0,255,0,
255,0,255,0,246,0,209,0,172,0,172,0,209,0,246,0,255,0,255,0,255,0,255,0,255,0,
223,0,83,0,3,0,0,0,0,0,0,0,0,0,76,0,227,0,255,0,255,0,255,0,210,0,95,0,25,0,9,0,
10,0,25,0,95,0,210,0,255,0,255,0,255,0,225,0,77,0,1,0,0,0,0,0,2,0,2,0,0,0,23,0,
203,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,0,255,0,202,
0,23,0,0,0,2,0,2,0,147,0,149,0,148,0,169,0,246,0,255,0,246,0,94,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,169,0,148,0,149,0,147,0,254,0,255,
0,255,0,255,0,255,0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,
0,255,0,255,0,255,0,255,0,255,0,254,0,252,0,255,0,255,0,255,0,255,0,255,0,170,
0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,
252,0,252,0,255,0,255,0,255,0,255,0,255,0,170,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,252,0,254,0,255,0,255,0,255,0,255,
0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,0,255,0,255,0,255,
0,255,0,255,0,254,0,144,0,146,0,144,0,166,0,245,0,255,0,246,0,94,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,167,0,144,0,146,0,144,0,1,0,1,0,
0,0,36,0,220,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,
0,255,0,193,0,20,0,0,0,1,0,1,0,0,0,0,0,19,0,148,0,249,0,255,0,255,0,255,0,210,
0,95,0,25,0,9,0,10,0,25,0,95,0,210,0,255,0,255,0,255,0,187,0,26,0,0,0,0,0,0,0,
0,0,24,0,156,0,250,0,255,0,255,0,255,0,255,0,255,0,246,0,209,0,172,0,172,0,
209,0,246,0,255,0,255,0,255,0,255,0,253,0,162,0,23,0,0,0,0,0,0,0,96,0,246,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,253,0,142,0,6,0,0,0,0,0,22,0,158,0,252,0,255,0,255,0,250,
0,183,0,191,0,246,0,255,0,255,0,255,0,255,0,244,0,218,0,247,0,255,0,255,0,255,
0,229,0,90,0,2,0,0,0,0,0,0,0,23,0,163,0,253,0,251,0,156,0,22,0,20,0,169,0,255,
0,255,0,255,0,255,0,166,0,33,0,142,0,249,0,255,0,225,0,85,0,2,0,0,0,0,0,0,0,0,
0,0,0,26,0,164,0,149,0,20,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,0,0,
16,0,149,0,216,0,80,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,13,0,0,0,0,0,2,0,
149,0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,20,0,46,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_gear16(idata_gear16, 24, 24, 2, 0);

void IconsUI::cb_Cancel1_i(Fl_Button*, void*) {
  edit_window->hide();
}
void IconsUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void IconsUI::cb_OK_i(Fl_Button*, void*) {
  if(!saveChanges()){errorOUT("Failed to save the changes");}
edit_window->hide();
}
void IconsUI::cb_OK(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void IconsUI::cb_Choose_i(Fl_Button*, void*) {
  const char* original=dir_edit_input->value();
std::string tempdir="";
if(original!=NULL){tempdir=original;}
std::string result=choose_a_directory(tempdir,"");
if(result.compare("")!=0){
  if(original==NULL){addElementWithText("IconPath",result);}
  else{
    std::string tmp=original;
    changeElementText("IconPath",tmp,result);
  }
  iconsBrowser->clear();
  populateFLBrowser(iconsBrowser,"IconPath");
};
}
void IconsUI::cb_Choose(Fl_Button* o, void* v) {
  ((IconsUI*)(o->parent()->user_data()))->cb_Choose_i(o,v);
}

Fl_Double_Window* IconsUI::make_window() {
  load();
  { Fl_Double_Window* o = icons_window = new Fl_Double_Window(320, 260, gettext("Icons"));
    icons_window->color((Fl_Color)31);
    icons_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 316, 260);
      o->color((Fl_Color)31);
      { Fl_Button* o = new Fl_Button(211, 230, 57, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { save_button = new Fl_Button(271, 230, 45, 25, gettext("OK"));
        save_button->tooltip(gettext("Write to configuration file"));
        save_button->box(FL_FLAT_BOX);
        save_button->color((Fl_Color)61);
        save_button->selection_color((Fl_Color)59);
        save_button->labelcolor((Fl_Color)55);
        save_button->callback((Fl_Callback*)cb_save_button);
      } // Fl_Button* save_button
      { Fl_Browser* o = iconsBrowser = new Fl_Browser(5, 5, 310, 220);
        iconsBrowser->type(2);
        iconsBrowser->box(FL_FLAT_BOX);
        iconsBrowser->selection_color((Fl_Color)80);
        iconsBrowser->when(FL_WHEN_ENTER_KEY);
        //populateIconThemes(o);
        populateFLBrowser(o,"IconPath");
      } // Fl_Browser* iconsBrowser
      { icon_themes_button = new Fl_Light_Button(102, 230, 71, 25, gettext("Themes"));
        icon_themes_button->tooltip(gettext("Icon themes to choose from"));
        icon_themes_button->box(FL_FLAT_BOX);
        icon_themes_button->selection_color(FL_GREEN);
        icon_themes_button->callback((Fl_Callback*)cb_icon_themes_button);
      } // Fl_Light_Button* icon_themes_button
      { directories_button = new Fl_Light_Button(4, 230, 95, 25, gettext("Directories"));
        directories_button->tooltip(gettext("The icon directories JWM will search"));
        directories_button->box(FL_FLAT_BOX);
        directories_button->value(1);
        directories_button->selection_color(FL_GREEN);
        directories_button->callback((Fl_Callback*)cb_directories_button);
      } // Fl_Light_Button* directories_button
      { edit_button = new Fl_Button(177, 230, 25, 25);
        edit_button->tooltip(gettext("Write to configuration file"));
        edit_button->box(FL_FLAT_BOX);
        edit_button->color((Fl_Color)48);
        edit_button->selection_color((Fl_Color)59);
        edit_button->image(image_gear16);
        edit_button->labelcolor(FL_GRAY0);
        edit_button->callback((Fl_Callback*)cb_edit_button);
      } // Fl_Button* edit_button
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_desktop_xpm);
    icons_window->xclass("jsm-icons");
    icons_window->end();
    icons_window->resizable(icons_window);
  } // Fl_Double_Window* icons_window
  return icons_window;
}

Fl_Double_Window* IconsUI::editor_window() {
  { Fl_Double_Window* o = edit_window = new Fl_Double_Window(310, 70, gettext("Edit Directory"));
    edit_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(195, 40, 57, 25, gettext("Cancel"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(260, 40, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { dir_edit_input = new Fl_Input(5, 5, 300, 30);
      dir_edit_input->box(FL_FLAT_BOX);
    } // Fl_Input* dir_edit_input
    { Fl_Button* o = new Fl_Button(5, 40, 175, 25, gettext("Choose a new directory"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)40);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Choose);
    } // Fl_Button* o
    startup(o,jsm_desktop_xpm);
    edit_window->end();
  } // Fl_Double_Window* edit_window
  return edit_window;
}
