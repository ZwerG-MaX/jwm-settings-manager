/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-window.h"

#include <FL/Fl_Image.H>
static unsigned char idata_jsm[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,48,80,80,16,55,107,100,112,62,121,116,196,64,123,116,204,64,123,116,
204,64,123,116,204,64,123,116,204,64,124,118,204,64,124,118,204,64,124,118,204,
64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,
124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,
118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,
204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,64,124,118,204,
64,124,118,204,64,124,118,204,64,123,116,204,64,123,116,204,64,123,116,204,64,
123,116,204,62,121,116,196,55,107,100,112,48,80,80,16,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,55,107,100,112,103,177,167,251,149,225,214,255,156,233,221,255,156,
233,221,255,156,234,222,255,156,234,222,255,157,235,223,255,157,235,223,255,157,
236,223,255,158,236,224,255,158,236,224,255,158,236,224,255,158,236,224,255,159,
236,224,255,159,236,224,255,159,236,224,255,159,237,224,255,159,237,224,255,159,
237,224,255,159,237,224,255,159,237,224,255,159,237,224,255,159,236,224,255,159,
236,224,255,159,236,224,255,158,236,224,255,158,236,224,255,158,236,224,255,158,
236,224,255,157,236,223,255,157,235,223,255,157,235,223,255,156,234,222,255,156,
234,222,255,156,233,221,255,156,233,221,255,149,225,214,255,103,177,167,251,55,
107,100,112,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,61,121,114,196,136,222,209,255,
122,224,209,255,121,225,209,255,121,225,209,255,122,226,210,255,122,226,210,255,
123,227,211,255,123,227,211,255,123,228,211,255,124,228,212,255,124,228,212,255,
124,229,212,255,125,229,213,255,125,229,213,255,125,229,213,255,125,229,213,255,
125,229,213,255,125,229,213,255,125,230,213,255,125,230,213,255,125,229,213,255,
125,229,213,255,125,229,213,255,125,229,213,255,125,229,213,255,125,229,213,255,
124,229,212,255,124,228,212,255,124,228,212,255,123,228,211,255,123,227,211,255,
123,227,211,255,122,226,210,255,122,226,210,255,121,225,209,255,121,225,209,255,
122,224,209,255,136,222,209,255,61,121,114,196,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
61,121,115,204,129,225,210,255,119,223,207,255,120,224,208,255,120,225,208,255,
121,225,209,255,121,225,209,255,122,226,210,255,122,226,210,255,122,227,210,255,
123,227,211,255,123,227,211,255,123,227,211,255,123,228,211,255,124,228,212,255,
124,228,212,255,124,228,212,255,124,228,212,255,124,228,212,255,124,228,212,255,
124,228,212,255,124,228,212,255,124,228,212,255,124,228,212,255,124,228,212,255,
124,228,212,255,123,228,211,255,123,227,211,255,123,227,211,255,123,227,211,255,
122,227,210,255,122,226,210,255,122,226,210,255,121,225,209,255,121,225,209,255,
120,225,208,255,120,224,208,255,119,223,207,255,129,225,210,255,61,121,115,204,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,61,121,115,204,127,224,209,255,118,223,206,
255,119,223,207,255,119,223,207,255,120,224,208,255,120,224,208,255,121,225,209,
255,121,225,209,255,121,226,209,255,122,226,210,255,122,226,210,255,122,226,210,
255,122,227,210,255,123,227,211,255,123,227,211,255,123,227,211,255,123,227,211,
255,123,227,211,255,123,227,211,255,123,227,211,255,123,227,211,255,123,227,211,
255,123,227,211,255,123,227,211,255,123,227,211,255,122,227,210,255,122,226,210,
255,122,226,210,255,122,226,210,255,121,226,209,255,121,225,209,255,121,225,209,
255,120,224,208,255,120,224,208,255,119,223,207,255,119,223,207,255,118,223,206,
255,127,224,209,255,61,121,115,204,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,61,121,
115,204,127,223,208,255,117,222,205,255,118,222,206,255,118,223,206,255,119,223,
207,255,119,223,207,255,120,224,208,255,120,224,208,255,120,225,208,255,121,225,
209,255,121,225,209,255,121,225,209,255,121,226,209,255,121,226,209,255,122,226,
210,255,122,226,210,255,122,226,210,255,122,226,210,255,122,226,210,255,122,226,
210,255,122,226,210,255,122,226,210,255,122,226,210,255,122,226,210,255,121,226,
209,255,121,226,209,255,121,225,209,255,121,225,209,255,121,225,209,255,120,225,
208,255,120,224,208,255,120,224,208,255,119,223,207,255,119,223,207,255,118,223,
206,255,118,222,206,255,117,222,205,255,127,223,208,255,61,121,115,204,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,61,121,115,204,125,222,207,255,117,221,205,255,117,221,
205,255,117,222,205,255,118,222,206,255,118,222,206,255,119,223,207,255,119,223,
207,255,119,223,207,255,120,224,208,255,120,224,208,255,120,224,208,255,120,224,
208,255,120,225,208,255,121,225,209,255,121,225,209,255,121,225,209,255,121,225,
209,255,121,225,209,255,121,225,209,255,121,225,209,255,121,225,209,255,121,225,
209,255,121,225,209,255,120,225,208,255,120,224,208,255,120,224,208,255,120,224,
208,255,120,224,208,255,119,223,207,255,119,223,207,255,119,223,207,255,118,222,
206,255,118,222,206,255,117,222,205,255,117,221,205,255,117,221,205,255,125,222,
207,255,61,121,115,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,61,121,115,204,124,221,
207,255,116,220,204,255,116,220,204,255,117,221,205,255,117,221,205,255,116,220,
204,255,116,218,202,255,115,216,201,255,115,216,200,255,115,217,200,255,116,217,
201,255,116,217,201,255,116,217,201,255,116,217,201,255,116,218,201,255,117,218,
202,255,117,218,202,255,117,218,202,255,117,218,202,255,117,218,202,255,117,218,
202,255,117,218,202,255,117,218,202,255,117,220,203,255,118,222,206,255,119,223,
207,255,119,223,207,255,119,223,207,255,118,223,206,255,118,222,206,255,118,222,
206,255,118,222,206,255,117,221,205,255,117,221,205,255,117,221,205,255,116,220,
204,255,116,220,204,255,124,221,207,255,61,121,115,204,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,61,120,114,204,123,220,206,255,115,219,203,255,115,219,203,255,116,
220,204,255,115,219,203,255,112,213,197,255,110,208,193,255,108,203,188,255,107,
202,187,255,107,203,187,255,108,203,188,255,108,203,188,255,108,203,188,255,108,
203,188,255,108,203,188,255,108,204,188,255,109,204,189,255,109,204,189,255,109,
204,189,255,109,204,189,255,109,204,189,255,109,204,189,255,109,205,189,255,111,
209,194,255,114,215,199,255,117,221,205,255,118,222,206,255,118,222,206,255,117,
222,205,255,117,221,205,255,117,221,205,255,117,221,205,255,116,220,204,255,116,
220,204,255,116,220,204,255,115,219,203,255,115,219,203,255,123,220,206,255,61,
120,114,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,61,120,114,204,122,219,205,255,
114,218,202,255,114,218,202,255,115,219,203,255,113,215,200,255,108,206,191,255,
102,194,179,255,95,180,167,255,94,177,164,255,94,177,164,255,94,178,165,255,94,
178,165,255,94,178,165,255,94,178,165,255,94,178,165,255,94,178,165,255,94,179,
165,255,95,179,166,255,95,179,166,255,95,179,166,255,95,179,166,255,94,179,165,
255,96,181,168,255,103,195,180,255,110,208,193,255,115,217,201,255,117,221,205,
255,117,221,205,255,116,220,204,255,116,220,204,255,116,220,204,255,116,220,204,
255,115,219,203,255,115,219,203,255,115,219,203,255,114,218,202,255,114,218,202,
255,122,219,205,255,61,120,114,204,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,60,120,
114,204,122,219,205,255,113,217,201,255,113,217,201,255,114,218,202,255,111,212,
197,255,105,201,185,255,94,180,166,255,204,227,224,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,204,228,224,255,95,180,167,255,107,202,
187,255,113,214,199,255,116,220,204,255,116,220,204,255,115,219,203,255,115,219,
203,255,115,219,203,255,115,219,203,255,114,218,202,255,114,218,202,255,114,218,
202,255,113,217,201,255,113,217,201,255,122,219,205,255,60,120,114,204,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,60,120,114,204,121,219,204,255,112,216,200,255,112,216,
201,255,113,217,201,255,110,211,195,255,104,199,184,255,92,176,162,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,93,176,163,255,105,200,185,255,112,213,197,255,115,219,203,255,115,219,
203,255,114,218,202,255,114,218,202,255,114,218,202,255,114,218,202,255,113,217,
201,255,113,217,201,255,113,217,201,255,112,216,201,255,112,216,200,255,121,219,
204,255,60,120,114,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,60,120,114,204,120,218,
203,255,111,215,199,255,111,216,200,255,112,216,200,255,109,210,195,255,103,198,
184,255,92,176,162,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,92,176,162,255,104,200,184,255,111,212,
196,255,114,218,202,255,113,218,202,255,113,217,201,255,113,217,201,255,113,217,
201,255,113,217,201,255,112,216,201,255,112,216,200,255,112,216,200,255,111,216,
200,255,111,215,199,255,120,218,203,255,60,120,114,204,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,60,120,114,204,119,217,202,255,110,215,199,255,111,215,199,255,111,
215,199,255,108,209,194,255,102,198,184,255,91,175,162,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,92,
176,162,255,104,199,184,255,110,211,195,255,113,217,201,255,113,217,201,255,112,
216,201,255,112,216,200,255,112,216,200,255,112,216,200,255,111,216,200,255,111,
215,199,255,111,215,199,255,111,215,199,255,110,215,199,255,119,217,202,255,60,
120,114,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,60,120,114,204,118,216,201,255,
109,214,198,255,110,214,198,255,110,214,198,255,107,209,194,255,101,197,183,255,
90,174,161,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,91,175,162,255,103,198,184,255,109,210,195,255,
112,216,200,255,112,216,200,255,111,216,200,255,111,215,200,255,111,215,199,255,
111,215,199,255,110,215,199,255,110,215,199,255,110,214,198,255,110,214,198,255,
109,214,198,255,118,216,201,255,60,120,114,204,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
59,119,113,204,117,216,201,255,108,213,197,255,109,213,197,255,109,213,197,255,
106,208,193,255,101,196,182,255,89,173,161,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,87,169,157,255,
99,191,178,255,105,203,189,255,108,209,194,255,108,209,194,255,107,209,194,255,
107,209,194,255,107,208,193,255,108,210,195,255,109,213,197,255,109,214,198,255,
109,213,197,255,109,213,197,255,108,213,197,255,117,216,201,255,59,119,113,204,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,59,119,113,204,116,215,200,255,108,212,196,
255,108,212,196,255,108,213,197,255,105,207,192,255,100,195,181,255,88,172,160,
255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,
255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,
255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,
255,247,247,247,255,81,159,147,255,92,180,167,255,98,191,177,255,101,196,182,
255,101,196,182,255,100,196,182,255,100,196,182,255,100,196,183,255,103,200,186,
255,105,206,191,255,107,212,196,255,108,213,197,255,108,212,196,255,108,212,196,
255,116,215,200,255,59,119,113,204,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,59,119,
113,204,115,214,199,255,107,211,195,255,107,211,196,255,107,212,196,255,104,206,
191,255,99,194,180,255,87,171,159,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,71,139,131,255,81,157,
148,255,86,167,156,255,88,172,160,255,88,172,160,255,88,172,160,255,87,172,160,
255,89,175,162,255,95,187,173,255,102,199,185,255,105,208,193,255,107,212,196,
255,107,211,196,255,107,211,195,255,115,214,199,255,59,119,113,204,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,59,119,113,204,114,213,198,255,106,210,194,255,106,211,
195,255,106,211,195,255,103,205,190,255,98,193,179,255,86,171,159,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,199,199,199,255,226,226,226,255,240,240,240,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,202,226,222,255,88,174,162,255,98,194,
180,255,103,205,190,255,106,211,195,255,106,211,195,255,106,210,194,255,114,213,
198,255,59,119,113,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,59,119,113,204,113,212,
197,255,105,209,194,255,105,210,194,255,105,210,194,255,102,204,189,255,97,192,
179,255,86,170,158,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,247,247,247,255,199,199,199,255,226,226,226,255,240,240,
240,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,86,170,158,255,97,192,179,255,102,204,189,255,105,210,194,255,105,210,
194,255,105,209,194,255,113,212,197,255,59,119,113,204,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,59,118,111,204,112,211,196,255,104,209,193,255,104,209,193,255,104,
209,193,255,102,203,189,255,96,192,178,255,85,169,157,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,199,
199,199,255,226,226,226,255,240,240,240,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,85,169,157,255,96,192,178,255,102,
203,189,255,104,209,193,255,104,209,193,255,104,209,193,255,112,211,196,255,59,
118,111,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,58,118,111,204,112,210,196,255,
103,208,192,255,103,208,192,255,103,208,192,255,101,202,188,255,96,192,178,255,
85,171,159,255,202,225,222,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,234,234,234,255,203,203,203,255,227,227,227,255,240,240,240,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
84,169,156,255,95,191,177,255,101,202,188,255,103,208,192,255,103,208,192,255,
103,208,192,255,112,210,196,255,58,118,111,204,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
58,118,111,204,111,210,195,255,102,207,191,255,102,207,191,255,102,207,192,255,
101,204,189,255,97,195,181,255,91,183,170,255,84,171,158,255,83,168,155,255,84,
168,156,255,84,169,156,255,84,169,156,255,81,163,152,255,77,154,143,255,68,136,
126,255,199,199,199,255,199,199,199,255,199,199,199,255,199,199,199,255,199,199,
199,255,199,199,199,255,199,199,199,255,203,203,203,255,218,218,218,255,232,232,
232,255,243,243,243,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,
247,255,247,247,247,255,83,168,155,255,94,190,176,255,100,202,187,255,102,207,
192,255,102,207,191,255,102,207,191,255,111,210,195,255,58,118,111,204,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,58,118,111,204,110,209,194,255,101,206,190,255,101,206,
190,255,101,206,191,255,101,206,190,255,98,200,185,255,96,195,180,255,94,190,
176,255,93,189,176,255,94,190,176,255,94,190,176,255,94,190,176,255,91,184,171,
255,86,174,161,255,76,153,142,255,226,226,226,255,226,226,226,255,226,226,226,
255,226,226,226,255,226,226,226,255,226,226,226,255,226,226,226,255,227,227,227,
255,232,232,232,255,239,239,239,255,246,246,246,255,247,247,247,255,247,247,247,
255,247,247,247,255,247,247,247,255,247,247,247,255,82,167,154,255,93,189,175,
255,99,201,186,255,101,206,191,255,101,206,190,255,101,206,190,255,110,209,194,
255,58,118,111,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,58,118,111,204,109,208,193,
255,100,205,189,255,100,205,190,255,101,206,190,255,101,206,190,255,100,205,189,
255,99,202,187,255,98,201,186,255,99,201,186,255,99,201,186,255,99,201,186,255,
99,201,186,255,96,195,181,255,90,184,170,255,80,162,150,255,240,240,240,255,
240,240,240,255,240,240,240,255,240,240,240,255,240,240,240,255,240,240,240,255,
240,240,240,255,240,240,240,255,243,243,243,255,246,246,246,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
81,166,154,255,92,188,174,255,98,200,185,255,101,206,190,255,100,205,190,255,
100,205,189,255,109,208,193,255,58,118,111,204,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
58,118,111,204,108,207,192,255,99,204,189,255,99,204,189,255,100,205,189,255,
100,205,189,255,100,205,189,255,100,205,190,255,100,205,190,255,101,206,190,255,
101,206,190,255,101,206,190,255,101,206,190,255,98,200,185,255,92,188,174,255,
81,166,154,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,80,165,154,255,91,187,173,255,97,199,184,255,
100,205,189,255,99,204,189,255,99,204,189,255,108,207,192,255,58,118,111,204,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,56,118,111,204,106,206,192,255,98,203,188,255,
98,204,188,255,99,204,188,255,99,204,188,255,99,204,189,255,99,204,189,255,99,
205,189,255,100,205,189,255,100,205,189,255,100,205,189,255,100,205,189,255,97,
199,184,255,91,187,174,255,80,165,154,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,
247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,79,164,153,255,90,
186,173,255,96,198,183,255,99,204,188,255,98,204,188,255,98,203,188,255,106,206,
192,255,56,118,111,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,56,116,110,204,105,205,
191,255,97,202,187,255,97,203,187,255,98,203,187,255,98,203,187,255,98,203,188,
255,98,204,188,255,98,204,188,255,99,204,188,255,99,204,188,255,99,204,188,255,
99,204,188,255,96,198,184,255,90,186,173,255,79,164,153,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
79,164,152,255,89,185,172,255,95,197,182,255,98,203,187,255,97,203,187,255,97,
202,187,255,105,205,191,255,56,116,110,204,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,56,
116,110,204,104,204,190,255,96,202,186,255,96,202,186,255,97,202,186,255,97,202,
187,255,97,202,187,255,97,203,187,255,97,203,187,255,98,203,187,255,98,203,187,
255,98,203,187,255,98,203,188,255,95,197,183,255,89,185,172,255,79,164,152,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,78,163,151,255,88,184,171,255,94,196,182,255,97,202,186,255,96,
202,186,255,96,202,186,255,104,204,190,255,56,116,110,204,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,56,116,110,204,103,203,189,255,95,201,185,255,96,201,185,255,96,201,
185,255,96,201,186,255,96,202,186,255,96,202,186,255,96,202,186,255,97,202,186,
255,97,202,186,255,97,202,187,255,97,202,187,255,94,197,182,255,89,185,172,255,
79,166,153,255,200,224,220,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,247,247,247,255,
247,247,247,255,200,223,220,255,79,165,153,255,88,185,171,255,93,196,181,255,96,
201,185,255,96,201,185,255,95,201,185,255,103,203,189,255,56,116,110,204,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,56,116,110,204,102,203,188,255,94,200,184,255,95,
200,184,255,95,200,185,255,95,200,185,255,95,201,185,255,95,201,185,255,95,201,
185,255,96,201,185,255,96,201,186,255,96,201,186,255,96,201,186,255,94,199,183,
255,90,190,175,255,85,177,164,255,79,165,153,255,78,162,150,255,78,162,150,255,
78,162,150,255,78,162,150,255,78,162,150,255,78,162,150,255,78,162,150,255,78,
162,150,255,78,162,150,255,78,162,150,255,78,162,150,255,78,162,150,255,78,162,
150,255,78,162,149,255,78,165,152,255,84,177,163,255,89,189,174,255,93,197,182,
255,95,200,185,255,95,200,184,255,94,200,184,255,102,203,188,255,56,116,110,204,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,56,116,110,204,101,202,187,255,93,199,183,255,
94,199,184,255,94,199,184,255,94,200,184,255,94,200,184,255,94,200,184,255,95,
200,184,255,95,200,185,255,95,200,185,255,95,200,185,255,95,200,185,255,94,200,
184,255,92,194,179,255,89,189,174,255,87,184,170,255,87,184,169,255,87,184,169,
255,87,184,169,255,87,184,169,255,87,184,169,255,87,184,169,255,87,184,169,255,
87,184,169,255,87,184,169,255,87,184,169,255,87,184,169,255,87,184,169,255,87,
184,169,255,87,184,169,255,87,184,169,255,88,189,173,255,91,194,178,255,93,199,
183,255,94,199,184,255,94,199,184,255,93,199,183,255,101,202,187,255,56,116,110,
204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,55,115,109,204,100,201,186,255,92,198,183,
255,93,198,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,
94,199,184,255,94,199,184,255,94,199,184,255,94,199,184,255,94,200,184,255,94,
200,184,255,93,199,183,255,92,197,181,255,92,195,179,255,91,195,179,255,91,195,
179,255,91,195,179,255,91,195,179,255,91,195,179,255,91,195,179,255,91,195,179,
255,91,195,179,255,91,195,179,255,91,195,179,255,91,195,179,255,91,194,179,255,
91,194,179,255,91,194,179,255,92,194,179,255,91,196,180,255,92,198,182,255,93,
199,183,255,93,199,183,255,93,198,183,255,92,198,183,255,100,201,186,255,55,115,
109,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,55,115,109,204,99,200,186,255,92,197,
182,255,92,197,182,255,92,198,182,255,92,198,182,255,92,198,182,255,92,198,183,
255,93,198,183,255,93,198,183,255,93,199,183,255,93,199,183,255,93,199,183,255,
93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,
199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,
183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,255,93,199,183,
255,93,199,183,255,93,198,183,255,93,198,183,255,92,198,183,255,92,198,182,255,
92,198,182,255,92,198,182,255,92,197,182,255,92,197,182,255,99,200,186,255,55,
115,109,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,55,115,109,204,98,199,185,255,91,
196,181,255,91,197,181,255,91,197,181,255,91,197,181,255,91,197,182,255,91,197,
182,255,92,197,182,255,92,197,182,255,92,198,182,255,92,198,182,255,92,198,182,
255,92,198,182,255,92,198,182,255,92,198,182,255,92,198,182,255,92,198,183,255,
92,198,183,255,92,198,183,255,92,198,183,255,92,198,183,255,92,198,183,255,92,
198,182,255,92,198,182,255,92,198,182,255,92,198,182,255,92,198,182,255,92,198,
182,255,92,198,182,255,92,197,182,255,92,197,182,255,91,197,182,255,91,197,182,
255,91,197,181,255,91,197,181,255,91,197,181,255,91,196,181,255,98,199,185,255,
55,115,109,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,55,115,109,204,97,198,184,255,
90,196,180,255,90,196,180,255,90,196,180,255,90,196,181,255,90,196,181,255,91,
196,181,255,91,196,181,255,91,197,181,255,91,197,181,255,91,197,181,255,91,197,
181,255,91,197,181,255,91,197,181,255,91,197,182,255,91,197,182,255,91,197,182,
255,91,197,182,255,91,197,182,255,91,197,182,255,91,197,182,255,91,197,182,255,
91,197,182,255,91,197,182,255,91,197,181,255,91,197,181,255,91,197,181,255,91,
197,181,255,91,197,181,255,91,197,181,255,91,196,181,255,91,196,181,255,90,196,
181,255,90,196,181,255,90,196,180,255,90,196,180,255,90,196,180,255,97,198,184,
255,55,115,109,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,54,115,109,204,96,197,183,
255,89,195,179,255,89,195,179,255,89,195,179,255,89,195,180,255,89,195,180,255,
89,195,180,255,90,196,180,255,90,196,180,255,90,196,180,255,90,196,180,255,90,
196,180,255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,
181,255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,181,
255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,181,255,90,196,180,255,
90,196,180,255,90,196,180,255,90,196,180,255,90,196,180,255,89,195,180,255,89,
195,180,255,89,195,180,255,89,195,179,255,89,195,179,255,89,195,179,255,96,197,
183,255,54,115,109,204,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,64,64,64,4,53,111,105,202,94,193,178,
255,89,194,178,255,88,194,178,255,88,194,179,255,88,194,179,255,88,194,179,255,
88,194,179,255,89,195,179,255,89,195,179,255,89,195,179,255,89,195,179,255,89,
195,180,255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,
180,255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,180,
255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,180,255,89,195,180,255,
89,195,179,255,89,195,179,255,89,195,179,255,89,195,179,255,88,194,179,255,88,
194,179,255,88,194,179,255,88,194,179,255,88,194,178,255,89,194,178,255,94,193,
178,255,53,111,105,202,64,64,64,4,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,18,18,18,14,26,26,26,50,42,79,77,159,75,156,145,252,100,
194,179,255,104,199,186,255,104,199,186,255,104,199,186,255,104,199,186,255,105,
200,186,255,105,200,186,255,105,200,186,255,105,200,186,255,105,200,187,255,105,
200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,
200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,
200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,200,187,255,105,
200,187,255,105,200,187,255,105,200,186,255,105,200,186,255,105,200,186,255,105,
200,186,255,104,199,186,255,104,199,186,255,104,199,186,255,104,199,186,255,100,
194,179,255,75,156,145,252,42,79,77,159,26,26,26,50,18,18,18,14,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,18,18,18,14,26,26,26,50,27,35,35,94,
40,75,71,173,50,103,97,223,51,106,100,227,51,106,100,227,51,106,100,227,51,106,
100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,
227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,
51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,
106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,
100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,
227,51,106,100,227,51,106,100,227,51,106,100,227,51,106,100,227,50,103,97,223,
40,75,71,173,27,35,35,94,26,26,26,50,18,18,18,14,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,64,64,64,4,20,20,20,25,28,28,28,37,26,
26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,
39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,
26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,
39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,
26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,
39,26,26,26,39,26,26,26,39,26,26,26,39,28,28,28,37,20,20,20,25,64,64,64,4,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0};
static Fl_RGB_Image image_jsm(idata_jsm, 48, 48, 4, 0);

void WindowUI::cb_Cancel_i(Fl_Button*, void*) {
  flWindow w;w.cancel();
window_window->hide();
UI ux;
ux.showSettings();
}
void WindowUI::cb_Cancel(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void WindowUI::cb_OK_i(Fl_Button*, void*) {
  flWindow w;
w.loadTemp();
w.saveChanges();
window_window->hide();
UI ux;
ux.showSettings();
}
void WindowUI::cb_OK(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void WindowUI::cb_a_title_color1_i(Fl_Button*, void*) {
  w_one_color(a_title_color1, a_title_color2, "Active");
get_button(max_a_image,"ButtonMaxActive");
get_button(max_image,"ButtonMax");
get_button(min_image,"ButtonMin");
get_button(close_image,"ButtonClose");
}
void WindowUI::cb_a_title_color1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color1_i(o,v);
}

void WindowUI::cb_a_title_color2_i(Fl_Button*, void*) {
  w_two_color(a_title_color1, a_title_color2, "Active");
}
void WindowUI::cb_a_title_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color2_i(o,v);
}

void WindowUI::cb_active_o_slider_i(Fl_Slider* o, void*) {
  flWindow w;w.loadTemp();
const char* Active="Active";
float opacity=o->value();
active_o_slider_v->value(opacity*100);
w.windowOpacity(opacity,Active);
w.saveChangesTemp();
}
void WindowUI::cb_active_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_i(o,v);
}

void WindowUI::cb_active_o_slider_v_i(Fl_Value_Input* o, void*) {
  flWindow w; w.loadTemp();
float y_cb = o->value();
active_o_slider->value(y_cb);
w.windowOpacity(y_cb,"Active");
w.saveChangesTemp();
}
void WindowUI::cb_active_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_v_i(o,v);
}

void WindowUI::cb_a_font_color_i(Fl_Button*, void*) {
  f_color(a_font_color, "Active");
get_button(max_a_image,"ButtonMaxActive");
get_button(max_image,"ButtonMax");
get_button(min_image,"ButtonMin");
get_button(close_image,"ButtonClose");
}
void WindowUI::cb_a_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_font_color_i(o,v);
}

void WindowUI::cb_a_border_color_i(Fl_Button*, void*) {
  b_color(a_border_color, "Active");
}
void WindowUI::cb_a_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_border_color_i(o,v);
}

void WindowUI::cb_inactive_color_i(Fl_Button*, void*) {
  w_one_color(inactive_color, inactive_color2, "Inactive");
get_button_inactive(i_max_a_image,"ButtonMaxActive");
get_button_inactive(i_max_image,"ButtonMax");
get_button_inactive(i_min_image,"ButtonMin");
get_button_inactive(i_close_image,"ButtonClose");
}
void WindowUI::cb_inactive_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color_i(o,v);
}

void WindowUI::cb_inactive_color2_i(Fl_Button*, void*) {
  w_two_color(inactive_color, inactive_color2, "Inactive");
}
void WindowUI::cb_inactive_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color2_i(o,v);
}

void WindowUI::cb_inactive_font_color_i(Fl_Button*, void*) {
  f_color(inactive_font_color, "Inactive");
get_button_inactive(i_max_a_image,"ButtonMaxActive");
get_button_inactive(i_max_image,"ButtonMax");
get_button_inactive(i_min_image,"ButtonMin");
get_button_inactive(i_close_image,"ButtonClose");
}
void WindowUI::cb_inactive_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_font_color_i(o,v);
}

void WindowUI::cb_inactive_border_color_i(Fl_Button*, void*) {
  b_color(inactive_border_color, "Inactive");
}
void WindowUI::cb_inactive_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_border_color_i(o,v);
}

void WindowUI::cb_inactive_o_slider_i(Fl_Slider* o, void*) {
  flWindow w;w.loadTemp();
const char* Inactive="Inactive";
float opacity=o->value();
inactive_o_slider_v->value(opacity*100);
w.windowOpacity(opacity,Inactive);
w.saveChangesTemp();
}
void WindowUI::cb_inactive_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_i(o,v);
}

void WindowUI::cb_inactive_o_slider_v_i(Fl_Value_Input* o, void*) {
  flWindow w; w.loadTemp();
float y_cb = o->value();
inactive_o_slider->value(y_cb);
w.windowOpacity(y_cb,"Inactive");
w.saveChangesTemp();
}
void WindowUI::cb_inactive_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_v_i(o,v);
}

void WindowUI::cb_Close_i(Fl_Button* o, void*) {
  flWindow w;w.loadTemp();
std::string label = "Choose ";
label += o->label();
std::string tempPath = w.buttonPath();
const char *path = tempPath.c_str();
const char * f = path;
const char * m=label.c_str();
const char * p="*.{xbm,XBM,png,PNG,svg,SVG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	w.setButton(result,"ButtonClose");
	//display(result,o);
};
}
void WindowUI::cb_Close(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Close_i(o,v);
}

void WindowUI::cb_Maximize_i(Fl_Button* o, void*) {
  flWindow w;w.loadTemp();
std::string label = "Choose ";
label += o->label();
std::string tempPath = w.buttonPath();
const char *path = tempPath.c_str();
const char * f = path;
const char * m=label.c_str();
const char * p="*.{xbm,XBM,png,PNG,svg,SVG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	w.setButton(result,"ButtonMax");
	//display(result,o);
};
}
void WindowUI::cb_Maximize(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Maximize_i(o,v);
}

void WindowUI::cb_Maximize1_i(Fl_Button* o, void*) {
  flWindow w;w.loadTemp();
std::string label = "Choose ";
label += o->label();
std::string tempPath = w.buttonPath();
const char *path = tempPath.c_str();
const char * f = path;
const char * m=label.c_str();
const char * p="*.{xbm,XBM,png,PNG,svg,SVG}";
int r = 0;
const char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	w.setButton(result,"ButtonMaxActive");
}
get_button(max_a_image, "ButtonMaxActive");
}
void WindowUI::cb_Maximize1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Maximize1_i(o,v);
}

void WindowUI::cb_Minimize_i(Fl_Button* o, void*) {
  flWindow w;w.loadTemp();
std::string label = "Choose ";
label += o->label();
std::string tempPath = w.buttonPath();
const char *path = tempPath.c_str();
const char * f = path;
const char * m=label.c_str();
const char * p="*.{xbm,XBM,png,PNG,svg,SVG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	w.setButton(result,"ButtonMin");
	//display(result,o);
};
}
void WindowUI::cb_Minimize(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Minimize_i(o,v);
}

void WindowUI::cb_max_a_image_i(Fl_Box*, void*) {
  get_button(max_a_image,"ButtonMaxActive");
}
void WindowUI::cb_max_a_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_a_image_i(o,v);
}

void WindowUI::cb_close_image_i(Fl_Box* o, void*) {
  get_button(o,"ButtonClose");
}
void WindowUI::cb_close_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_close_image_i(o,v);
}

void WindowUI::cb_max_image_i(Fl_Box* o, void*) {
  get_button(o,"ButtonMax");
}
void WindowUI::cb_max_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_image_i(o,v);
}

void WindowUI::cb_min_image_i(Fl_Box* o, void*) {
  get_button(o,"ButtonMin");
}
void WindowUI::cb_min_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_min_image_i(o,v);
}

void WindowUI::cb_i_max_a_image_i(Fl_Box* o, void*) {
  get_button_inactive(o,"ButtonMaxActive");
}
void WindowUI::cb_i_max_a_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_i_max_a_image_i(o,v);
}

void WindowUI::cb_i_close_image_i(Fl_Box* o, void*) {
  get_button_inactive(o,"ButtonClose");
}
void WindowUI::cb_i_close_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_i_close_image_i(o,v);
}

void WindowUI::cb_i_max_image_i(Fl_Box* o, void*) {
  get_button_inactive(o,"ButtonMax");
}
void WindowUI::cb_i_max_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_i_max_image_i(o,v);
}

void WindowUI::cb_i_min_image_i(Fl_Box* o, void*) {
  get_button_inactive(o,"ButtonMin");
}
void WindowUI::cb_i_min_image(Fl_Box* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_i_min_image_i(o,v);
}

void WindowUI::cb_b_slider_i(Fl_Slider* o, void*) {
  flWindow w; w.loadTemp();
int x_cb = o->value();
b_slider_v->value(x_cb);
w.setBorderWidth(x_cb);
}
void WindowUI::cb_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_i(o,v);
}

void WindowUI::cb_t_slider_i(Fl_Slider* o, void*) {
  flWindow w; w.loadTemp();
int y_cb = o->value();
t_slider_v->value(y_cb);
w.setBorderHeight(y_cb);
w.saveChangesTemp();
}
void WindowUI::cb_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_i(o,v);
}

void WindowUI::cb_Make_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="opaque";
f.setResize(mode);
}
void WindowUI::cb_Make(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make_i(o,v);
}

void WindowUI::cb_Show_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="outline";
f.setResize(mode);
}
void WindowUI::cb_Show(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

unsigned char WindowUI::menu_resize_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_resize_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Make1_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="opaque";
f.setMoveMode(mode);
}
void WindowUI::cb_Make1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make1_i(o,v);
}

void WindowUI::cb_Show1_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="outline";
f.setMoveMode(mode);
}
void WindowUI::cb_Show1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show1_i(o,v);
}

unsigned char WindowUI::menu_move_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_move_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_By_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="click";
f.setFocusModel(mode);
}
void WindowUI::cb_By(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_By_i(o,v);
}

void WindowUI::cb_By1_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
const char *mode ="sloppy";
f.setFocusModel(mode);
}
void WindowUI::cb_By1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_By1_i(o,v);
}

unsigned char WindowUI::menu_focus_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_focus_menu[] = {
 {"By Clicking on it", 0,  (Fl_Callback*)WindowUI::cb_By, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"By moving the mouse over it", 0,  (Fl_Callback*)WindowUI::cb_By1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_t_slider_v_i(Fl_Value_Input* o, void*) {
  flWindow w; w.loadTemp();
int y_cb = o->value();
t_slider->value(y_cb);
w.setBorderHeight(y_cb);
}
void WindowUI::cb_t_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_v_i(o,v);
}

void WindowUI::cb_b_slider_v_i(Fl_Value_Input* o, void*) {
  flWindow w; w.loadTemp();
int x_cb = o->value();
b_slider->value(x_cb);
w.setBorderHeight(x_cb);
}
void WindowUI::cb_b_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_v_i(o,v);
}

void WindowUI::cb_The_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
int i = snap_int->value();
const char *mode ="screen";
f.setSnap(mode,i);
}
void WindowUI::cb_The(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The_i(o,v);
}

void WindowUI::cb_The1_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
int i = snap_int->value();
const char *mode ="border";
f.setSnap(mode,i);
}
void WindowUI::cb_The1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The1_i(o,v);
}

void WindowUI::cb_No_i(Fl_Menu_*, void*) {
  flWindow f;f.loadTemp();
int i = 0;
const char *mode ="none";
f.setSnap(mode,i);
}
void WindowUI::cb_No(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_No_i(o,v);
}

unsigned char WindowUI::menu_snap_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_snap_menu[] = {
 {"The Screen\'s Edges", 0,  (Fl_Callback*)WindowUI::cb_The, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"The Border of other Windows", 0,  (Fl_Callback*)WindowUI::cb_The1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"No snapping", 0,  (Fl_Callback*)WindowUI::cb_No, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_snap_int_i(Fl_Value_Input* o, void*) {
  flWindow w; w.loadTemp();
int d = o->value();
w.setSnap(d);
}
void WindowUI::cb_snap_int(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_snap_int_i(o,v);
}

void WindowUI::cb_a_b_slider_i(Fl_Slider* o, void*) {
  flWindow w; w.loadTemp();
int x_cb = o->value();
a_b_slider_v->value(x_cb);
w.setBorderWidth(x_cb);
}
void WindowUI::cb_a_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_b_slider_i(o,v);
}

void WindowUI::cb_a_t_slider_i(Fl_Slider* o, void*) {
  flWindow w; w.loadTemp();
int y_cb = o->value();
a_t_slider_v->value(y_cb);
w.setBorderHeight(y_cb);
}
void WindowUI::cb_a_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_t_slider_i(o,v);
}

void WindowUI::cb_Main_i(Fl_Button*, void*) {
  flWindow w;w.cancel();
window_window->hide();
UI ux;
ux.showSettings();
}
void WindowUI::cb_Main(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Main_i(o,v);
}

Fl_Double_Window* WindowUI::make_window() {
  { window_window = new Fl_Double_Window(670, 455, gettext("Window Settings"));
    window_window->color((Fl_Color)31);
    window_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 670, 455);
      o->color((Fl_Color)31);
      { Fl_Box* o = new Fl_Box(245, 10, 275, 70, gettext("Window Settings  "));
        o->image(image_jsm);
        o->labelfont(1);
        o->labelsize(18);
        o->labelcolor((Fl_Color)35);
        o->align(Fl_Align(288));
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(510, 415, 55, 25, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(595, 415, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_GTK_UP_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      { Fl_Tabs* o = new Fl_Tabs(0, 80, 670, 330);
        o->box(FL_PLASTIC_THIN_UP_BOX);
        { Fl_Group* o = new Fl_Group(10, 100, 660, 305, gettext("Appearance"));
          { Fl_Box* o = new Fl_Box(10, 110, 330, 175);
            o->box(FL_GTK_DOWN_BOX);
            o->color((Fl_Color)51);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(100, 115, 160, 25, gettext("Active Window"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
            o->align(Fl_Align(384));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(20, 155, 145, 25, gettext("Titlebar Background"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_title_color1 = new Fl_Button(180, 155, 60, 25);
            a_title_color1->box(FL_GTK_UP_BOX);
            a_title_color1->callback((Fl_Callback*)cb_a_title_color1);
            flWindow w; w.loadTemp();unsigned int color;
            unsigned int c = w.getWindowColor(color,"Active");
            o->color(c);
          } // Fl_Button* a_title_color1
          { Fl_Button* o = a_title_color2 = new Fl_Button(245, 155, 60, 25);
            a_title_color2->box(FL_GTK_UP_BOX);
            a_title_color2->callback((Fl_Callback*)cb_a_title_color2);
            flWindow w; w.loadTemp();unsigned int color;
            unsigned int c = w.getWindowColor(color,"Active");
            o->color(color);
          } // Fl_Button* a_title_color2
          { Fl_Box* o = new Fl_Box(15, 185, 160, 25, gettext("Font and Button Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(15, 215, 155, 25, gettext("Window Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Slider* o = active_o_slider = new Fl_Slider(180, 245, 90, 25, gettext("Opacity of Title Bar"));
            active_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            active_o_slider->type(1);
            active_o_slider->box(FL_GTK_DOWN_BOX);
            active_o_slider->color((Fl_Color)41);
            active_o_slider->selection_color((Fl_Color)29);
            active_o_slider->step(0.01);
            active_o_slider->value(1);
            active_o_slider->callback((Fl_Callback*)cb_active_o_slider);
            active_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            active_o_slider->when(FL_WHEN_RELEASE);
            flWindow w;w.loadTemp();const char* Active="Active";
            float h = w.getOpacity(Active);
            o->value(h);
          } // Fl_Slider* active_o_slider
          { Fl_Value_Input* o = active_o_slider_v = new Fl_Value_Input(280, 245, 35, 25, gettext("%"));
            active_o_slider_v->box(FL_GTK_DOWN_BOX);
            active_o_slider_v->selection_color((Fl_Color)80);
            active_o_slider_v->labelsize(10);
            active_o_slider_v->callback((Fl_Callback*)cb_active_o_slider_v);
            active_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            active_o_slider_v->when(3);
            float v = active_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* active_o_slider_v
          { Fl_Box* o = new Fl_Box(350, 110, 315, 175);
            o->box(FL_GTK_DOWN_BOX);
            o->color(FL_DARK2);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(385, 115, 220, 25, gettext("Background  Window"));
            o->labelfont(1);
            o->labelcolor(FL_GRAY0);
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(360, 160, 140, 25, gettext("Titlebar Background"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(355, 187, 160, 25, gettext("Font and Button Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(355, 215, 155, 25, gettext("Window Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_font_color = new Fl_Button(180, 185, 60, 25);
            a_font_color->box(FL_GTK_UP_BOX);
            a_font_color->callback((Fl_Callback*)cb_a_font_color);
            a_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();
            unsigned int c = w.getFontColor("Active");
            o->color(c);
          } // Fl_Button* a_font_color
          { Fl_Button* o = a_border_color = new Fl_Button(180, 215, 60, 25);
            a_border_color->box(FL_GTK_UP_BOX);
            a_border_color->callback((Fl_Callback*)cb_a_border_color);
            a_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();
            unsigned int c = w.getBorderColor("Active");
            o->color(c);
          } // Fl_Button* a_border_color
          { inactive_color = new Fl_Button(515, 155, 60, 25);
            inactive_color->box(FL_GTK_UP_BOX);
            inactive_color->callback((Fl_Callback*)cb_inactive_color);
            inactive_color->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();unsigned int color;
            unsigned int c = w.getWindowColor(color,"Inactive");
            inactive_color->color(c);
          } // Fl_Button* inactive_color
          { inactive_color2 = new Fl_Button(580, 155, 60, 25);
            inactive_color2->box(FL_GTK_UP_BOX);
            inactive_color2->callback((Fl_Callback*)cb_inactive_color2);
            inactive_color2->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();unsigned int color;
            unsigned int c = w.getWindowColor(color,"Inactive");
            inactive_color2->color(color);
          } // Fl_Button* inactive_color2
          { inactive_font_color = new Fl_Button(515, 185, 60, 25);
            inactive_font_color->box(FL_GTK_UP_BOX);
            inactive_font_color->callback((Fl_Callback*)cb_inactive_font_color);
            inactive_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();
            unsigned int c = w.getFontColor("Inactive");
            inactive_font_color->color(c);
          } // Fl_Button* inactive_font_color
          { inactive_border_color = new Fl_Button(515, 215, 60, 25);
            inactive_border_color->box(FL_GTK_UP_BOX);
            inactive_border_color->callback((Fl_Callback*)cb_inactive_border_color);
            inactive_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            flWindow w; w.loadTemp();
            unsigned int c = w.getBorderColor("Inactive");
            inactive_border_color->color(c);
          } // Fl_Button* inactive_border_color
          { Fl_Slider* o = inactive_o_slider = new Fl_Slider(500, 245, 90, 25, gettext("Opacity of Title Bar"));
            inactive_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            inactive_o_slider->type(1);
            inactive_o_slider->box(FL_GTK_DOWN_BOX);
            inactive_o_slider->color((Fl_Color)41);
            inactive_o_slider->selection_color((Fl_Color)29);
            inactive_o_slider->step(0.01);
            inactive_o_slider->value(1);
            inactive_o_slider->callback((Fl_Callback*)cb_inactive_o_slider);
            inactive_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            inactive_o_slider->when(FL_WHEN_RELEASE);
            flWindow w;w.loadTemp();const char* Inactive="Inactive";
            float h = w.getOpacity(Inactive);
            o->value(h);
          } // Fl_Slider* inactive_o_slider
          { Fl_Value_Input* o = inactive_o_slider_v = new Fl_Value_Input(614, 245, 35, 25, gettext("%"));
            inactive_o_slider_v->box(FL_GTK_DOWN_BOX);
            inactive_o_slider_v->selection_color((Fl_Color)80);
            inactive_o_slider_v->labelsize(10);
            inactive_o_slider_v->callback((Fl_Callback*)cb_inactive_o_slider_v);
            inactive_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            inactive_o_slider_v->when(3);
            float v = inactive_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* inactive_o_slider_v
          { Fl_Box* o = new Fl_Box(205, 290, 315, 25, gettext("Change the Window Button Images"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = new Fl_Button(150, 360, 115, 25, gettext("Close Button"));
            o->tooltip(gettext("Choose a XBM for the close button"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Close);
            o->align(Fl_Align(256));
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(395, 315, 145, 25, gettext("Maximize Button"));
            o->tooltip(gettext("Choose an image (XBM) for the Maximize button"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Maximize);
            o->align(Fl_Align(256));
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(40, 315, 225, 25, gettext(" Maximize Button (Activated)"));
            o->tooltip(gettext("Choose an image (XBM) for the Maximized button"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Maximize1);
            o->align(Fl_Align(256));
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(395, 360, 145, 25, gettext("Minimize Button"));
            o->tooltip(gettext("Choose an image (XBM) for the Minimize button"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Minimize);
            o->align(Fl_Align(256));
          } // Fl_Button* o
          { Fl_Box* o = new Fl_Box(180, 140, 60, 15, gettext("Color 1"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(245, 140, 60, 15, gettext("Color 2"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(515, 140, 60, 15, gettext("Color 1"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(580, 140, 60, 15, gettext("Color 2"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { max_a_image = new Fl_Box(275, 315, 30, 30);
            max_a_image->box(FL_GTK_DOWN_BOX);
            max_a_image->color((Fl_Color)43);
            max_a_image->callback((Fl_Callback*)cb_max_a_image);
            max_a_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button(max_a_image,"ButtonMaxActive");
          } // Fl_Box* max_a_image
          { Fl_Box* o = close_image = new Fl_Box(275, 355, 30, 30);
            close_image->box(FL_GTK_DOWN_BOX);
            close_image->color((Fl_Color)43);
            close_image->callback((Fl_Callback*)cb_close_image);
            close_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button(o,"ButtonClose");
          } // Fl_Box* close_image
          { Fl_Box* o = max_image = new Fl_Box(550, 315, 30, 30);
            max_image->box(FL_GTK_DOWN_BOX);
            max_image->color((Fl_Color)43);
            max_image->callback((Fl_Callback*)cb_max_image);
            max_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button(o,"ButtonMax");
          } // Fl_Box* max_image
          { Fl_Box* o = min_image = new Fl_Box(550, 355, 30, 30);
            min_image->box(FL_GTK_DOWN_BOX);
            min_image->color((Fl_Color)43);
            min_image->callback((Fl_Callback*)cb_min_image);
            min_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button(o,"ButtonMin");
          } // Fl_Box* min_image
          { Fl_Box* o = i_max_a_image = new Fl_Box(310, 315, 30, 30);
            i_max_a_image->box(FL_GTK_DOWN_BOX);
            i_max_a_image->color((Fl_Color)43);
            i_max_a_image->callback((Fl_Callback*)cb_i_max_a_image);
            i_max_a_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button_inactive(o,"ButtonMaxActive");
          } // Fl_Box* i_max_a_image
          { Fl_Box* o = i_close_image = new Fl_Box(310, 355, 30, 30);
            i_close_image->box(FL_GTK_DOWN_BOX);
            i_close_image->color((Fl_Color)43);
            i_close_image->callback((Fl_Callback*)cb_i_close_image);
            i_close_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button_inactive(o,"ButtonClose");
          } // Fl_Box* i_close_image
          { Fl_Box* o = i_max_image = new Fl_Box(585, 315, 30, 30);
            i_max_image->box(FL_GTK_DOWN_BOX);
            i_max_image->color((Fl_Color)43);
            i_max_image->callback((Fl_Callback*)cb_i_max_image);
            i_max_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button_inactive(o,"ButtonMax");
          } // Fl_Box* i_max_image
          { Fl_Box* o = i_min_image = new Fl_Box(585, 355, 30, 30);
            i_min_image->box(FL_GTK_DOWN_BOX);
            i_min_image->color((Fl_Color)43);
            i_min_image->callback((Fl_Callback*)cb_i_min_image);
            i_min_image->when(FL_WHEN_RELEASE_ALWAYS);
            get_button_inactive(o,"ButtonMin");
          } // Fl_Box* i_min_image
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(100, 100, 525, 305, gettext("Settings"));
          o->hide();
          { Fl_Slider* o = b_slider = new Fl_Slider(325, 150, 125, 25, gettext("Size of the Window Frame"));
            b_slider->tooltip(gettext("This makes the edges of the window larger or smaller to help you grab them mo\
re easily"));
            b_slider->type(1);
            b_slider->box(FL_GTK_DOWN_BOX);
            b_slider->color((Fl_Color)41);
            b_slider->selection_color(FL_LIGHT1);
            b_slider->minimum(1);
            b_slider->maximum(28);
            b_slider->step(1);
            b_slider->value(4);
            b_slider->callback((Fl_Callback*)cb_b_slider);
            b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            flWindow w; w.loadTemp();
            int x = w.getBorderWidth();
            o->value(x);
          } // Fl_Slider* b_slider
          { Fl_Slider* o = t_slider = new Fl_Slider(325, 120, 125, 25, gettext("Window Title Bar Size"));
            t_slider->tooltip(gettext("This is the top with the program name, and close button, etc.."));
            t_slider->type(1);
            t_slider->box(FL_GTK_DOWN_BOX);
            t_slider->color((Fl_Color)41);
            t_slider->selection_color(FL_LIGHT1);
            t_slider->minimum(2);
            t_slider->maximum(78);
            t_slider->step(1);
            t_slider->value(20);
            t_slider->callback((Fl_Callback*)cb_t_slider);
            t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            flWindow w; w.loadTemp();
            int y = w.getBorderHeight();
            o->value(y);
          } // Fl_Slider* t_slider
          { resize_menu = new Fl_Menu_Button(170, 180, 325, 25, gettext("Appearance of the Window while Resizing"));
            resize_menu->tooltip(gettext("What the windows look like while resizing"));
            resize_menu->box(FL_GTK_UP_BOX);
            resize_menu->color((Fl_Color)48);
            resize_menu->selection_color(FL_DARK_RED);
            resize_menu->labelcolor((Fl_Color)35);
            resize_menu->textcolor((Fl_Color)35);
            if (!menu_resize_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_resize_menu[i].label())
                  menu_resize_menu[i].label(gettext(menu_resize_menu[i].label()));
              menu_resize_menu_i18n_done = 1;
            }
            resize_menu->menu(menu_resize_menu);
          } // Fl_Menu_Button* resize_menu
          { move_menu = new Fl_Menu_Button(180, 215, 305, 25, gettext("Appearance of Window while Moving"));
            move_menu->tooltip(gettext("What the windows look like while moving"));
            move_menu->box(FL_GTK_UP_BOX);
            move_menu->color((Fl_Color)48);
            move_menu->selection_color(FL_DARK_RED);
            move_menu->labelcolor((Fl_Color)35);
            move_menu->textcolor((Fl_Color)35);
            if (!menu_move_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_move_menu[i].label())
                  menu_move_menu[i].label(gettext(menu_move_menu[i].label()));
              menu_move_menu_i18n_done = 1;
            }
            move_menu->menu(menu_move_menu);
          } // Fl_Menu_Button* move_menu
          { focus_menu = new Fl_Menu_Button(115, 310, 450, 25, gettext("Choose how the Window comes to the front of the screen"));
            focus_menu->tooltip(gettext("This determines how windows are brought to the front"));
            focus_menu->box(FL_GTK_UP_BOX);
            focus_menu->color((Fl_Color)48);
            focus_menu->selection_color(FL_DARK_RED);
            focus_menu->labelcolor((Fl_Color)35);
            focus_menu->textcolor((Fl_Color)35);
            if (!menu_focus_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_focus_menu[i].label())
                  menu_focus_menu[i].label(gettext(menu_focus_menu[i].label()));
              menu_focus_menu_i18n_done = 1;
            }
            focus_menu->menu(menu_focus_menu);
          } // Fl_Menu_Button* focus_menu
          { Fl_Value_Input* o = t_slider_v = new Fl_Value_Input(460, 120, 31, 25, gettext("pixels"));
            t_slider_v->box(FL_GTK_DOWN_BOX);
            t_slider_v->labelsize(10);
            t_slider_v->callback((Fl_Callback*)cb_t_slider_v);
            t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            t_slider_v->when(3);
            int v = t_slider->value();
            o->value(v);
          } // Fl_Value_Input* t_slider_v
          { Fl_Value_Input* o = b_slider_v = new Fl_Value_Input(460, 150, 31, 25, gettext("pixels"));
            b_slider_v->box(FL_GTK_DOWN_BOX);
            b_slider_v->labelsize(10);
            b_slider_v->callback((Fl_Callback*)cb_b_slider_v);
            b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            b_slider_v->when(3);
            int v = t_slider->value();
            o->value(v);
          } // Fl_Value_Input* b_slider_v
          { snap_menu = new Fl_Menu_Button(180, 250, 310, 25, gettext("Choose what the Windows will snap to"));
            snap_menu->tooltip(gettext("This determines how windows \'Snap\' to other windows, and screen edges"));
            snap_menu->box(FL_GTK_UP_BOX);
            snap_menu->color((Fl_Color)48);
            snap_menu->selection_color(FL_DARK_RED);
            snap_menu->labelcolor((Fl_Color)35);
            snap_menu->textcolor((Fl_Color)35);
            if (!menu_snap_menu_i18n_done) {
              int i=0;
              for ( ; i<3; i++)
                if (menu_snap_menu[i].label())
                  menu_snap_menu[i].label(gettext(menu_snap_menu[i].label()));
              menu_snap_menu_i18n_done = 1;
            }
            snap_menu->menu(menu_snap_menu);
          } // Fl_Menu_Button* snap_menu
          { Fl_Value_Input* o = snap_int = new Fl_Value_Input(185, 280, 30, 25, gettext("How close (in pixels) does the window need to be to snap?"));
            snap_int->box(FL_GTK_DOWN_BOX);
            snap_int->labelsize(10);
            snap_int->minimum(1);
            snap_int->maximum(32);
            snap_int->step(1);
            snap_int->value(5);
            snap_int->callback((Fl_Callback*)cb_snap_int);
            snap_int->align(Fl_Align(FL_ALIGN_RIGHT));
            snap_int->when(3);
            flWindow w; w.loadTemp();
            int value = w.getSnap();
            o->value(value);
          } // Fl_Value_Input* snap_int
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(70, 105, 565, 295, gettext("Advanced"));
          o->hide();
          { Fl_Slider* o = a_b_slider = new Fl_Slider(240, 240, 125, 25, gettext("Window Border Size"));
            a_b_slider->tooltip(gettext("Width of the window borders"));
            a_b_slider->type(1);
            a_b_slider->box(FL_GTK_DOWN_BOX);
            a_b_slider->color((Fl_Color)41);
            a_b_slider->selection_color(FL_LIGHT1);
            a_b_slider->minimum(1);
            a_b_slider->maximum(128);
            a_b_slider->step(1);
            a_b_slider->value(4);
            a_b_slider->callback((Fl_Callback*)cb_a_b_slider);
            a_b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            flWindow w; w.loadTemp();
            int x = w.getBorderWidth();
            o->value(x);
          } // Fl_Slider* a_b_slider
          { Fl_Slider* o = a_t_slider = new Fl_Slider(240, 280, 125, 25, gettext("Window Title Bar Size"));
            a_t_slider->tooltip(gettext("Height of the Window\'s Title Bar"));
            a_t_slider->type(1);
            a_t_slider->box(FL_GTK_DOWN_BOX);
            a_t_slider->color((Fl_Color)41);
            a_t_slider->selection_color(FL_LIGHT1);
            a_t_slider->minimum(2);
            a_t_slider->maximum(256);
            a_t_slider->step(1);
            a_t_slider->value(20);
            a_t_slider->callback((Fl_Callback*)cb_a_t_slider);
            a_t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            flWindow w; w.loadTemp();
            int y = w.getBorderHeight();
            o->value(y);
          } // Fl_Slider* a_t_slider
          { Fl_Value_Output* o = a_b_slider_v = new Fl_Value_Output(370, 240, 35, 25, gettext("pixels"));
            a_b_slider_v->box(FL_GTK_DOWN_BOX);
            a_b_slider_v->labelsize(10);
            a_b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_b_slider_v->when(3);
            int v = a_b_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_b_slider_v
          { Fl_Value_Output* o = a_t_slider_v = new Fl_Value_Output(370, 280, 35, 25, gettext("pixels"));
            a_t_slider_v->box(FL_GTK_DOWN_BOX);
            a_t_slider_v->labelsize(10);
            a_t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_t_slider_v->when(3);
            int v = a_t_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_t_slider_v
          { new Fl_Box(100, 125, 355, 15, gettext("This can make your window borders and Title bar"));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(135, 160, 250, 50, gettext("REALLY HUGE!"));
            o->labelfont(1);
            o->labelsize(24);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      o->end();
    } // Fl_Scroll* o
    { Fl_Button* o = new Fl_Button(20, 415, 185, 25, gettext("@<-  Main Settings Window"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Main);
    } // Fl_Button* o
    window_window->end();
    window_window->resizable(window_window);
  } // Fl_Double_Window* window_window
  return window_window;
}

void WindowUI::w_one_color(Fl_Widget *o, Fl_Widget *o2, const char * active) {
  flWindow f;f.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  uchar r2;
  uchar g2;
  uchar b2;
  
  Fl::get_color((o2->color()),r2,g2,b2);
  double*colors2 = new double[4];
  colors2[0] = int(r2); 
  colors2[1] = int(g2);
  colors2[2] = int(b2);
  colors2[3] = 0;
  
  
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	
  	f.setWindowColor(colors, colors2, active);
  	unsigned int unusedColor;
  	unsigned int colorSet = f.getWindowColor(unusedColor,active);
  	o->color(colorSet);
  	o->redraw();
  }
}

void WindowUI::w_two_color(Fl_Widget *o, Fl_Widget *o2, const char * active) {
  flWindow f;f.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  uchar r2;
  uchar g2;
  uchar b2;
  Fl::get_color((o2->color()),r2,g2,b2);
  
  int c2;
  const char * label ="choose";
  c2= fl_color_chooser(label,r2,g2,b2,2);
  
  double*colors2 = new double[4];
  colors2[0] = int(r2); 
  colors2[1] = int(g2);
  colors2[2] = int(b2);
  colors2[3] = 0;
  
  
  if (c2!=0){ //If the user doesn't cancel do stuff
  //Otherwise you will get weird colors
  	f.setWindowColor(colors, colors2, active);
  	unsigned int unusedColor;
  	unsigned int colorSet = f.getWindowColor(unusedColor,active);
  	o->color(colorSet);
  	o->redraw();
  	o2->color(unusedColor);
  	o2->redraw();
  }
}

void WindowUI::f_color(Fl_Widget *o, const char * active) {
  flWindow f;f.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){
  	f.setFontColor(colors, active);
  	unsigned int c = f.getFontColor(active);
  	o->color(c);
  	o->redraw();
  }
}

void WindowUI::b_color(Fl_Widget *o, const char * active) {
  flWindow f;f.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){
  	f.setBorderColor(colors, active);
  	unsigned int c = f.getBorderColor(active);
  	o->color(c);
  	o->redraw();
  }
}

void WindowUI::display(const char* filename, Fl_Widget *o) {
  std::string extention, filenameStr;
  filenameStr = filename;
  extention = filenameStr.substr((strlen(filename)-4),4);
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  Fl_Image* image;
  std::string png =".png";
  std::string xpm =".xpm";
  if (extention.compare(png) ==0){
  	image = new Fl_PNG_Image(filename);
  	Fl_Image * image2 = image->copy(12,12);
  	o->image(image2);
  	o->redraw();
  }
  else if(extention.compare(xpm) ==0){
  	image = new Fl_XPM_Image(filename);
  	Fl_Image * image2 = image->copy(12,12);
  	o->image(image2);
  	o->redraw();
  }
}

void WindowUI::get_button(Fl_Widget*o, const char* whichElement) {
  flWindow w;w.loadTemp();
  o->color(a_title_color1->color());
  o->labelcolor(a_font_color->color());
  const char * result = w.getButton(whichElement);
  std::cout<<result<<std::endl;
  if(result != "x"){display(result,o);}
  o->redraw();
}

void WindowUI::get_button_inactive(Fl_Widget*o, const char* whichElement) {
  flWindow w;w.loadTemp();
  o->color(inactive_color->color());
  o->labelcolor(inactive_font_color->color());
  const char * result = w.getButton(whichElement);
  std::cout<<result<<std::endl;
  if(result != "x"){display(result,o);}
  o->redraw();
}
