/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-window.h"

void WindowUI::cb_options_available_i(Fl_Browser*, void*) {
  int line = options_available->value();
options_desc->select(line);
const char* value = options_available->text(line);
if(value!=NULL){
  check_opts(value,desktop_num,layer_value,opacity_value,icon_value,layer_chooser);
};
}
void WindowUI::cb_options_available(Fl_Browser* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_options_available_i(o,v);
}

void WindowUI::cb__i(Fl_Button*, void*) {
  add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, add_tracker, options_desc);
}
void WindowUI::cb_(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void WindowUI::cb_Cancel_i(Fl_Button*, void*) {
  add_opt_window->hide();
}
void WindowUI::cb_Cancel(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void WindowUI::cb_OK_i(Fl_Button*, void*) {
  add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, add_tracker, options_desc);saveChanges();
add_opt_window->hide();
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_OK(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void WindowUI::cb_below_i(Fl_Menu_*, void*) {
  layer_value->value("below");
}
void WindowUI::cb_below(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_below_i(o,v);
}

void WindowUI::cb_normal_i(Fl_Menu_*, void*) {
  layer_value->value("normal");
}
void WindowUI::cb_normal(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_normal_i(o,v);
}

void WindowUI::cb_above_i(Fl_Menu_*, void*) {
  layer_value->value("above");
}
void WindowUI::cb_above(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_above_i(o,v);
}

unsigned char WindowUI::menu_layer_chooser_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_layer_chooser[] = {
 {"below", 0,  (Fl_Callback*)WindowUI::cb_below, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"normal", 0,  (Fl_Callback*)WindowUI::cb_normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"above", 0,  (Fl_Callback*)WindowUI::cb_above, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_1_i(Fl_Button* o, void*) {
  std::string ICON=choose_an_icon();
if(ICON.compare("")!=0){
  icon_value->value(ICON.c_str());
  makeWidgetIcon(ICON,o,48);
};
}
void WindowUI::cb_1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void WindowUI::cb_OK1_i(Fl_Button*, void*) {
  const char* input = input_to_add_class->value();
if(input!=NULL){
  add_class(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  class_win->hide();
};
}
void WindowUI::cb_OK1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void WindowUI::cb_OK2_i(Fl_Button*, void*) {
  const char* input = input_to_add_prog->value();
if(input!=NULL){
  add_prog(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  prog_win->hide();
};
}
void WindowUI::cb_OK2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK2_i(o,v);
}

void WindowUI::cb_Program_i(Fl_Button*, void*) {
  choose_a_program(input_to_add_prog);
}
void WindowUI::cb_Program(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Program_i(o,v);
}

void WindowUI::cb_a_title_color1_i(Fl_Button* o, void*) {
  set_one_title_color(o,1,max_a_image,max_image,min_image,close_image);
}
void WindowUI::cb_a_title_color1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color1_i(o,v);
}

void WindowUI::cb_a_title_color2_i(Fl_Button* o, void*) {
  set_two_title_colors(o,1);
}
void WindowUI::cb_a_title_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color2_i(o,v);
}

void WindowUI::cb_a_font_color_i(Fl_Button*, void*) {
  set_font_color(a_font_color, 1);
}
void WindowUI::cb_a_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_font_color_i(o,v);
}

void WindowUI::cb_a_border_color_i(Fl_Button*, void*) {
  set_border_color(a_border_color, 1);
}
void WindowUI::cb_a_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_border_color_i(o,v);
}

void WindowUI::cb_active_o_slider_i(Fl_Slider*, void*) {
  set_opacity(active_o_slider,active_o_slider_v,1);
}
void WindowUI::cb_active_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_i(o,v);
}

void WindowUI::cb_active_o_slider_v_i(Fl_Value_Input*, void*) {
  set_opacity(active_o_slider,active_o_slider_v,1);
}
void WindowUI::cb_active_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_v_i(o,v);
}

void WindowUI::cb_inactive_color_i(Fl_Button* o, void*) {
  set_one_title_color(o,2);
}
void WindowUI::cb_inactive_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color_i(o,v);
}

void WindowUI::cb_inactive_color2_i(Fl_Button* o, void*) {
  set_two_title_colors(o, 2);
}
void WindowUI::cb_inactive_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color2_i(o,v);
}

void WindowUI::cb_inactive_font_color_i(Fl_Button*, void*) {
  set_font_color(inactive_font_color, 2);
}
void WindowUI::cb_inactive_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_font_color_i(o,v);
}

void WindowUI::cb_inactive_border_color_i(Fl_Button*, void*) {
  set_border_color(inactive_border_color, 2);
}
void WindowUI::cb_inactive_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_border_color_i(o,v);
}

void WindowUI::cb_inactive_o_slider_i(Fl_Slider*, void*) {
  set_opacity(inactive_o_slider,inactive_o_slider_v,2);
}
void WindowUI::cb_inactive_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_i(o,v);
}

void WindowUI::cb_inactive_o_slider_v_i(Fl_Value_Input*, void*) {
  set_opacity(inactive_o_slider,inactive_o_slider_v,2);
}
void WindowUI::cb_inactive_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_v_i(o,v);
}

void WindowUI::cb_max_a_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMaxActive");
get_button(o,"ButtonMaxActive",a_title_color1);
}
void WindowUI::cb_max_a_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_a_image_i(o,v);
}

void WindowUI::cb_max_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMax");
get_button(o,"ButtonMax",a_title_color1);
}
void WindowUI::cb_max_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_image_i(o,v);
}

void WindowUI::cb_min_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMin");
get_button(o,"ButtonMin",a_title_color1);
}
void WindowUI::cb_min_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_min_image_i(o,v);
}

void WindowUI::cb_close_image_i(Fl_Button* o, void*) {
  choose_button("ButtonClose");
get_button(o,"ButtonClose",a_title_color1);
}
void WindowUI::cb_close_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_close_image_i(o,v);
}

void WindowUI::cb_t_slider_i(Fl_Slider*, void*) {
  title_bar_modifier(t_slider,t_slider_v,2);
}
void WindowUI::cb_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_i(o,v);
}

void WindowUI::cb_t_slider_v_i(Fl_Value_Input*, void*) {
  title_bar_modifier(t_slider,t_slider_v,1);
}
void WindowUI::cb_t_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_v_i(o,v);
}

void WindowUI::cb_b_slider_i(Fl_Slider* o, void*) {
  border_modifier(o,b_slider_v,2);
}
void WindowUI::cb_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_i(o,v);
}

void WindowUI::cb_b_slider_v_i(Fl_Value_Input* o, void*) {
  border_modifier(b_slider,o,1);
}
void WindowUI::cb_b_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_v_i(o,v);
}

void WindowUI::cb_By_i(Fl_Menu_*, void*) {
  setThing("FocusModel","click");
}
void WindowUI::cb_By(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_By_i(o,v);
}

void WindowUI::cb_By1_i(Fl_Menu_*, void*) {
  setThing("FocusModel","sloppy");
}
void WindowUI::cb_By1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_By1_i(o,v);
}

unsigned char WindowUI::menu_focus_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_focus_menu[] = {
 {"By Clicking on it", 0,  (Fl_Callback*)WindowUI::cb_By, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"By moving the mouse over it", 0,  (Fl_Callback*)WindowUI::cb_By1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Make_i(Fl_Menu_*, void*) {
  setThing("ResizeMode","opaque");
}
void WindowUI::cb_Make(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make_i(o,v);
}

void WindowUI::cb_Show_i(Fl_Menu_*, void*) {
  setThing("ResizeMode","outline");
}
void WindowUI::cb_Show(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

unsigned char WindowUI::menu_resize_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_resize_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Make1_i(Fl_Menu_*, void*) {
  setThing("MoveMode","opaque");
}
void WindowUI::cb_Make1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make1_i(o,v);
}

void WindowUI::cb_Show1_i(Fl_Menu_*, void*) {
  setThing("MoveMode","outline");
}
void WindowUI::cb_Show1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show1_i(o,v);
}

unsigned char WindowUI::menu_move_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_move_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_The_i(Fl_Menu_*, void*) {
  int i = snap_int->value();
const char *mode ="screen";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_The(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The_i(o,v);
}

void WindowUI::cb_The1_i(Fl_Menu_*, void*) {
  int i = snap_int->value();
const char *mode ="border";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_The1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The1_i(o,v);
}

void WindowUI::cb_No_i(Fl_Menu_*, void*) {
  int i = 0;
const char *mode ="none";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_No(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_No_i(o,v);
}

unsigned char WindowUI::menu_snap_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_snap_menu[] = {
 {"The Screen\'s Edges", 0,  (Fl_Callback*)WindowUI::cb_The, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"The Border of other Windows", 0,  (Fl_Callback*)WindowUI::cb_The1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"No snapping", 0,  (Fl_Callback*)WindowUI::cb_No, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_snap_int_i(Fl_Value_Input* o, void*) {
  int d = o->value();
setSnap(d);
}
void WindowUI::cb_snap_int(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_snap_int_i(o,v);
}

void WindowUI::cb_corner_slider_i(Fl_Slider* o, void*) {
  corner_change(o);
}
void WindowUI::cb_corner_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_corner_slider_i(o,v);
}

void WindowUI::cb_groups_browser_i(Fl_Browser*, void*) {
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_groups_browser(Fl_Browser* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_groups_browser_i(o,v);
}

void WindowUI::cb_group_add_i(Fl_Button*, void*) {
  XplusG(groups_browser);
}
void WindowUI::cb_group_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_group_add_i(o,v);
}

void WindowUI::cb_rm_group_i(Fl_Button*, void*) {
  XminusG(groups_browser);
}
void WindowUI::cb_rm_group(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_group_i(o,v);
}

#include <FL/Fl_Bitmap.H>
static const unsigned char idata_minus[] =
{0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,
0,0,0};
static Fl_Bitmap image_minus(idata_minus, 16, 16);

void WindowUI::cb_opt_add_i(Fl_Button*, void*) {
  std::string value=XplusO(groups_browser);
if(value.compare("")!=0){
  add_option_window()->show();
  options_desc->copy_label(value.c_str());
};
}
void WindowUI::cb_opt_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_opt_add_i(o,v);
}

void WindowUI::cb_rm_opt_i(Fl_Button*, void*) {
  if(XminusO(groups_browser,opt_browser)){
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
};
}
void WindowUI::cb_rm_opt(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_opt_i(o,v);
}

void WindowUI::cb_prog_add_i(Fl_Button*, void*) {
  if(XplusN(groups_browser)){
  add_program_window()->show();
};
}
void WindowUI::cb_prog_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_prog_add_i(o,v);
}

void WindowUI::cb_rm_prog_i(Fl_Button*, void*) {
  XminusN(groups_browser,name_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_rm_prog(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_prog_i(o,v);
}

void WindowUI::cb_class_add_i(Fl_Button*, void*) {
  if(XplusC(groups_browser)){
  add_class_window()->show();
};
}
void WindowUI::cb_class_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_class_add_i(o,v);
}

void WindowUI::cb_rm_class_i(Fl_Button*, void*) {
  XminusC(groups_browser,class_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_rm_class(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_class_i(o,v);
}

void WindowUI::cb_a_b_slider_i(Fl_Slider* o, void*) {
  border_modifier(o,a_b_slider_v);
}
void WindowUI::cb_a_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_b_slider_i(o,v);
}

void WindowUI::cb_a_t_slider_i(Fl_Slider*, void*) {
  title_bar_modifier(a_t_slider,a_t_slider_v);
}
void WindowUI::cb_a_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_t_slider_i(o,v);
}

void WindowUI::cb_Cancel1_i(Fl_Button*, void*) {
  window_window->hide();
cancel();
//showSettings();
}
void WindowUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void WindowUI::cb_OK3_i(Fl_Button*, void*) {
  saveChanges();
//showSettings();
}
void WindowUI::cb_OK3(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK3_i(o,v);
}

Fl_Double_Window* WindowUI::add_option_window() {
  { Fl_Double_Window* o = add_opt_window = new Fl_Double_Window(435, 435, gettext("Add an Option"));
    add_opt_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 430, 430);
      { Fl_Browser* o = options_available = new Fl_Browser(10, 10, 115, 375);
        options_available->type(2);
        options_available->box(FL_FLAT_BOX);
        options_available->selection_color((Fl_Color)80);
        options_available->callback((Fl_Callback*)cb_options_available);
        populateOptions(o);
      } // Fl_Browser* options_available
      { Fl_Button* o = new Fl_Button(10, 390, 30, 30, gettext("@+"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Browser* o = options_desc = new Fl_Browser(135, 10, 285, 220);
        options_desc->type(2);
        options_desc->box(FL_FLAT_BOX);
        options_desc->selection_color((Fl_Color)80);
        options_desc->labeltype(FL_NO_LABEL);
        options_desc->align(Fl_Align(FL_ALIGN_TOP));
        populateDesc(o);
      } // Fl_Browser* options_desc
      { icon_value = new Fl_Input(135, 235, 100, 25, gettext("Icon"));
        icon_value->box(FL_FLAT_BOX);
        icon_value->align(Fl_Align(FL_ALIGN_RIGHT));
        icon_value->deactivate();
      } // Fl_Input* icon_value
      { opacity_value = new Fl_Slider(135, 325, 100, 25, gettext("Opacity"));
        opacity_value->type(1);
        opacity_value->box(FL_GTK_DOWN_BOX);
        opacity_value->color((Fl_Color)41);
        opacity_value->step(0.2);
        opacity_value->value(1);
        opacity_value->align(Fl_Align(FL_ALIGN_RIGHT));
        opacity_value->deactivate();
      } // Fl_Slider* opacity_value
      { desktop_num = new Fl_Value_Input(135, 355, 35, 25, gettext("Desktop"));
        desktop_num->box(FL_FLAT_BOX);
        desktop_num->maximum(10000);
        desktop_num->align(Fl_Align(FL_ALIGN_RIGHT));
        desktop_num->deactivate();
      } // Fl_Value_Input* desktop_num
      { add_tracker = new Fl_Browser(335, 250, 85, 125, gettext("Adding"));
        add_tracker->box(FL_FLAT_BOX);
        add_tracker->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Browser* add_tracker
      { Fl_Button* o = new Fl_Button(300, 400, 55, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(375, 400, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      { layer_chooser = new Fl_Menu_Button(135, 265, 100, 25, gettext("Layer"));
        layer_chooser->box(FL_FLAT_BOX);
        layer_chooser->color((Fl_Color)23);
        layer_chooser->deactivate();
        if (!menu_layer_chooser_i18n_done) {
          int i=0;
          for ( ; i<3; i++)
            if (menu_layer_chooser[i].label())
              menu_layer_chooser[i].label(gettext(menu_layer_chooser[i].label()));
          menu_layer_chooser_i18n_done = 1;
        }
        layer_chooser->menu(menu_layer_chooser);
      } // Fl_Menu_Button* layer_chooser
      { layer_value = new Fl_Output(135, 295, 100, 25);
        layer_value->box(FL_FLAT_BOX);
        layer_value->deactivate();
      } // Fl_Output* layer_value
      { Fl_Button* o = new Fl_Button(275, 235, 50, 50);
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_windows_xpm);
    add_opt_window->xclass("jsm-windows");
    add_opt_window->end();
  } // Fl_Double_Window* add_opt_window
  return add_opt_window;
}

Fl_Double_Window* WindowUI::add_class_window() {
  { Fl_Double_Window* o = class_win = new Fl_Double_Window(375, 50, gettext("Add Class"));
    class_win->user_data((void*)(this));
    { input_to_add_class = new Fl_Input(105, 10, 195, 25, gettext("Class to Add"));
      input_to_add_class->box(FL_FLAT_BOX);
    } // Fl_Input* input_to_add_class
    { Fl_Button* o = new Fl_Button(315, 10, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    startup(o,jsm_windows_xpm);
    class_win->xclass("jsm-windows");
    class_win->end();
  } // Fl_Double_Window* class_win
  return class_win;
}

Fl_Double_Window* WindowUI::add_program_window() {
  { Fl_Double_Window* o = prog_win = new Fl_Double_Window(380, 40, gettext("Program to add"));
    prog_win->user_data((void*)(this));
    { input_to_add_prog = new Fl_Input(115, 10, 195, 25);
      input_to_add_prog->box(FL_FLAT_BOX);
    } // Fl_Input* input_to_add_prog
    { Fl_Button* o = new Fl_Button(320, 10, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(10, 10, 95, 25, gettext("Program @+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Program);
    } // Fl_Button* o
    startup(o,jsm_windows_xpm);
    prog_win->xclass("jsm-windows");
    prog_win->end();
  } // Fl_Double_Window* prog_win
  return prog_win;
}

Fl_Double_Window* WindowUI::make_window() {
  if(!load()){debug_out("DIDN'T LOAD in jwm-window");}
  else{debug_out("LOADED doc in jwm-window");}
  { Fl_Double_Window* o = window_window = new Fl_Double_Window(510, 315, gettext("Window Settings"));
    window_window->color((Fl_Color)31);
    window_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 510, 315);
      o->color((Fl_Color)31);
      { Fl_Tabs* o = new Fl_Tabs(0, 0, 510, 280);
        o->box(FL_FLAT_BOX);
        o->selection_color((Fl_Color)51);
        { Fl_Group* o = new Fl_Group(0, 30, 510, 250, gettext("Appearance"));
          { Fl_Box* o = new Fl_Box(0, 35, 255, 160);
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)51);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(60, 35, 160, 25, gettext("Active Window"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
            o->align(Fl_Align(384));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(39, 75, 60, 25, gettext("Title bar"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_title_color1 = new Fl_Button(108, 75, 60, 25, gettext("Color 1"));
            a_title_color1->box(FL_FLAT_BOX);
            a_title_color1->color((Fl_Color)23);
            a_title_color1->callback((Fl_Callback*)cb_a_title_color1);
            a_title_color1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            active_color_loader(o,1);
          } // Fl_Button* a_title_color1
          { Fl_Button* o = a_title_color2 = new Fl_Button(173, 75, 60, 25, gettext("Color 2"));
            a_title_color2->box(FL_FLAT_BOX);
            a_title_color2->color((Fl_Color)23);
            a_title_color2->callback((Fl_Callback*)cb_a_title_color2);
            a_title_color2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            active_color_loader(o,2);
          } // Fl_Button* a_title_color2
          { Fl_Box* o = new Fl_Box(22, 105, 80, 25, gettext("Font Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_font_color = new Fl_Button(108, 105, 60, 25);
            a_font_color->box(FL_FLAT_BOX);
            a_font_color->color((Fl_Color)23);
            a_font_color->callback((Fl_Callback*)cb_a_font_color);
            a_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            font_color_loader(o,1);
          } // Fl_Button* a_font_color
          { Fl_Box* o = new Fl_Box(5, 135, 100, 25, gettext("Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_border_color = new Fl_Button(108, 135, 60, 25);
            a_border_color->box(FL_FLAT_BOX);
            a_border_color->color((Fl_Color)23);
            a_border_color->callback((Fl_Callback*)cb_a_border_color);
            a_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            border_color_loader(o,1);
          } // Fl_Button* a_border_color
          { Fl_Slider* o = active_o_slider = new Fl_Slider(108, 165, 90, 25, gettext("Opacity  "));
            active_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            active_o_slider->type(1);
            active_o_slider->box(FL_GTK_DOWN_BOX);
            active_o_slider->color((Fl_Color)41);
            active_o_slider->selection_color((Fl_Color)29);
            active_o_slider->step(0.01);
            active_o_slider->value(1);
            active_o_slider->callback((Fl_Callback*)cb_active_o_slider);
            active_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            active_o_slider->when(FL_WHEN_RELEASE);
            opacity_loader(o,1);
          } // Fl_Slider* active_o_slider
          { Fl_Value_Input* o = active_o_slider_v = new Fl_Value_Input(203, 165, 35, 25, gettext("%"));
            active_o_slider_v->box(FL_FLAT_BOX);
            active_o_slider_v->selection_color((Fl_Color)80);
            active_o_slider_v->labelsize(10);
            active_o_slider_v->value(1);
            active_o_slider_v->callback((Fl_Callback*)cb_active_o_slider_v);
            active_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            active_o_slider_v->when(3);
            float v = active_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* active_o_slider_v
          { Fl_Box* o = new Fl_Box(255, 35, 255, 160);
            o->box(FL_FLAT_BOX);
            o->color(FL_DARK2);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(270, 35, 220, 25, gettext("Background  Window"));
            o->labelfont(1);
            o->labelcolor(FL_GRAY0);
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(281, 80, 70, 25, gettext("Title bar"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_color = new Fl_Button(360, 75, 60, 25, gettext("Color 1"));
            inactive_color->box(FL_FLAT_BOX);
            inactive_color->color((Fl_Color)23);
            inactive_color->callback((Fl_Callback*)cb_inactive_color);
            inactive_color->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inactive_color->when(FL_WHEN_RELEASE_ALWAYS);
            inactive_color_loader(o,1);
          } // Fl_Button* inactive_color
          { Fl_Button* o = inactive_color2 = new Fl_Button(425, 75, 60, 25, gettext("Color 2"));
            inactive_color2->box(FL_FLAT_BOX);
            inactive_color2->color((Fl_Color)23);
            inactive_color2->callback((Fl_Callback*)cb_inactive_color2);
            inactive_color2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inactive_color2->when(FL_WHEN_RELEASE_ALWAYS);
            inactive_color_loader(o,1);
          } // Fl_Button* inactive_color2
          { Fl_Box* o = new Fl_Box(263, 107, 95, 25, gettext("Font Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_font_color = new Fl_Button(360, 105, 60, 25);
            inactive_font_color->box(FL_FLAT_BOX);
            inactive_font_color->color((Fl_Color)23);
            inactive_font_color->callback((Fl_Callback*)cb_inactive_font_color);
            inactive_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            font_color_loader(o,2);
          } // Fl_Button* inactive_font_color
          { Fl_Box* o = new Fl_Box(257, 135, 90, 25, gettext("Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_border_color = new Fl_Button(360, 135, 60, 25);
            inactive_border_color->box(FL_FLAT_BOX);
            inactive_border_color->color((Fl_Color)23);
            inactive_border_color->callback((Fl_Callback*)cb_inactive_border_color);
            inactive_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            border_color_loader(o,2);
          } // Fl_Button* inactive_border_color
          { Fl_Slider* o = inactive_o_slider = new Fl_Slider(355, 165, 90, 25, gettext("Opacity "));
            inactive_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            inactive_o_slider->type(1);
            inactive_o_slider->box(FL_GTK_DOWN_BOX);
            inactive_o_slider->color((Fl_Color)41);
            inactive_o_slider->selection_color((Fl_Color)29);
            inactive_o_slider->step(0.01);
            inactive_o_slider->value(1);
            inactive_o_slider->callback((Fl_Callback*)cb_inactive_o_slider);
            inactive_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            inactive_o_slider->when(FL_WHEN_RELEASE);
            opacity_loader(o,2);
          } // Fl_Slider* inactive_o_slider
          { Fl_Value_Input* o = inactive_o_slider_v = new Fl_Value_Input(450, 165, 35, 25, gettext("%"));
            inactive_o_slider_v->box(FL_FLAT_BOX);
            inactive_o_slider_v->selection_color((Fl_Color)80);
            inactive_o_slider_v->labelsize(10);
            inactive_o_slider_v->callback((Fl_Callback*)cb_inactive_o_slider_v);
            inactive_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            inactive_o_slider_v->when(3);
            float v = inactive_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* inactive_o_slider_v
          { Fl_Box* o = new Fl_Box(15, 200, 115, 80, gettext("Change the Window Button Images"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(245, 240, 70, 40, gettext(" Maximize (Activated)"));
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Button* o = max_a_image = new Fl_Button(255, 200, 40, 40);
            max_a_image->tooltip(gettext("Choose an image (XBM) for the Maximized button"));
            max_a_image->box(FL_FLAT_BOX);
            max_a_image->color((Fl_Color)43);
            max_a_image->callback((Fl_Callback*)cb_max_a_image);
            max_a_image->align(Fl_Align(256));
            get_button(o,"ButtonMaxActive",a_title_color1);
          } // Fl_Button* max_a_image
          { new Fl_Box(340, 245, 90, 5, gettext(" Maximize"));
          } // Fl_Box* o
          { Fl_Button* o = max_image = new Fl_Button(360, 200, 40, 40);
            max_image->tooltip(gettext("Choose an image (XBM) for the Maximized button"));
            max_image->box(FL_FLAT_BOX);
            max_image->color((Fl_Color)43);
            max_image->callback((Fl_Callback*)cb_max_image);
            max_image->align(Fl_Align(256));
            get_button(o,"ButtonMax",a_title_color1);
          } // Fl_Button* max_image
          { new Fl_Box(125, 247, 90, 3, gettext(" Minimize"));
          } // Fl_Box* o
          { Fl_Button* o = min_image = new Fl_Button(145, 200, 40, 40);
            min_image->tooltip(gettext("Choose an image (XBM) for the Maximized button"));
            min_image->box(FL_FLAT_BOX);
            min_image->color((Fl_Color)43);
            min_image->callback((Fl_Callback*)cb_min_image);
            min_image->align(Fl_Align(256));
            get_button(o,"ButtonMin",a_title_color1);
          } // Fl_Button* min_image
          { new Fl_Box(435, 245, 70, 5, gettext(" Close"));
          } // Fl_Box* o
          { Fl_Button* o = close_image = new Fl_Button(450, 200, 40, 40);
            close_image->tooltip(gettext("Choose an image (XBM) for the Maximized button"));
            close_image->box(FL_FLAT_BOX);
            close_image->color((Fl_Color)43);
            close_image->callback((Fl_Callback*)cb_close_image);
            close_image->align(Fl_Align(256));
            get_button(o,"ButtonClose",a_title_color1);
          } // Fl_Button* close_image
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 35, 485, 245, gettext("Settings"));
          o->hide();
          { Fl_Slider* o = t_slider = new Fl_Slider(205, 35, 125, 25, gettext("Window Title Bar Size"));
            t_slider->tooltip(gettext("This is the top with the program name, and close button, etc.."));
            t_slider->type(1);
            t_slider->box(FL_GTK_DOWN_BOX);
            t_slider->color((Fl_Color)41);
            t_slider->selection_color(FL_LIGHT1);
            t_slider->minimum(2);
            t_slider->maximum(78);
            t_slider->step(1);
            t_slider->value(20);
            t_slider->callback((Fl_Callback*)cb_t_slider);
            t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            int y = getBorderHeight();
            o->value(y);
          } // Fl_Slider* t_slider
          { Fl_Value_Input* o = t_slider_v = new Fl_Value_Input(340, 35, 31, 25, gettext("pixels"));
            t_slider_v->box(FL_FLAT_BOX);
            t_slider_v->labelsize(10);
            t_slider_v->callback((Fl_Callback*)cb_t_slider_v);
            t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            t_slider_v->when(3);
            int v = t_slider->value();
            o->value(v);
          } // Fl_Value_Input* t_slider_v
          { Fl_Slider* o = b_slider = new Fl_Slider(205, 65, 125, 25, gettext("Size of the Window Frame"));
            b_slider->tooltip(gettext("This makes the edges of the window larger or smaller to help you grab them mo\
re easily"));
            b_slider->type(1);
            b_slider->box(FL_GTK_DOWN_BOX);
            b_slider->color((Fl_Color)41);
            b_slider->selection_color(FL_LIGHT1);
            b_slider->minimum(1);
            b_slider->maximum(28);
            b_slider->step(1);
            b_slider->value(4);
            b_slider->callback((Fl_Callback*)cb_b_slider);
            b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            int x = getBorderWidth();
            o->value(x);
          } // Fl_Slider* b_slider
          { Fl_Value_Input* o = b_slider_v = new Fl_Value_Input(340, 65, 31, 25, gettext("pixels"));
            b_slider_v->box(FL_FLAT_BOX);
            b_slider_v->labelsize(10);
            b_slider_v->callback((Fl_Callback*)cb_b_slider_v);
            b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            b_slider_v->when(3);
            int v = b_slider->value();
            o->value(v);
          } // Fl_Value_Input* b_slider_v
          { focus_menu = new Fl_Menu_Button(20, 125, 450, 25, gettext("Choose how the Window comes to the front of the screen"));
            focus_menu->tooltip(gettext("This determines how windows are brought to the front"));
            focus_menu->box(FL_FLAT_BOX);
            focus_menu->color((Fl_Color)23);
            focus_menu->selection_color(FL_DARK_RED);
            focus_menu->labelcolor((Fl_Color)35);
            focus_menu->textcolor((Fl_Color)35);
            if (!menu_focus_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_focus_menu[i].label())
                  menu_focus_menu[i].label(gettext(menu_focus_menu[i].label()));
              menu_focus_menu_i18n_done = 1;
            }
            focus_menu->menu(menu_focus_menu);
          } // Fl_Menu_Button* focus_menu
          { resize_menu = new Fl_Menu_Button(20, 155, 450, 25, gettext("Appearance of the Window while Resizing"));
            resize_menu->tooltip(gettext("What the windows look like while resizing"));
            resize_menu->box(FL_FLAT_BOX);
            resize_menu->color((Fl_Color)23);
            resize_menu->selection_color(FL_DARK_RED);
            resize_menu->labelcolor((Fl_Color)35);
            resize_menu->textcolor((Fl_Color)35);
            if (!menu_resize_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_resize_menu[i].label())
                  menu_resize_menu[i].label(gettext(menu_resize_menu[i].label()));
              menu_resize_menu_i18n_done = 1;
            }
            resize_menu->menu(menu_resize_menu);
          } // Fl_Menu_Button* resize_menu
          { move_menu = new Fl_Menu_Button(20, 185, 450, 25, gettext("Appearance of Window while Moving"));
            move_menu->tooltip(gettext("What the windows look like while moving"));
            move_menu->box(FL_FLAT_BOX);
            move_menu->color((Fl_Color)23);
            move_menu->selection_color(FL_DARK_RED);
            move_menu->labelcolor((Fl_Color)35);
            move_menu->textcolor((Fl_Color)35);
            if (!menu_move_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_move_menu[i].label())
                  menu_move_menu[i].label(gettext(menu_move_menu[i].label()));
              menu_move_menu_i18n_done = 1;
            }
            move_menu->menu(menu_move_menu);
          } // Fl_Menu_Button* move_menu
          { snap_menu = new Fl_Menu_Button(20, 215, 450, 25, gettext("Choose what the Windows will snap to"));
            snap_menu->tooltip(gettext("This determines how windows \'Snap\' to other windows, and screen edges"));
            snap_menu->box(FL_FLAT_BOX);
            snap_menu->color((Fl_Color)23);
            snap_menu->selection_color(FL_DARK_RED);
            snap_menu->labelcolor((Fl_Color)35);
            snap_menu->textcolor((Fl_Color)35);
            if (!menu_snap_menu_i18n_done) {
              int i=0;
              for ( ; i<3; i++)
                if (menu_snap_menu[i].label())
                  menu_snap_menu[i].label(gettext(menu_snap_menu[i].label()));
              menu_snap_menu_i18n_done = 1;
            }
            snap_menu->menu(menu_snap_menu);
          } // Fl_Menu_Button* snap_menu
          { Fl_Value_Input* o = snap_int = new Fl_Value_Input(20, 245, 30, 30, gettext("How close (in pixels) does the window need to be to snap?"));
            snap_int->box(FL_FLAT_BOX);
            snap_int->labelsize(10);
            snap_int->minimum(1);
            snap_int->maximum(32);
            snap_int->step(1);
            snap_int->value(5);
            snap_int->callback((Fl_Callback*)cb_snap_int);
            snap_int->align(Fl_Align(FL_ALIGN_RIGHT));
            snap_int->when(3);
            int value = getSnap();
            o->value(value);
          } // Fl_Value_Input* snap_int
          { Fl_Slider* o = corner_slider = new Fl_Slider(205, 95, 60, 25, gettext("Size of Corner"));
            corner_slider->tooltip(gettext("This changes the curvature of the window\'s corners"));
            corner_slider->type(1);
            corner_slider->box(FL_GTK_DOWN_BOX);
            corner_slider->color((Fl_Color)41);
            corner_slider->maximum(5);
            corner_slider->step(1);
            corner_slider->value(4);
            corner_slider->callback((Fl_Callback*)cb_corner_slider);
            corner_slider->align(Fl_Align(FL_ALIGN_LEFT));
            corner_load(o);
          } // Fl_Slider* corner_slider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(0, 30, 510, 230, gettext("Groups"));
          o->hide();
          { Fl_Browser* o = groups_browser = new Fl_Browser(15, 55, 85, 155, gettext("Current Groups"));
            groups_browser->tooltip(gettext("Program groups allow one to specify options which apply to a group of program\
s by their name and/or class. A program group is created with the Group tag. A\
s many program groups can be created as desired."));
            groups_browser->type(2);
            groups_browser->box(FL_FLAT_BOX);
            groups_browser->callback((Fl_Callback*)cb_groups_browser);
            groups_browser->align(Fl_Align(FL_ALIGN_TOP));
            getGroups(o);
          } // Fl_Browser* groups_browser
          { group_add = new Fl_Button(15, 230, 30, 30, gettext("@+"));
            group_add->box(FL_FLAT_BOX);
            group_add->color((Fl_Color)23);
            group_add->callback((Fl_Callback*)cb_group_add);
          } // Fl_Button* group_add
          { rm_group = new Fl_Button(51, 230, 30, 30);
            rm_group->box(FL_FLAT_BOX);
            rm_group->color((Fl_Color)23);
            rm_group->image(image_minus);
            rm_group->callback((Fl_Callback*)cb_rm_group);
          } // Fl_Button* rm_group
          { opt_browser = new Fl_Browser(120, 55, 120, 155, gettext("Current Options"));
            opt_browser->type(2);
            opt_browser->box(FL_FLAT_BOX);
            opt_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* opt_browser
          { opt_add = new Fl_Button(120, 230, 30, 30, gettext("@+"));
            opt_add->box(FL_FLAT_BOX);
            opt_add->color((Fl_Color)23);
            opt_add->callback((Fl_Callback*)cb_opt_add);
          } // Fl_Button* opt_add
          { rm_opt = new Fl_Button(156, 230, 30, 30);
            rm_opt->box(FL_FLAT_BOX);
            rm_opt->color((Fl_Color)23);
            rm_opt->image(image_minus);
            rm_opt->callback((Fl_Callback*)cb_rm_opt);
          } // Fl_Button* rm_opt
          { name_browser = new Fl_Browser(255, 55, 115, 155, gettext("Program Name"));
            name_browser->type(2);
            name_browser->box(FL_FLAT_BOX);
            name_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* name_browser
          { prog_add = new Fl_Button(255, 230, 30, 30, gettext("@+"));
            prog_add->box(FL_FLAT_BOX);
            prog_add->color((Fl_Color)23);
            prog_add->callback((Fl_Callback*)cb_prog_add);
          } // Fl_Button* prog_add
          { rm_prog = new Fl_Button(291, 230, 30, 30);
            rm_prog->box(FL_FLAT_BOX);
            rm_prog->color((Fl_Color)23);
            rm_prog->image(image_minus);
            rm_prog->callback((Fl_Callback*)cb_rm_prog);
          } // Fl_Button* rm_prog
          { class_browser = new Fl_Browser(385, 55, 115, 155, gettext("Window Class"));
            class_browser->type(2);
            class_browser->box(FL_FLAT_BOX);
            class_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* class_browser
          { class_add = new Fl_Button(385, 230, 30, 30, gettext("@+"));
            class_add->box(FL_FLAT_BOX);
            class_add->color((Fl_Color)23);
            class_add->callback((Fl_Callback*)cb_class_add);
          } // Fl_Button* class_add
          { rm_class = new Fl_Button(422, 230, 30, 30);
            rm_class->box(FL_FLAT_BOX);
            rm_class->color((Fl_Color)23);
            rm_class->image(image_minus);
            rm_class->callback((Fl_Callback*)cb_rm_class);
          } // Fl_Button* rm_class
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 45, 460, 205, gettext("Advanced"));
          o->hide();
          { Fl_Slider* o = a_b_slider = new Fl_Slider(190, 150, 125, 25, gettext("Window Border Size"));
            a_b_slider->tooltip(gettext("Width of the window borders"));
            a_b_slider->type(1);
            a_b_slider->box(FL_GTK_DOWN_BOX);
            a_b_slider->color((Fl_Color)41);
            a_b_slider->selection_color(FL_LIGHT1);
            a_b_slider->minimum(1);
            a_b_slider->maximum(128);
            a_b_slider->step(1);
            a_b_slider->value(4);
            a_b_slider->callback((Fl_Callback*)cb_a_b_slider);
            a_b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            int x = getBorderWidth();
            o->value(x);
          } // Fl_Slider* a_b_slider
          { Fl_Value_Output* o = a_b_slider_v = new Fl_Value_Output(320, 150, 35, 25, gettext("pixels"));
            a_b_slider_v->box(FL_FLAT_BOX);
            a_b_slider_v->color(FL_LIGHT3);
            a_b_slider_v->labelsize(10);
            a_b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_b_slider_v->when(3);
            int v = a_b_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_b_slider_v
          { Fl_Slider* o = a_t_slider = new Fl_Slider(190, 190, 125, 25, gettext("Window Title Bar Size"));
            a_t_slider->tooltip(gettext("Height of the Window\'s Title Bar"));
            a_t_slider->type(1);
            a_t_slider->box(FL_GTK_DOWN_BOX);
            a_t_slider->color((Fl_Color)41);
            a_t_slider->selection_color(FL_LIGHT1);
            a_t_slider->minimum(2);
            a_t_slider->maximum(256);
            a_t_slider->step(1);
            a_t_slider->value(20);
            a_t_slider->callback((Fl_Callback*)cb_a_t_slider);
            a_t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            int y = getBorderHeight();
            o->value(y);
          } // Fl_Slider* a_t_slider
          { Fl_Value_Output* o = a_t_slider_v = new Fl_Value_Output(320, 190, 35, 25, gettext("pixels"));
            a_t_slider_v->box(FL_FLAT_BOX);
            a_t_slider_v->color(FL_LIGHT3);
            a_t_slider_v->labelsize(10);
            a_t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_t_slider_v->when(3);
            int v = a_t_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_t_slider_v
          { new Fl_Box(80, 55, 375, 15, gettext("This can make your window borders and Title bar"));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(145, 70, 250, 50, gettext("REALLY HUGE!"));
            o->labelfont(1);
            o->labelsize(24);
          } // Fl_Box* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(390, 285, 55, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(455, 285, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK3);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_windows_xpm);
    window_window->xclass("jsm-windows");
    window_window->end();
    window_window->resizable(window_window);
  } // Fl_Double_Window* window_window
  return window_window;
}
