/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-window.h"

void WindowUI::cb_options_available_i(Fl_Browser*, void*) {
  int line = options_available->value();
options_desc->select(line);
const char* value = options_available->text(line);
if(value!=NULL){
  check_opts(value,desktop_num,layer_value,opacity_value,icon_value,layer_chooser);
};
}
void WindowUI::cb_options_available(Fl_Browser* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_options_available_i(o,v);
}

void WindowUI::cb_Cancel_i(Fl_Button*, void*) {
  add_opt_window->hide();
}
void WindowUI::cb_Cancel(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void WindowUI::cb_OK_i(Fl_Button*, void*) {
  add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, groups_browser);
saveChangesTemp();
add_opt_window->hide();
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_OK(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void WindowUI::cb_below_i(Fl_Menu_*, void*) {
  layer_value->value("below");
}
void WindowUI::cb_below(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_below_i(o,v);
}

void WindowUI::cb_normal_i(Fl_Menu_*, void*) {
  layer_value->value("normal");
}
void WindowUI::cb_normal(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_normal_i(o,v);
}

void WindowUI::cb_above_i(Fl_Menu_*, void*) {
  layer_value->value("above");
}
void WindowUI::cb_above(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_above_i(o,v);
}

unsigned char WindowUI::menu_layer_chooser_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_layer_chooser[] = {
 {"below", 0,  (Fl_Callback*)WindowUI::cb_below, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"normal", 0,  (Fl_Callback*)WindowUI::cb_normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"above", 0,  (Fl_Callback*)WindowUI::cb_above, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb__i(Fl_Button* o, void*) {
  std::string ICON=choose_an_icon();
if(ICON.compare("")!=0){
  icon_value->value(ICON.c_str());
  makeWidgetIcon(ICON,o,48);
};
}
void WindowUI::cb_(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void WindowUI::cb_OK1_i(Fl_Button*, void*) {
  const char* input = input_to_add_class->value();
if(input!=NULL){
  add_class(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  class_win->hide();
};
}
void WindowUI::cb_OK1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void WindowUI::cb_OK2_i(Fl_Button*, void*) {
  const char* input = input_to_add_prog->value();
if(input!=NULL){
  add_prog(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  prog_win->hide();
};
}
void WindowUI::cb_OK2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK2_i(o,v);
}

void WindowUI::cb_Program_i(Fl_Button*, void*) {
  choose_a_program(input_to_add_prog);
}
void WindowUI::cb_Program(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Program_i(o,v);
}

void WindowUI::cb_Cancel1_i(Fl_Button*, void*) {
  button_orderer->hide();
}
void WindowUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void WindowUI::cb_OK3_i(Fl_Button*, void*) {
  std::string val=ordering->value();
setElementText("TitleButtonOrder",val);
saveChanges();
}
void WindowUI::cb_OK3(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK3_i(o,v);
}

void WindowUI::cb_move_i(Fl_Menu_*, void*) {
  const char * action = "next";
menu_cb(action,value_1);
}
void WindowUI::cb_move(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move_i(o,v);
}

void WindowUI::cb_move1_i(Fl_Menu_*, void*) {
  const char * action = "nextstacked";
menu_cb(action,value_1);
}
void WindowUI::cb_move1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move1_i(o,v);
}

void WindowUI::cb_move2_i(Fl_Menu_*, void*) {
  const char * action = "prev";
menu_cb(action,value_1);
}
void WindowUI::cb_move2(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move2_i(o,v);
}

void WindowUI::cb_move3_i(Fl_Menu_*, void*) {
  const char * action = "prevstacked";
menu_cb(action,value_1);
}
void WindowUI::cb_move3(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move3_i(o,v);
}

void WindowUI::cb_close_i(Fl_Menu_*, void*) {
  const char * action = "close";
menu_cb(action,value_1);
}
void WindowUI::cb_close(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_close_i(o,v);
}

void WindowUI::cb_fullscreen_i(Fl_Menu_*, void*) {
  const char * action = "fullscreen";
menu_cb(action,value_1);
}
void WindowUI::cb_fullscreen(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_fullscreen_i(o,v);
}

void WindowUI::cb_minimize_i(Fl_Menu_*, void*) {
  const char * action = "minimize";
menu_cb(action,value_1);
}
void WindowUI::cb_minimize(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_minimize_i(o,v);
}

void WindowUI::cb_maximize_i(Fl_Menu_*, void*) {
  const char * action = "maximize";
menu_cb(action,value_1);
}
void WindowUI::cb_maximize(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_maximize_i(o,v);
}

void WindowUI::cb_roll_i(Fl_Menu_*, void*) {
  const char * action = "shade";
menu_cb(action,value_1);
}
void WindowUI::cb_roll(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_roll_i(o,v);
}

void WindowUI::cb_move4_i(Fl_Menu_*, void*) {
  const char * action = "move";
menu_cb(action,value_1);
}
void WindowUI::cb_move4(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move4_i(o,v);
}

void WindowUI::cb_resize_i(Fl_Menu_*, void*) {
  const char * action = "resize";
menu_cb(action,value_1);
}
void WindowUI::cb_resize(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_resize_i(o,v);
}

void WindowUI::cb_show_i(Fl_Menu_*, void*) {
  const char * action = "window";
menu_cb(action,value_1);
}
void WindowUI::cb_show(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_show_i(o,v);
}

void WindowUI::cb_Show_i(Fl_Menu_*, void*) {
  const char * action = "root:5";
menu_cb(action,value_1);
}
void WindowUI::cb_Show(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Show_i(o,v);
}

void WindowUI::cb_Show1_i(Fl_Menu_*, void*) {
  const char * action = "root:7";
menu_cb(action,value_1);
}
void WindowUI::cb_Show1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Show1_i(o,v);
}

void WindowUI::cb_Show2_i(Fl_Menu_*, void*) {
  const char * action = "root:9";
menu_cb(action,value_1);
}
void WindowUI::cb_Show2(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Show2_i(o,v);
}

void WindowUI::cb_move5_i(Fl_Menu_*, void*) {
  const char * action = "rdesktop";
menu_cb(action,value_1);
}
void WindowUI::cb_move5(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move5_i(o,v);
}

void WindowUI::cb_move6_i(Fl_Menu_*, void*) {
  const char * action = "ldesktop";
menu_cb(action,value_1);
}
void WindowUI::cb_move6(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move6_i(o,v);
}

void WindowUI::cb_move7_i(Fl_Menu_*, void*) {
  const char * action = "udesktop";
menu_cb(action,value_1);
}
void WindowUI::cb_move7(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move7_i(o,v);
}

void WindowUI::cb_move8_i(Fl_Menu_*, void*) {
  const char * action = "ddesktop";
menu_cb(action,value_1);
}
void WindowUI::cb_move8(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_move8_i(o,v);
}

void WindowUI::cb_restart_i(Fl_Menu_*, void*) {
  const char * action = "restart";
menu_cb(action,value_1);
}
void WindowUI::cb_restart(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_restart_i(o,v);
}

void WindowUI::cb_exit_i(Fl_Menu_*, void*) {
  const char * action = "exit";
menu_cb(action,value_1);
}
void WindowUI::cb_exit(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_exit_i(o,v);
}

void WindowUI::cb_Show3_i(Fl_Menu_*, void*) {
  const char * action = "showtray";
menu_cb(action,value_1);
}
void WindowUI::cb_Show3(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Show3_i(o,v);
}

void WindowUI::cb_Maximize_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxtop";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize_i(o,v);
}

void WindowUI::cb_Maximize1_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxbottom";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize1_i(o,v);
}

void WindowUI::cb_Maximize2_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxleft";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize2(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize2_i(o,v);
}

void WindowUI::cb_Maximize3_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxright";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize3(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize3_i(o,v);
}

void WindowUI::cb_Maximize4_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxv";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize4(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize4_i(o,v);
}

void WindowUI::cb_Maximize5_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "maxh";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Maximize5(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Maximize5_i(o,v);
}

void WindowUI::cb_Send_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "sendu";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Send(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Send_i(o,v);
}

void WindowUI::cb_Send1_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "sendd";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Send1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Send1_i(o,v);
}

void WindowUI::cb_Send2_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "sendr";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Send2(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Send2_i(o,v);
}

void WindowUI::cb_Send3_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=230){
  const char * action = "sendl";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Send3(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Send3_i(o,v);
}

void WindowUI::cb_Restore_i(Fl_Menu_* o, void*) {
  if(JWMVERSION>=233){
  const char * action = "restore";
  menu_cb(action,value_1);
}
else{
  o->hide();
};
}
void WindowUI::cb_Restore(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Restore_i(o,v);
}

unsigned char WindowUI::menu_Button_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_Button[] = {
 {"move to the next window in the task list", 0,  (Fl_Callback*)WindowUI::cb_move, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the next window in the stacking order", 0,  (Fl_Callback*)WindowUI::cb_move1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the previous window in the task list", 0,  (Fl_Callback*)WindowUI::cb_move2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move to the previous window in the stacking order", 0,  (Fl_Callback*)WindowUI::cb_move3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"close window", 0,  (Fl_Callback*)WindowUI::cb_close, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"fullscreen window", 0,  (Fl_Callback*)WindowUI::cb_fullscreen, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"minimize window", 0,  (Fl_Callback*)WindowUI::cb_minimize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"maximize window", 0,  (Fl_Callback*)WindowUI::cb_maximize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"roll up window", 0,  (Fl_Callback*)WindowUI::cb_roll, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move window", 0,  (Fl_Callback*)WindowUI::cb_move4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"resize window", 0,  (Fl_Callback*)WindowUI::cb_resize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"show window menu", 0,  (Fl_Callback*)WindowUI::cb_show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Application menu", 0,  (Fl_Callback*)WindowUI::cb_Show, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Places Menu", 0,  (Fl_Callback*)WindowUI::cb_Show1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Shutdown menu", 0,  (Fl_Callback*)WindowUI::cb_Show2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop to the right", 0,  (Fl_Callback*)WindowUI::cb_move5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop to the left", 0,  (Fl_Callback*)WindowUI::cb_move6, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop up", 0,  (Fl_Callback*)WindowUI::cb_move7, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"move one desktop down", 0,  (Fl_Callback*)WindowUI::cb_move8, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"restart the Window Manager", 0,  (Fl_Callback*)WindowUI::cb_restart, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"exit the Window Manager", 0,  (Fl_Callback*)WindowUI::cb_exit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show any hidden Panels", 0,  (Fl_Callback*)WindowUI::cb_Show3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Top of the screen", 0,  (Fl_Callback*)WindowUI::cb_Maximize, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Bottom of the screen", 0,  (Fl_Callback*)WindowUI::cb_Maximize1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Left of the screen", 0,  (Fl_Callback*)WindowUI::cb_Maximize2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize to the Right of the screen", 0,  (Fl_Callback*)WindowUI::cb_Maximize3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize Vertical", 0,  (Fl_Callback*)WindowUI::cb_Maximize4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Maximize Horizontal", 0,  (Fl_Callback*)WindowUI::cb_Maximize5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Up a Desktop", 0,  (Fl_Callback*)WindowUI::cb_Send, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Down a Desktop", 0,  (Fl_Callback*)WindowUI::cb_Send1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Right a Desktop", 0,  (Fl_Callback*)WindowUI::cb_Send2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Send Window Left a Desktop", 0,  (Fl_Callback*)WindowUI::cb_Send3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Restore a minimized window", 0,  (Fl_Callback*)WindowUI::cb_Restore, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Cancel2_i(Fl_Button*, void*) {
  context_config->hide();
}
void WindowUI::cb_Cancel2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_Cancel2_i(o,v);
}

void WindowUI::cb_OK4_i(Fl_Button*, void*) {
  save_context();
saveChangesTemp();
context_config->hide();
}
void WindowUI::cb_OK4(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_OK4_i(o,v);
}

void WindowUI::cb_1_i(Fl_Button*, void*) {
  std::string program = choose_a_program();
if(program.compare("")==0){
  return;
}
program=addExecToLine(program);
value_1->value(program.c_str());
value_1->redraw();
}
void WindowUI::cb_1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_1_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_gear16[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,
2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,48,0,3,0,0,0,2,0,149,
0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,2,0,24,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,20,0,151,0,218,0,79,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,1,0,0,0,
69,0,193,0,96,0,2,0,0,0,0,0,0,0,0,0,0,0,22,0,156,0,251,0,255,0,221,0,75,0,22,0,
169,0,255,0,255,0,255,0,255,0,167,0,22,0,73,0,217,0,255,0,231,0,89,0,2,0,0,0,0,
0,0,0,24,0,162,0,252,0,255,0,255,0,255,0,224,0,199,0,245,0,255,0,255,0,255,0,
255,0,245,0,200,0,225,0,255,0,255,0,255,0,228,0,85,0,2,0,0,0,0,0,46,0,212,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,255,0,196,0,25,0,0,0,0,0,0,0,71,0,219,0,255,0,255,0,255,0,
255,0,255,0,246,0,209,0,172,0,172,0,209,0,246,0,255,0,255,0,255,0,255,0,255,0,
223,0,83,0,3,0,0,0,0,0,0,0,0,0,76,0,227,0,255,0,255,0,255,0,210,0,95,0,25,0,9,0,
10,0,25,0,95,0,210,0,255,0,255,0,255,0,225,0,77,0,1,0,0,0,0,0,2,0,2,0,0,0,23,0,
203,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,0,255,0,202,
0,23,0,0,0,2,0,2,0,147,0,149,0,148,0,169,0,246,0,255,0,246,0,94,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,169,0,148,0,149,0,147,0,254,0,255,
0,255,0,255,0,255,0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,
0,255,0,255,0,255,0,255,0,255,0,254,0,252,0,255,0,255,0,255,0,255,0,255,0,170,
0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,
252,0,252,0,255,0,255,0,255,0,255,0,255,0,170,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,252,0,254,0,255,0,255,0,255,0,255,
0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,0,255,0,255,0,255,
0,255,0,255,0,254,0,144,0,146,0,144,0,166,0,245,0,255,0,246,0,94,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,167,0,144,0,146,0,144,0,1,0,1,0,
0,0,36,0,220,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,
0,255,0,193,0,20,0,0,0,1,0,1,0,0,0,0,0,19,0,148,0,249,0,255,0,255,0,255,0,210,
0,95,0,25,0,9,0,10,0,25,0,95,0,210,0,255,0,255,0,255,0,187,0,26,0,0,0,0,0,0,0,
0,0,24,0,156,0,250,0,255,0,255,0,255,0,255,0,255,0,246,0,209,0,172,0,172,0,
209,0,246,0,255,0,255,0,255,0,255,0,253,0,162,0,23,0,0,0,0,0,0,0,96,0,246,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,253,0,142,0,6,0,0,0,0,0,22,0,158,0,252,0,255,0,255,0,250,
0,183,0,191,0,246,0,255,0,255,0,255,0,255,0,244,0,218,0,247,0,255,0,255,0,255,
0,229,0,90,0,2,0,0,0,0,0,0,0,23,0,163,0,253,0,251,0,156,0,22,0,20,0,169,0,255,
0,255,0,255,0,255,0,166,0,33,0,142,0,249,0,255,0,225,0,85,0,2,0,0,0,0,0,0,0,0,
0,0,0,26,0,164,0,149,0,20,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,0,0,
16,0,149,0,216,0,80,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,13,0,0,0,0,0,2,0,
149,0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,20,0,46,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_gear16(idata_gear16, 24, 24, 2, 0);

void WindowUI::cb_11_i(Fl_Menu_*, void*) {
  std::string value="1";
button->value(value.c_str());
}
void WindowUI::cb_11(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_11_i(o,v);
}

void WindowUI::cb_12_i(Fl_Menu_*, void*) {
  std::string value="-1";
button->value(value.c_str());
}
void WindowUI::cb_12(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_12_i(o,v);
}

void WindowUI::cb_111_i(Fl_Menu_*, void*) {
  std::string value="11";
button->value(value.c_str());
}
void WindowUI::cb_111(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_111_i(o,v);
}

void WindowUI::cb_2_i(Fl_Menu_*, void*) {
  std::string value="2";
button->value(value.c_str());
}
void WindowUI::cb_2(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void WindowUI::cb_21_i(Fl_Menu_*, void*) {
  std::string value="-2";
button->value(value.c_str());
}
void WindowUI::cb_21(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_21_i(o,v);
}

void WindowUI::cb_22_i(Fl_Menu_*, void*) {
  std::string value="22";
button->value(value.c_str());
}
void WindowUI::cb_22(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_22_i(o,v);
}

void WindowUI::cb_3_i(Fl_Menu_*, void*) {
  std::string value="3";
button->value(value.c_str());
}
void WindowUI::cb_3(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void WindowUI::cb_31_i(Fl_Menu_*, void*) {
  std::string value="-3";
button->value(value.c_str());
}
void WindowUI::cb_31(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_31_i(o,v);
}

void WindowUI::cb_33_i(Fl_Menu_*, void*) {
  std::string value="33";
button->value(value.c_str());
}
void WindowUI::cb_33(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_33_i(o,v);
}

void WindowUI::cb_4_i(Fl_Menu_*, void*) {
  std::string value="4";
button->value(value.c_str());
}
void WindowUI::cb_4(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_4_i(o,v);
}

void WindowUI::cb_5_i(Fl_Menu_*, void*) {
  std::string value="5";
button->value(value.c_str());
}
void WindowUI::cb_5(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->user_data()))->cb_5_i(o,v);
}

unsigned char WindowUI::menu_Button1_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_Button1[] = {
 {"1", 0,  (Fl_Callback*)WindowUI::cb_11, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"-1", 0,  (Fl_Callback*)WindowUI::cb_12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"11", 0,  (Fl_Callback*)WindowUI::cb_111, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2", 0,  (Fl_Callback*)WindowUI::cb_2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"-2", 0,  (Fl_Callback*)WindowUI::cb_21, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"22", 0,  (Fl_Callback*)WindowUI::cb_22, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"3", 0,  (Fl_Callback*)WindowUI::cb_3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"-3", 0,  (Fl_Callback*)WindowUI::cb_31, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"33", 0,  (Fl_Callback*)WindowUI::cb_33, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4", 0,  (Fl_Callback*)WindowUI::cb_4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"5", 0,  (Fl_Callback*)WindowUI::cb_5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Cancel3_i(Fl_Button*, void*) {
  theme_window->hide();
}
void WindowUI::cb_Cancel3(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel3_i(o,v);
}

void WindowUI::cb_OK5_i(Fl_Button*, void*) {
  if(!switchGTKTheme(theme_browser)){debug_out("Failed to change the GTK theme");}
theme_window->hide();
}
void WindowUI::cb_OK5(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK5_i(o,v);
}

void WindowUI::cb_a_title_color1_i(Fl_Button* o, void*) {
  set_one_title_color(o,1,max_a_image,max_image,min_image,close_image);
}
void WindowUI::cb_a_title_color1(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color1_i(o,v);
}

void WindowUI::cb_a_title_color2_i(Fl_Button* o, void*) {
  set_two_title_colors(o,1);
}
void WindowUI::cb_a_title_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_title_color2_i(o,v);
}

void WindowUI::cb_a_font_color_i(Fl_Button*, void*) {
  set_font_color(a_font_color, 1);
}
void WindowUI::cb_a_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_font_color_i(o,v);
}

void WindowUI::cb_a_border_color_i(Fl_Button* o, void*) {
  set_border_color(o,1,1);
}
void WindowUI::cb_a_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_border_color_i(o,v);
}

void WindowUI::cb_active_o_slider_i(Fl_Slider*, void*) {
  set_opacity(active_o_slider,active_o_slider_v,1);
}
void WindowUI::cb_active_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_i(o,v);
}

void WindowUI::cb_active_o_slider_v_i(Fl_Value_Input*, void*) {
  set_opacity(active_o_slider,active_o_slider_v,1);
}
void WindowUI::cb_active_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_active_o_slider_v_i(o,v);
}

void WindowUI::cb_inactive_color_i(Fl_Button* o, void*) {
  set_one_title_color(o,2);
}
void WindowUI::cb_inactive_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color_i(o,v);
}

void WindowUI::cb_inactive_color2_i(Fl_Button* o, void*) {
  set_two_title_colors(o, 2);
}
void WindowUI::cb_inactive_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_color2_i(o,v);
}

void WindowUI::cb_inactive_font_color_i(Fl_Button*, void*) {
  set_font_color(inactive_font_color, 2);
}
void WindowUI::cb_inactive_font_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_font_color_i(o,v);
}

void WindowUI::cb_inactive_border_color_i(Fl_Button* o, void*) {
  set_border_color(o,2,1);
}
void WindowUI::cb_inactive_border_color(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_border_color_i(o,v);
}

void WindowUI::cb_inactive_o_slider_i(Fl_Slider*, void*) {
  set_opacity(inactive_o_slider,inactive_o_slider_v,2);
}
void WindowUI::cb_inactive_o_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_i(o,v);
}

void WindowUI::cb_inactive_o_slider_v_i(Fl_Value_Input*, void*) {
  set_opacity(inactive_o_slider,inactive_o_slider_v,2);
}
void WindowUI::cb_inactive_o_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_o_slider_v_i(o,v);
}

void WindowUI::cb_max_a_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMaxActive");
get_button(o,"ButtonMaxActive",a_title_color1);
}
void WindowUI::cb_max_a_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_a_image_i(o,v);
}

void WindowUI::cb_max_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMax");
get_button(o,"ButtonMax",a_title_color1);
}
void WindowUI::cb_max_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_max_image_i(o,v);
}

void WindowUI::cb_min_image_i(Fl_Button* o, void*) {
  choose_button("ButtonMin");
get_button(o,"ButtonMin",a_title_color1);
}
void WindowUI::cb_min_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_min_image_i(o,v);
}

void WindowUI::cb_close_image_i(Fl_Button* o, void*) {
  choose_button("ButtonClose");
get_button(o,"ButtonClose",a_title_color1);
}
void WindowUI::cb_close_image(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_close_image_i(o,v);
}

void WindowUI::cb_inactive_border_color2_i(Fl_Button* o, void*) {
  set_border_color(o,2,2);
}
void WindowUI::cb_inactive_border_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inactive_border_color2_i(o,v);
}

void WindowUI::cb_a_border_color2_i(Fl_Button* o, void*) {
  set_border_color(o,1,2);
}
void WindowUI::cb_a_border_color2(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_border_color2_i(o,v);
}

void WindowUI::cb_button_actions_i(Fl_Button*, void*) {
  mouse_bindings_window()->show();
}
void WindowUI::cb_button_actions(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_actions_i(o,v);
}

void WindowUI::cb_button_order_i(Fl_Button*, void*) {
  button_order_window()->show();
}
void WindowUI::cb_button_order(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_order_i(o,v);
}

void WindowUI::cb_t_slider_i(Fl_Slider*, void*) {
  title_bar_modifier(t_slider,t_slider_v,2);
}
void WindowUI::cb_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_i(o,v);
}

void WindowUI::cb_t_slider_v_i(Fl_Value_Input*, void*) {
  title_bar_modifier(t_slider,t_slider_v,1);
}
void WindowUI::cb_t_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_t_slider_v_i(o,v);
}

void WindowUI::cb_b_slider_i(Fl_Slider* o, void*) {
  border_modifier(o,b_slider_v,2);
}
void WindowUI::cb_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_i(o,v);
}

void WindowUI::cb_b_slider_v_i(Fl_Value_Input* o, void*) {
  border_modifier(b_slider,o,1);
}
void WindowUI::cb_b_slider_v(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_slider_v_i(o,v);
}

void WindowUI::cb_Click_i(Fl_Menu_*, void*) {
  setThing("FocusModel","click");
}
void WindowUI::cb_Click(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Click_i(o,v);
}

void WindowUI::cb_Mouse_i(Fl_Menu_*, void*) {
  setThing("FocusModel","sloppy");
}
void WindowUI::cb_Mouse(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mouse_i(o,v);
}

void WindowUI::cb_Click1_i(Fl_Menu_*, void*) {
  setThing("FocusModel","clicktitle");
}
void WindowUI::cb_Click1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Click1_i(o,v);
}

void WindowUI::cb_Mouse1_i(Fl_Menu_*, void*) {
  setThing("FocusModel"," sloppytitle");
}
void WindowUI::cb_Mouse1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Mouse1_i(o,v);
}

unsigned char WindowUI::menu_focus_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_focus_menu[] = {
 {" Click to focus and raise.", 0,  (Fl_Callback*)WindowUI::cb_Click, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mouse over to focus. Click to raise.", 0,  (Fl_Callback*)WindowUI::cb_Mouse, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Click to focus. Click title or border to raise.", 0,  (Fl_Callback*)WindowUI::cb_Click1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Mouse over to focus. Click title or border to raise.", 0,  (Fl_Callback*)WindowUI::cb_Mouse1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Make_i(Fl_Menu_*, void*) {
  setThing("ResizeMode","opaque");
}
void WindowUI::cb_Make(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make_i(o,v);
}

void WindowUI::cb_Show4_i(Fl_Menu_*, void*) {
  setThing("ResizeMode","outline");
}
void WindowUI::cb_Show4(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show4_i(o,v);
}

unsigned char WindowUI::menu_resize_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_resize_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show4, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_Make1_i(Fl_Menu_*, void*) {
  setThing("MoveMode","opaque");
}
void WindowUI::cb_Make1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Make1_i(o,v);
}

void WindowUI::cb_Show5_i(Fl_Menu_*, void*) {
  setThing("MoveMode","outline");
}
void WindowUI::cb_Show5(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Show5_i(o,v);
}

unsigned char WindowUI::menu_move_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_move_menu[] = {
 {"Make it an Opaque box", 0,  (Fl_Callback*)WindowUI::cb_Make1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show an Outline only", 0,  (Fl_Callback*)WindowUI::cb_Show5, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_The_i(Fl_Menu_*, void*) {
  int i = snap_int->value();
const char *mode ="screen";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_The(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The_i(o,v);
}

void WindowUI::cb_The1_i(Fl_Menu_*, void*) {
  int i = snap_int->value();
const char *mode ="border";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_The1(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_The1_i(o,v);
}

void WindowUI::cb_No_i(Fl_Menu_*, void*) {
  int i = 0;
const char *mode ="none";
setThings("SnapMode",mode,i);
}
void WindowUI::cb_No(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_No_i(o,v);
}

unsigned char WindowUI::menu_snap_menu_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_snap_menu[] = {
 {"The Screen\'s Edges", 0,  (Fl_Callback*)WindowUI::cb_The, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"The Border of other Windows", 0,  (Fl_Callback*)WindowUI::cb_The1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"No snapping", 0,  (Fl_Callback*)WindowUI::cb_No, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void WindowUI::cb_snap_int_i(Fl_Value_Input* o, void*) {
  int d = o->value();
setSnap(d);
}
void WindowUI::cb_snap_int(Fl_Value_Input* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_snap_int_i(o,v);
}

void WindowUI::cb_corner_slider_i(Fl_Slider* o, void*) {
  corner_change(o);
}
void WindowUI::cb_corner_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_corner_slider_i(o,v);
}

void WindowUI::cb_groups_browser_i(Fl_Browser*, void*) {
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_groups_browser(Fl_Browser* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_groups_browser_i(o,v);
}

void WindowUI::cb_group_add_i(Fl_Button*, void*) {
  XplusG(groups_browser);
}
void WindowUI::cb_group_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_group_add_i(o,v);
}

void WindowUI::cb_rm_group_i(Fl_Button*, void*) {
  XminusG(groups_browser);
}
void WindowUI::cb_rm_group(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_group_i(o,v);
}

#include <FL/Fl_Bitmap.H>
static const unsigned char idata_minus[] =
{0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,
0,0,0};
static Fl_Bitmap image_minus(idata_minus, 16, 16);

void WindowUI::cb_opt_add_i(Fl_Button*, void*) {
  add_option_window()->show();
}
void WindowUI::cb_opt_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_opt_add_i(o,v);
}

void WindowUI::cb_rm_opt_i(Fl_Button*, void*) {
  if(XminusO(groups_browser,opt_browser)){
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
};
}
void WindowUI::cb_rm_opt(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_opt_i(o,v);
}

void WindowUI::cb_prog_add_i(Fl_Button*, void*) {
  if(XplusN(groups_browser)){
  add_program_window()->show();
};
}
void WindowUI::cb_prog_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_prog_add_i(o,v);
}

void WindowUI::cb_rm_prog_i(Fl_Button*, void*) {
  XminusN(groups_browser,name_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_rm_prog(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_prog_i(o,v);
}

void WindowUI::cb_class_add_i(Fl_Button*, void*) {
  if(XplusC(groups_browser)){
  add_class_window()->show();
};
}
void WindowUI::cb_class_add(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_class_add_i(o,v);
}

void WindowUI::cb_rm_class_i(Fl_Button*, void*) {
  XminusC(groups_browser,class_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}
void WindowUI::cb_rm_class(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rm_class_i(o,v);
}

void WindowUI::cb_a_b_slider_i(Fl_Slider* o, void*) {
  border_modifier(o,a_b_slider_v);
}
void WindowUI::cb_a_b_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_b_slider_i(o,v);
}

void WindowUI::cb_a_t_slider_i(Fl_Slider*, void*) {
  title_bar_modifier(a_t_slider,a_t_slider_v);
}
void WindowUI::cb_a_t_slider(Fl_Slider* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_a_t_slider_i(o,v);
}

void WindowUI::cb_default_icon_button_i(Fl_Button* o, void*) {
  std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  default_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
  if(!setElementText("ButtonMenu",icon)){
    errorOUT("Could not set default icon");
  }
};
}
void WindowUI::cb_default_icon_button(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_default_icon_button_i(o,v);
}

void WindowUI::cb_default_icon_button_win_i(Fl_Button* o, void*) {
  std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  default_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
  if(!setElementText("DefaultIcon",icon)){
    errorOUT("Could not set default icon");
  }
};
}
void WindowUI::cb_default_icon_button_win(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_default_icon_button_win_i(o,v);
}

void WindowUI::cb_motif_i(Fl_Menu_*, void*) {
  std::string decor="motif";
if(!setElementAttribute("WindowStyle","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations->value(decor.c_str());decorations->redraw();
}
void WindowUI::cb_motif(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_motif_i(o,v);
}

void WindowUI::cb_flat_i(Fl_Menu_*, void*) {
  std::string decor="flat";
if(!setElementAttribute("WindowStyle","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations->value(decor.c_str());decorations->redraw();
}
void WindowUI::cb_flat(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_flat_i(o,v);
}

unsigned char WindowUI::menu_title_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_title[] = {
 {"motif", 0,  (Fl_Callback*)WindowUI::cb_motif, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"flat", 0,  (Fl_Callback*)WindowUI::cb_flat, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* WindowUI::motif = WindowUI::menu_title + 0;
Fl_Menu_Item* WindowUI::flat = WindowUI::menu_title + 1;

void WindowUI::cb_motif_border_i(Fl_Menu_*, void*) {
  std::string decor="motif";
if(!setElementAttribute("WindowStyle","Outline","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations_border->value(decor.c_str());
decorations_border->redraw();
}
void WindowUI::cb_motif_border(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_motif_border_i(o,v);
}

void WindowUI::cb_flat_border_i(Fl_Menu_*, void*) {
  std::string decor="flat";
if(!setElementAttribute("WindowStyle","Outline","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations_border->value(decor.c_str());
decorations_border->redraw();
}
void WindowUI::cb_flat_border(Fl_Menu_* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_flat_border_i(o,v);
}

unsigned char WindowUI::menu_border_i18n_done = 0;
Fl_Menu_Item WindowUI::menu_border[] = {
 {"motif", 0,  (Fl_Callback*)WindowUI::cb_motif_border, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"flat", 0,  (Fl_Callback*)WindowUI::cb_flat_border, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* WindowUI::motif_border = WindowUI::menu_border + 0;
Fl_Menu_Item* WindowUI::flat_border = WindowUI::menu_border + 1;

void WindowUI::cb_Cancel4_i(Fl_Button*, void*) {
  window_window->hide();
cancel();
//showSettings();
}
void WindowUI::cb_Cancel4(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel4_i(o,v);
}

void WindowUI::cb_OK6_i(Fl_Button*, void*) {
  saveChanges();
quit();
}
void WindowUI::cb_OK6(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK6_i(o,v);
}

void WindowUI::cb_Change_i(Fl_Button*, void*) {
  make_gtk_theme_window()->show();
}
void WindowUI::cb_Change(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Change_i(o,v);
}

void WindowUI::cb_context_close_i(Fl_Button*, void*) {
  context="close";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_close(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_close_i(o,v);
}

void WindowUI::cb_context_minimize_i(Fl_Button*, void*) {
  context="minimize";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_minimize(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_minimize_i(o,v);
}

void WindowUI::cb_context_maximize_i(Fl_Button*, void*) {
  context="maximize";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_maximize(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_maximize_i(o,v);
}

void WindowUI::cb_context_title_i(Fl_Button*, void*) {
  context="title";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_title(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_title_i(o,v);
}

void WindowUI::cb_context_icon_i(Fl_Button*, void*) {
  context="icon";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_icon(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_icon_i(o,v);
}

void WindowUI::cb_context_border_i(Fl_Button*, void*) {
  context="border";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_border(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_border_i(o,v);
}

void WindowUI::cb_context_root_i(Fl_Button*, void*) {
  context="root";
populateMouseContext(context_browser,context);
}
void WindowUI::cb_context_root(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_root_i(o,v);
}

void WindowUI::cb_context_browser_i(Fl_Browser* o, void*) {
  browser_line=o->text(o->value());
}
void WindowUI::cb_context_browser(Fl_Browser* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_context_browser_i(o,v);
}

void WindowUI::cb_6_i(Fl_Button*, void*) {
  if(!checkFlBrowserItem(context_browser))return;
configure_context()->show();
}
void WindowUI::cb_6(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_6_i(o,v);
}

void WindowUI::cb_7_i(Fl_Button*, void*) {
  if(!checkFlBrowserItem(context_browser))return;
}
void WindowUI::cb_7(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_7_i(o,v);
}

void WindowUI::cb_Cancel5_i(Fl_Button*, void*) {
  action_window->hide();
}
void WindowUI::cb_Cancel5(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_Cancel5_i(o,v);
}

void WindowUI::cb_OK7_i(Fl_Button*, void*) {
  action_window->hide();
saveChanges();
}
void WindowUI::cb_OK7(Fl_Button* o, void* v) {
  ((WindowUI*)(o->parent()->parent()->user_data()))->cb_OK7_i(o,v);
}

Fl_Double_Window* WindowUI::add_option_window() {
  { Fl_Double_Window* o = add_opt_window = new Fl_Double_Window(500, 280, gettext("Add an Option"));
    add_opt_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 500, 280);
      { Fl_Browser* o = options_available = new Fl_Browser(10, 10, 115, 195);
        options_available->type(2);
        options_available->box(FL_FLAT_BOX);
        options_available->selection_color((Fl_Color)80);
        options_available->callback((Fl_Callback*)cb_options_available);
        populateOptions(o);
      } // Fl_Browser* options_available
      { Fl_Browser* o = options_desc = new Fl_Browser(135, 10, 360, 195);
        options_desc->type(2);
        options_desc->box(FL_FLAT_BOX);
        options_desc->selection_color((Fl_Color)80);
        options_desc->labeltype(FL_NO_LABEL);
        options_desc->align(Fl_Align(FL_ALIGN_TOP));
        populateDesc(o);
      } // Fl_Browser* options_desc
      { icon_value = new Fl_Input(65, 210, 100, 25, gettext("Icon"));
        icon_value->tooltip(gettext("The Icon Name"));
        icon_value->box(FL_FLAT_BOX);
        icon_value->align(Fl_Align(FL_ALIGN_RIGHT));
        icon_value->deactivate();
      } // Fl_Input* icon_value
      { opacity_value = new Fl_Slider(335, 210, 100, 25, gettext("Opacity"));
        opacity_value->type(1);
        opacity_value->box(FL_GTK_DOWN_BOX);
        opacity_value->color((Fl_Color)41);
        opacity_value->step(0.2);
        opacity_value->value(1);
        opacity_value->align(Fl_Align(FL_ALIGN_RIGHT));
        opacity_value->deactivate();
      } // Fl_Slider* opacity_value
      { desktop_num = new Fl_Value_Input(205, 210, 35, 25);
        desktop_num->box(FL_FLAT_BOX);
        desktop_num->maximum(10000);
        desktop_num->align(Fl_Align(FL_ALIGN_RIGHT));
        desktop_num->deactivate();
      } // Fl_Value_Input* desktop_num
      { Fl_Button* o = new Fl_Button(370, 245, 55, 25, gettext("Cancel"));
        o->tooltip(gettext("Cancel changes"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(430, 245, 45, 25, gettext("OK"));
        o->tooltip(gettext("Save Changes"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      { layer_chooser = new Fl_Menu_Button(65, 240, 100, 25, gettext("Layer"));
        layer_chooser->tooltip(gettext("Choose a layer"));
        layer_chooser->box(FL_FLAT_BOX);
        layer_chooser->color((Fl_Color)23);
        layer_chooser->deactivate();
        if (!menu_layer_chooser_i18n_done) {
          int i=0;
          for ( ; i<3; i++)
            if (menu_layer_chooser[i].label())
              menu_layer_chooser[i].label(gettext(menu_layer_chooser[i].label()));
          menu_layer_chooser_i18n_done = 1;
        }
        layer_chooser->menu(menu_layer_chooser);
      } // Fl_Menu_Button* layer_chooser
      { layer_value = new Fl_Output(170, 240, 100, 25);
        layer_value->tooltip(gettext("The layer this option effects"));
        layer_value->box(FL_FLAT_BOX);
        layer_value->deactivate();
      } // Fl_Output* layer_value
      { Fl_Button* o = new Fl_Button(10, 210, 50, 50);
        o->tooltip(gettext("Choose an Icon"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Scroll* o
    startup(o,jsm_windows_xpm);
    add_opt_window->xclass("jsm-windows");
    add_opt_window->end();
  } // Fl_Double_Window* add_opt_window
  return add_opt_window;
}

Fl_Double_Window* WindowUI::add_class_window() {
  { Fl_Double_Window* o = class_win = new Fl_Double_Window(375, 50, gettext("Add Class"));
    class_win->user_data((void*)(this));
    { input_to_add_class = new Fl_Input(105, 10, 195, 25, gettext("Class to Add"));
      input_to_add_class->box(FL_FLAT_BOX);
    } // Fl_Input* input_to_add_class
    { Fl_Button* o = new Fl_Button(315, 10, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    startup(o,jsm_windows_xpm);
    class_win->xclass("jsm-windows");
    class_win->end();
  } // Fl_Double_Window* class_win
  return class_win;
}

Fl_Double_Window* WindowUI::add_program_window() {
  { Fl_Double_Window* o = prog_win = new Fl_Double_Window(380, 40, gettext("Program to add"));
    prog_win->user_data((void*)(this));
    { input_to_add_prog = new Fl_Input(115, 10, 195, 25);
      input_to_add_prog->box(FL_FLAT_BOX);
    } // Fl_Input* input_to_add_prog
    { Fl_Button* o = new Fl_Button(320, 10, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(10, 10, 95, 25, gettext("Program @+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Program);
    } // Fl_Button* o
    startup(o,jsm_windows_xpm);
    prog_win->xclass("jsm-windows");
    prog_win->end();
  } // Fl_Double_Window* prog_win
  return prog_win;
}

Fl_Double_Window* WindowUI::button_order_window() {
  { button_orderer = new Fl_Double_Window(225, 165);
    button_orderer->user_data((void*)(this));
    { Fl_Input* o = ordering = new Fl_Input(25, 15, 190, 25, gettext("m Maximize button\ni Minimize (iconify) button\nt Window title\nw Window menu\
 button\nx Close button"));
      ordering->tooltip(gettext("Title Button Order\n\nm Maximize button\ni Minimize (iconify) button\nt Windo\
w title\nw Window menu button\nx Close button"));
      ordering->box(FL_FLAT_BOX);
      ordering->selection_color((Fl_Color)80);
      ordering->align(Fl_Align(FL_ALIGN_BOTTOM));
      std::string val=getElementText("TitleButtonOrder");
      if(val.compare("")==0){val="wtimx";}
      o->value(val.c_str());
    } // Fl_Input* ordering
    { Fl_Button* o = new Fl_Button(60, 125, 55, 25, gettext("Cancel"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(125, 125, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK3);
    } // Fl_Button* o
    button_orderer->end();
  } // Fl_Double_Window* button_orderer
  return button_orderer;
}

Fl_Double_Window* WindowUI::configure_context() {
  { context_config = new Fl_Double_Window(310, 155, gettext("Configure Item"));
    context_config->user_data((void*)(this));
    { Fl_Menu_Button* o = new Fl_Menu_Button(10, 80, 135, 30, gettext("Button Action"));
      o->tooltip(gettext("Typically the left button"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color((Fl_Color)80);
      if (!menu_Button_i18n_done) {
        int i=0;
        for ( ; i<33; i++)
          if (menu_Button[i].label())
            menu_Button[i].label(gettext(menu_Button[i].label()));
        menu_Button_i18n_done = 1;
      }
      o->menu(menu_Button);
    } // Fl_Menu_Button* o
    { Fl_Output* o = button = new Fl_Output(95, 45, 50, 30);
      button->tooltip(gettext("The mouse button you click"));
      button->box(FL_FLAT_BOX);
      button->selection_color(FL_DARK_RED);
      o->value(getTabItem(0,browser_line).c_str());
    } // Fl_Output* button
    { Fl_Output* o = context_button = new Fl_Output(135, 10, 170, 30, gettext("Item to configure"));
      context_button->tooltip(gettext("The part of the window you click"));
      context_button->box(FL_FLAT_BOX);
      context_button->selection_color(FL_DARK_RED);
      o->value(context.c_str());
    } // Fl_Output* context_button
    { Fl_Button* o = new Fl_Button(195, 120, 55, 25, gettext("Cancel"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(260, 120, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK4);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(110, 115, 35, 35);
      o->tooltip(gettext("Choose a program"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->image(image_gear16);
      o->callback((Fl_Callback*)cb_1);
      o->align(Fl_Align(256));
    } // Fl_Button* o
    { new Fl_Box(15, 115, 90, 35, gettext("OR program"));
    } // Fl_Box* o
    { Fl_Menu_Button* o = new Fl_Menu_Button(10, 45, 80, 30, gettext("Button"));
      o->tooltip(gettext("Negative values are for Button Release, positive are for Click.  Double value\
s are Double Click."));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color(FL_DARK_RED);
      if (!menu_Button1_i18n_done) {
        int i=0;
        for ( ; i<11; i++)
          if (menu_Button1[i].label())
            menu_Button1[i].label(gettext(menu_Button1[i].label()));
        menu_Button1_i18n_done = 1;
      }
      o->menu(menu_Button1);
    } // Fl_Menu_Button* o
    { Fl_Input* o = value_1 = new Fl_Input(155, 80, 150, 30);
      value_1->tooltip(gettext("The action to perform"));
      value_1->box(FL_FLAT_BOX);
      value_1->selection_color(FL_DARK_RED);
      o->value(getTabItem(1,browser_line).c_str());
    } // Fl_Input* value_1
    { Fl_Input* o = mask = new Fl_Input(250, 45, 55, 30, gettext("Modifier"));
      mask->tooltip(gettext("The modifier key"));
      mask->box(FL_FLAT_BOX);
      mask->selection_color(FL_DARK_RED);
      o->value(getTabItem(2,browser_line).c_str());
    } // Fl_Input* mask
    context_config->end();
  } // Fl_Double_Window* context_config
  return context_config;
}

Fl_Double_Window* WindowUI::make_gtk_theme_window() {
  { theme_window = new Fl_Double_Window(310, 265, gettext("Widget theme"));
    theme_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 310, 265);
      { Fl_Browser* o = theme_browser = new Fl_Browser(5, 5, 300, 190, gettext("You will need to close any open windows to see the change"));
        theme_browser->tooltip(gettext("You will need to close any open windows to see the change"));
        theme_browser->type(2);
        theme_browser->box(FL_FLAT_BOX);
        theme_browser->selection_color((Fl_Color)80);
        theme_browser->align(Fl_Align(130));
        populateGTKThemes(o);
      } // Fl_Browser* theme_browser
      { Fl_Button* o = new Fl_Button(190, 240, 55, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(255, 240, 45, 25, gettext("OK"));
        o->tooltip(gettext("You will need to close any open windows to see the change"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK5);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    theme_window->end();
  } // Fl_Double_Window* theme_window
  return theme_window;
}

Fl_Double_Window* WindowUI::make_window() {
  if(!load()){debug_out("DIDN'T LOAD in jwm-window");}
  JWMVERSION=JWMversion();
  { Fl_Double_Window* o = window_window = new Fl_Double_Window(510, 310, gettext("Window Settings"));
    window_window->color(FL_DARK1);
    window_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 510, 315);
      o->color((Fl_Color)31);
      { Fl_Tabs* o = new Fl_Tabs(0, 0, 510, 280);
        o->box(FL_FLAT_BOX);
        o->color(FL_DARK2);
        o->selection_color((Fl_Color)51);
        { Fl_Group* o = new Fl_Group(0, 30, 510, 250, gettext("Appearance"));
          o->selection_color(FL_DARK2);
          { Fl_Box* o = new Fl_Box(0, 35, 255, 160);
            o->tooltip(gettext("The  color  of  the  title bar (gradients are supported).  The default is #CC\
7700:#884400."));
            o->box(FL_FLAT_BOX);
            o->color(FL_DARK1);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(60, 35, 160, 25, gettext("Active Window"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
            o->align(Fl_Align(384));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(39, 75, 60, 25, gettext("Title bar"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_title_color1 = new Fl_Button(108, 75, 60, 25, gettext("Color 1"));
            a_title_color1->tooltip(gettext("The  color  of  the  title bar (gradients are supported).  The default is #CC\
7700:#884400."));
            a_title_color1->box(FL_FLAT_BOX);
            a_title_color1->color((Fl_Color)23);
            a_title_color1->callback((Fl_Callback*)cb_a_title_color1);
            a_title_color1->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            active_color_loader(o,1);
          } // Fl_Button* a_title_color1
          { Fl_Button* o = a_title_color2 = new Fl_Button(173, 75, 60, 25, gettext("Color 2"));
            a_title_color2->tooltip(gettext("The color of the text and  buttons  in  the  title bar.  The default is white\
."));
            a_title_color2->box(FL_FLAT_BOX);
            a_title_color2->color((Fl_Color)23);
            a_title_color2->callback((Fl_Callback*)cb_a_title_color2);
            a_title_color2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            active_color_loader(o,2);
          } // Fl_Button* a_title_color2
          { Fl_Box* o = new Fl_Box(22, 105, 80, 25, gettext("Font Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_font_color = new Fl_Button(108, 105, 60, 25);
            a_font_color->tooltip(gettext("The color of the text and  buttons  in  the  title bar.  The default is white\
."));
            a_font_color->box(FL_FLAT_BOX);
            a_font_color->color((Fl_Color)23);
            a_font_color->callback((Fl_Callback*)cb_a_font_color);
            a_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            font_color_loader(o,1);
          } // Fl_Button* a_font_color
          { Fl_Box* o = new Fl_Box(5, 135, 100, 25, gettext("Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = a_border_color = new Fl_Button(108, 135, 60, 25);
            a_border_color->tooltip(gettext("The color of the window outline.  The default is a darkened version of  the  \
window  background."));
            a_border_color->box(FL_FLAT_BOX);
            a_border_color->color((Fl_Color)23);
            a_border_color->callback((Fl_Callback*)cb_a_border_color);
            a_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            border_color_loader(o,1,1);
          } // Fl_Button* a_border_color
          { Fl_Slider* o = active_o_slider = new Fl_Slider(108, 165, 90, 25, gettext("Opacity  "));
            active_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            active_o_slider->type(1);
            active_o_slider->box(FL_GTK_DOWN_BOX);
            active_o_slider->color((Fl_Color)41);
            active_o_slider->selection_color((Fl_Color)29);
            active_o_slider->step(0.01);
            active_o_slider->value(1);
            active_o_slider->callback((Fl_Callback*)cb_active_o_slider);
            active_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            active_o_slider->when(3);
            opacity_loader(o,1);
          } // Fl_Slider* active_o_slider
          { Fl_Value_Input* o = active_o_slider_v = new Fl_Value_Input(203, 165, 35, 25, gettext("%"));
            active_o_slider_v->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            active_o_slider_v->box(FL_FLAT_BOX);
            active_o_slider_v->selection_color((Fl_Color)80);
            active_o_slider_v->labelsize(10);
            active_o_slider_v->callback((Fl_Callback*)cb_active_o_slider_v);
            active_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            active_o_slider_v->when(3);
            float v = active_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* active_o_slider_v
          { Fl_Box* o = new Fl_Box(255, 35, 255, 160);
            o->box(FL_FLAT_BOX);
            o->color(FL_DARK2);
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(270, 35, 220, 25, gettext("Background  Window"));
            o->labelfont(1);
            o->labelcolor(FL_GRAY0);
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(281, 80, 70, 25, gettext("Title bar"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_color = new Fl_Button(360, 75, 60, 25, gettext("Color 1"));
            inactive_color->tooltip(gettext("The color of the title bar (gradients are  supported)  of inactive windows.  \
The default is #333333:#111111."));
            inactive_color->box(FL_FLAT_BOX);
            inactive_color->color((Fl_Color)23);
            inactive_color->callback((Fl_Callback*)cb_inactive_color);
            inactive_color->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inactive_color->when(FL_WHEN_RELEASE_ALWAYS);
            inactive_color_loader(o,1);
          } // Fl_Button* inactive_color
          { Fl_Button* o = inactive_color2 = new Fl_Button(425, 75, 60, 25, gettext("Color 2"));
            inactive_color2->tooltip(gettext("The color of the title bar (gradients are  supported)  of inactive windows.  \
The default is #333333:#111111."));
            inactive_color2->box(FL_FLAT_BOX);
            inactive_color2->color((Fl_Color)23);
            inactive_color2->callback((Fl_Callback*)cb_inactive_color2);
            inactive_color2->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inactive_color2->when(FL_WHEN_RELEASE_ALWAYS);
            inactive_color_loader(o,1);
          } // Fl_Button* inactive_color2
          { Fl_Box* o = new Fl_Box(263, 107, 95, 25, gettext("Font Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_font_color = new Fl_Button(360, 105, 60, 25);
            inactive_font_color->tooltip(gettext("The color of the text and  buttons  in  the  title bar of inactive windows.  \
The default is white."));
            inactive_font_color->box(FL_FLAT_BOX);
            inactive_font_color->color((Fl_Color)23);
            inactive_font_color->callback((Fl_Callback*)cb_inactive_font_color);
            inactive_font_color->when(FL_WHEN_RELEASE_ALWAYS);
            font_color_loader(o,2);
          } // Fl_Button* inactive_font_color
          { Fl_Box* o = new Fl_Box(257, 135, 90, 25, gettext("Border Color"));
            o->labelcolor((Fl_Color)35);
          } // Fl_Box* o
          { Fl_Button* o = inactive_border_color = new Fl_Button(360, 135, 60, 25);
            inactive_border_color->tooltip(gettext("The color of the window  outline  for  inactive  windows. The  default  is  a\
  darkened version of the window background."));
            inactive_border_color->box(FL_FLAT_BOX);
            inactive_border_color->color((Fl_Color)23);
            inactive_border_color->callback((Fl_Callback*)cb_inactive_border_color);
            inactive_border_color->when(FL_WHEN_RELEASE_ALWAYS);
            border_color_loader(o,2,1);
          } // Fl_Button* inactive_border_color
          { Fl_Slider* o = inactive_o_slider = new Fl_Slider(355, 165, 90, 25, gettext("Opacity "));
            inactive_o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            inactive_o_slider->type(1);
            inactive_o_slider->box(FL_GTK_DOWN_BOX);
            inactive_o_slider->color((Fl_Color)41);
            inactive_o_slider->selection_color((Fl_Color)29);
            inactive_o_slider->step(0.01);
            inactive_o_slider->value(1);
            inactive_o_slider->callback((Fl_Callback*)cb_inactive_o_slider);
            inactive_o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            inactive_o_slider->when(3);
            opacity_loader(o,2);
          } // Fl_Slider* inactive_o_slider
          { Fl_Value_Input* o = inactive_o_slider_v = new Fl_Value_Input(450, 165, 35, 25, gettext("%"));
            inactive_o_slider_v->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            inactive_o_slider_v->box(FL_FLAT_BOX);
            inactive_o_slider_v->selection_color((Fl_Color)80);
            inactive_o_slider_v->labelsize(10);
            inactive_o_slider_v->callback((Fl_Callback*)cb_inactive_o_slider_v);
            inactive_o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            inactive_o_slider_v->when(3);
            float v = inactive_o_slider->value();
            o->value(v*100);
          } // Fl_Value_Input* inactive_o_slider_v
          { Fl_Box* o = new Fl_Box(0, 200, 115, 80, gettext("Change the Window Button Images"));
            o->labelfont(1);
            o->labelcolor((Fl_Color)35);
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(175, 240, 70, 40, gettext(" Maximize (Activated)"));
            o->align(Fl_Align(FL_ALIGN_WRAP));
          } // Fl_Box* o
          { Fl_Button* o = max_a_image = new Fl_Button(115, 200, 40, 40);
            max_a_image->tooltip(gettext("Choose an icon to display for the minimize button on client windows instead o\
f the default."));
            max_a_image->box(FL_FLAT_BOX);
            max_a_image->color((Fl_Color)23);
            max_a_image->callback((Fl_Callback*)cb_max_a_image);
            max_a_image->align(Fl_Align(256));
            get_button(o,"ButtonMaxActive",a_title_color1);
          } // Fl_Button* max_a_image
          { new Fl_Box(240, 245, 90, 15, gettext(" Maximize"));
          } // Fl_Box* o
          { Fl_Button* o = max_image = new Fl_Button(186, 200, 40, 40);
            max_image->tooltip(gettext("Choose an icon to display for the maximize button on maximized client windows\
 instead of the default."));
            max_image->box(FL_FLAT_BOX);
            max_image->color((Fl_Color)23);
            max_image->callback((Fl_Callback*)cb_max_image);
            max_image->align(Fl_Align(256));
            get_button(o,"ButtonMax",a_title_color1);
          } // Fl_Button* max_image
          { new Fl_Box(95, 247, 90, 16, gettext(" Minimize"));
          } // Fl_Box* o
          { Fl_Button* o = min_image = new Fl_Button(258, 200, 40, 40);
            min_image->tooltip(gettext("Choose an icon to display for the maximize button on client windows instead o\
f the default."));
            min_image->box(FL_FLAT_BOX);
            min_image->color((Fl_Color)23);
            min_image->callback((Fl_Callback*)cb_min_image);
            min_image->align(Fl_Align(256));
            get_button(o,"ButtonMin",a_title_color1);
          } // Fl_Button* min_image
          { new Fl_Box(315, 243, 70, 17, gettext(" Close"));
          } // Fl_Box* o
          { Fl_Button* o = close_image = new Fl_Button(330, 200, 40, 40);
            close_image->tooltip(gettext("Choose an icon to display for the close button on client windows instead of t\
he default."));
            close_image->box(FL_FLAT_BOX);
            close_image->color((Fl_Color)23);
            close_image->callback((Fl_Callback*)cb_close_image);
            close_image->align(Fl_Align(256));
            get_button(o,"ButtonClose",a_title_color1);
          } // Fl_Button* close_image
          { Fl_Button* o = inactive_border_color2 = new Fl_Button(425, 135, 60, 25);
            inactive_border_color2->tooltip(gettext("If motif window decorations are  specified,  two colors  may  be  given separ\
ated by a \':\' to set the down and up colors respetively."));
            inactive_border_color2->box(FL_FLAT_BOX);
            inactive_border_color2->color((Fl_Color)23);
            inactive_border_color2->callback((Fl_Callback*)cb_inactive_border_color2);
            inactive_border_color2->when(FL_WHEN_RELEASE_ALWAYS);
            if(secondColor(o)){border_color_loader(o,2,2);}
          } // Fl_Button* inactive_border_color2
          { Fl_Button* o = a_border_color2 = new Fl_Button(175, 135, 60, 25);
            a_border_color2->tooltip(gettext("If motif window decorations are  specified,  two colors  may  be  given separ\
ated by a \':\' to set the down and up colors respetively."));
            a_border_color2->box(FL_FLAT_BOX);
            a_border_color2->color((Fl_Color)23);
            a_border_color2->callback((Fl_Callback*)cb_a_border_color2);
            a_border_color2->when(FL_WHEN_RELEASE_ALWAYS);
            if(secondColor(o)){border_color_loader(o,1,2);}
          } // Fl_Button* a_border_color2
          { Fl_Button* o = button_actions = new Fl_Button(385, 240, 110, 35, gettext("Button Actions"));
            button_actions->tooltip(gettext("Configure buttons for many features"));
            button_actions->box(FL_FLAT_BOX);
            button_actions->color((Fl_Color)23);
            button_actions->callback((Fl_Callback*)cb_button_actions);
            button_actions->align(Fl_Align(256));
            hideWidgetForVersion(o,240);
          } // Fl_Button* button_actions
          { Fl_Button* o = button_order = new Fl_Button(385, 200, 110, 35, gettext("Button Order"));
            button_order->tooltip(gettext("Choose an icon to display for the close button on client windows instead of t\
he default."));
            button_order->box(FL_FLAT_BOX);
            button_order->color((Fl_Color)23);
            button_order->callback((Fl_Callback*)cb_button_order);
            button_order->align(Fl_Align(256));
            hideWidgetForVersion(o,240);
          } // Fl_Button* button_order
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 35, 485, 245, gettext("Settings"));
          o->selection_color(FL_DARK2);
          o->hide();
          { Fl_Slider* o = t_slider = new Fl_Slider(205, 35, 125, 25, gettext("Window Title Bar Size"));
            t_slider->tooltip(gettext("This is the top with the program name, and close button, etc.."));
            t_slider->type(1);
            t_slider->box(FL_GTK_DOWN_BOX);
            t_slider->color((Fl_Color)41);
            t_slider->selection_color(FL_LIGHT1);
            t_slider->minimum(2);
            t_slider->maximum(78);
            t_slider->step(1);
            t_slider->value(20);
            t_slider->callback((Fl_Callback*)cb_t_slider);
            t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            t_slider->when(3);
            int y = getBorderHeight();
            o->value(y);
          } // Fl_Slider* t_slider
          { Fl_Value_Input* o = t_slider_v = new Fl_Value_Input(340, 35, 31, 25, gettext("pixels"));
            t_slider_v->tooltip(gettext("This is the top with the program name, and close button, etc.."));
            t_slider_v->box(FL_FLAT_BOX);
            t_slider_v->labelsize(10);
            t_slider_v->callback((Fl_Callback*)cb_t_slider_v);
            t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            t_slider_v->when(3);
            int v = t_slider->value();
            o->value(v);
          } // Fl_Value_Input* t_slider_v
          { Fl_Slider* o = b_slider = new Fl_Slider(205, 65, 125, 25, gettext("Size of the Window Frame"));
            b_slider->tooltip(gettext("This makes the edges of the window larger or smaller to help you grab them mo\
re easily"));
            b_slider->type(1);
            b_slider->box(FL_GTK_DOWN_BOX);
            b_slider->color((Fl_Color)41);
            b_slider->selection_color(FL_LIGHT1);
            b_slider->minimum(1);
            b_slider->maximum(28);
            b_slider->step(1);
            b_slider->value(4);
            b_slider->callback((Fl_Callback*)cb_b_slider);
            b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            b_slider->when(3);
            int x = getBorderWidth();
            o->value(x);
          } // Fl_Slider* b_slider
          { Fl_Value_Input* o = b_slider_v = new Fl_Value_Input(340, 65, 31, 25, gettext("pixels"));
            b_slider_v->tooltip(gettext("This makes the edges of the window larger or smaller to help you grab them mo\
re easily"));
            b_slider_v->box(FL_FLAT_BOX);
            b_slider_v->labelsize(10);
            b_slider_v->callback((Fl_Callback*)cb_b_slider_v);
            b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            b_slider_v->when(3);
            int v = b_slider->value();
            o->value(v);
          } // Fl_Value_Input* b_slider_v
          { focus_menu = new Fl_Menu_Button(20, 125, 450, 25, gettext("Choose how the Window comes to the front of the screen"));
            focus_menu->tooltip(gettext("This determines how windows are brought to the front"));
            focus_menu->box(FL_FLAT_BOX);
            focus_menu->color((Fl_Color)23);
            focus_menu->selection_color(FL_DARK_RED);
            focus_menu->labelcolor((Fl_Color)35);
            focus_menu->textcolor((Fl_Color)35);
            { Fl_Menu_Item* o = &menu_focus_menu[2];
              if(JWMVERSION<237)o->hide();
            }
            { Fl_Menu_Item* o = &menu_focus_menu[3];
              if(JWMVERSION<237)o->hide();
            }
            if (!menu_focus_menu_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_focus_menu[i].label())
                  menu_focus_menu[i].label(gettext(menu_focus_menu[i].label()));
              menu_focus_menu_i18n_done = 1;
            }
            focus_menu->menu(menu_focus_menu);
          } // Fl_Menu_Button* focus_menu
          { resize_menu = new Fl_Menu_Button(20, 155, 450, 25, gettext("Appearance of the Window while Resizing"));
            resize_menu->tooltip(gettext("What the windows look like while resizing"));
            resize_menu->box(FL_FLAT_BOX);
            resize_menu->color((Fl_Color)23);
            resize_menu->selection_color(FL_DARK_RED);
            resize_menu->labelcolor((Fl_Color)35);
            resize_menu->textcolor((Fl_Color)35);
            if (!menu_resize_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_resize_menu[i].label())
                  menu_resize_menu[i].label(gettext(menu_resize_menu[i].label()));
              menu_resize_menu_i18n_done = 1;
            }
            resize_menu->menu(menu_resize_menu);
          } // Fl_Menu_Button* resize_menu
          { move_menu = new Fl_Menu_Button(20, 185, 450, 25, gettext("Appearance of Window while Moving"));
            move_menu->tooltip(gettext("What the windows look like while moving"));
            move_menu->box(FL_FLAT_BOX);
            move_menu->color((Fl_Color)23);
            move_menu->selection_color(FL_DARK_RED);
            move_menu->labelcolor((Fl_Color)35);
            move_menu->textcolor((Fl_Color)35);
            if (!menu_move_menu_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_move_menu[i].label())
                  menu_move_menu[i].label(gettext(menu_move_menu[i].label()));
              menu_move_menu_i18n_done = 1;
            }
            move_menu->menu(menu_move_menu);
          } // Fl_Menu_Button* move_menu
          { snap_menu = new Fl_Menu_Button(20, 215, 450, 25, gettext("Choose what the Windows will snap to"));
            snap_menu->tooltip(gettext("This determines how windows \'Snap\' to other windows, and screen edges"));
            snap_menu->box(FL_FLAT_BOX);
            snap_menu->color((Fl_Color)23);
            snap_menu->selection_color(FL_DARK_RED);
            snap_menu->labelcolor((Fl_Color)35);
            snap_menu->textcolor((Fl_Color)35);
            if (!menu_snap_menu_i18n_done) {
              int i=0;
              for ( ; i<3; i++)
                if (menu_snap_menu[i].label())
                  menu_snap_menu[i].label(gettext(menu_snap_menu[i].label()));
              menu_snap_menu_i18n_done = 1;
            }
            snap_menu->menu(menu_snap_menu);
          } // Fl_Menu_Button* snap_menu
          { Fl_Value_Input* o = snap_int = new Fl_Value_Input(20, 245, 30, 30, gettext("How close (in pixels) does the window need to be to snap?"));
            snap_int->box(FL_FLAT_BOX);
            snap_int->labelsize(10);
            snap_int->minimum(1);
            snap_int->maximum(32);
            snap_int->step(1);
            snap_int->value(5);
            snap_int->callback((Fl_Callback*)cb_snap_int);
            snap_int->align(Fl_Align(FL_ALIGN_RIGHT));
            snap_int->when(3);
            int value = getSnap();
            o->value(value);
          } // Fl_Value_Input* snap_int
          { Fl_Slider* o = corner_slider = new Fl_Slider(205, 95, 60, 25, gettext("Size of Corner"));
            corner_slider->tooltip(gettext("The corner width of the window border for rounded  window borders.   The  def\
ault is 4, the minimum is 0 (rectangular), and the maximum is 5 (most rounded)\
."));
            corner_slider->type(1);
            corner_slider->box(FL_GTK_DOWN_BOX);
            corner_slider->color((Fl_Color)41);
            corner_slider->maximum(5);
            corner_slider->step(1);
            corner_slider->value(4);
            corner_slider->callback((Fl_Callback*)cb_corner_slider);
            corner_slider->align(Fl_Align(FL_ALIGN_LEFT));
            corner_load(o);
          } // Fl_Slider* corner_slider
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(0, 30, 510, 230, gettext("Groups"));
          o->selection_color(FL_DARK2);
          o->hide();
          { Fl_Browser* o = groups_browser = new Fl_Browser(15, 55, 85, 155, gettext("Current Groups"));
            groups_browser->tooltip(gettext("Program groups allow one to specify options which apply to a group of program\
s by their name and/or class. A program group is created with the Group tag. A\
s many program groups can be created as desired."));
            groups_browser->type(2);
            groups_browser->box(FL_FLAT_BOX);
            groups_browser->callback((Fl_Callback*)cb_groups_browser);
            groups_browser->align(Fl_Align(FL_ALIGN_TOP));
            getGroups(o);
          } // Fl_Browser* groups_browser
          { group_add = new Fl_Button(15, 230, 30, 30, gettext("@+"));
            group_add->tooltip(gettext("Add a new group of options for windows"));
            group_add->box(FL_FLAT_BOX);
            group_add->color((Fl_Color)23);
            group_add->callback((Fl_Callback*)cb_group_add);
          } // Fl_Button* group_add
          { rm_group = new Fl_Button(51, 230, 30, 30);
            rm_group->tooltip(gettext("Remove ENTIRE selected group"));
            rm_group->box(FL_FLAT_BOX);
            rm_group->color((Fl_Color)23);
            rm_group->image(image_minus);
            rm_group->callback((Fl_Callback*)cb_rm_group);
          } // Fl_Button* rm_group
          { opt_browser = new Fl_Browser(120, 55, 120, 155, gettext("Current Options"));
            opt_browser->tooltip(gettext("Window specific options"));
            opt_browser->type(2);
            opt_browser->box(FL_FLAT_BOX);
            opt_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* opt_browser
          { opt_add = new Fl_Button(120, 230, 30, 30, gettext("@+"));
            opt_add->tooltip(gettext("Add a new option to the current group"));
            opt_add->box(FL_FLAT_BOX);
            opt_add->color((Fl_Color)23);
            opt_add->callback((Fl_Callback*)cb_opt_add);
          } // Fl_Button* opt_add
          { rm_opt = new Fl_Button(156, 230, 30, 30);
            rm_opt->tooltip(gettext("Remove selected option"));
            rm_opt->box(FL_FLAT_BOX);
            rm_opt->color((Fl_Color)23);
            rm_opt->image(image_minus);
            rm_opt->callback((Fl_Callback*)cb_rm_opt);
          } // Fl_Button* rm_opt
          { name_browser = new Fl_Browser(255, 55, 115, 155, gettext("Program Name"));
            name_browser->tooltip(gettext("Programs that are effected by the options"));
            name_browser->type(2);
            name_browser->box(FL_FLAT_BOX);
            name_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* name_browser
          { prog_add = new Fl_Button(255, 230, 30, 30, gettext("@+"));
            prog_add->tooltip(gettext("Add a program effected by the option"));
            prog_add->box(FL_FLAT_BOX);
            prog_add->color((Fl_Color)23);
            prog_add->callback((Fl_Callback*)cb_prog_add);
          } // Fl_Button* prog_add
          { rm_prog = new Fl_Button(291, 230, 30, 30);
            rm_prog->tooltip(gettext("Remove selected Program name"));
            rm_prog->box(FL_FLAT_BOX);
            rm_prog->color((Fl_Color)23);
            rm_prog->image(image_minus);
            rm_prog->callback((Fl_Callback*)cb_rm_prog);
          } // Fl_Button* rm_prog
          { class_browser = new Fl_Browser(385, 55, 115, 155, gettext("Window Class"));
            class_browser->tooltip(gettext("Window classes that effected by the options"));
            class_browser->type(2);
            class_browser->box(FL_FLAT_BOX);
            class_browser->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Browser* class_browser
          { class_add = new Fl_Button(385, 230, 30, 30, gettext("@+"));
            class_add->tooltip(gettext("Add a new Window class effected by the option"));
            class_add->box(FL_FLAT_BOX);
            class_add->color((Fl_Color)23);
            class_add->callback((Fl_Callback*)cb_class_add);
          } // Fl_Button* class_add
          { rm_class = new Fl_Button(422, 230, 30, 30);
            rm_class->tooltip(gettext("Remove selected Window Class"));
            rm_class->box(FL_FLAT_BOX);
            rm_class->color((Fl_Color)23);
            rm_class->image(image_minus);
            rm_class->callback((Fl_Callback*)cb_rm_class);
          } // Fl_Button* rm_class
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 40, 465, 240, gettext("Advanced"));
          o->selection_color(FL_DARK2);
          o->hide();
          { Fl_Slider* o = a_b_slider = new Fl_Slider(190, 80, 125, 25, gettext("Window Border Size"));
            a_b_slider->tooltip(gettext("The  width of window borders in pixels. The default is 4, the minimum is 1, a\
nd the maximum is 128."));
            a_b_slider->type(1);
            a_b_slider->box(FL_GTK_DOWN_BOX);
            a_b_slider->color((Fl_Color)41);
            a_b_slider->selection_color(FL_LIGHT1);
            a_b_slider->minimum(1);
            a_b_slider->maximum(128);
            a_b_slider->step(1);
            a_b_slider->value(4);
            a_b_slider->callback((Fl_Callback*)cb_a_b_slider);
            a_b_slider->align(Fl_Align(FL_ALIGN_LEFT));
            a_b_slider->when(3);
            int x = getBorderWidth();
            o->value(x);
          } // Fl_Slider* a_b_slider
          { Fl_Value_Output* o = a_b_slider_v = new Fl_Value_Output(320, 80, 35, 25, gettext("pixels"));
            a_b_slider_v->tooltip(gettext("The  width of window borders in pixels. The default is 4, the minimum is 1, a\
nd the maximum is 128."));
            a_b_slider_v->box(FL_FLAT_BOX);
            a_b_slider_v->color(FL_LIGHT3);
            a_b_slider_v->labelsize(10);
            a_b_slider_v->minimum(1);
            a_b_slider_v->maximum(128);
            a_b_slider_v->step(1);
            a_b_slider_v->value(4);
            a_b_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_b_slider_v->when(3);
            int v = a_b_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_b_slider_v
          { Fl_Slider* o = a_t_slider = new Fl_Slider(190, 110, 125, 25, gettext("Window Title Bar Size"));
            a_t_slider->tooltip(gettext("The height of window title bars  in  pixels.  By  default this is set to the \
size of the title font. The minimum is 1, and the maximum is 256."));
            a_t_slider->type(1);
            a_t_slider->box(FL_GTK_DOWN_BOX);
            a_t_slider->color((Fl_Color)41);
            a_t_slider->selection_color(FL_LIGHT1);
            a_t_slider->minimum(1);
            a_t_slider->maximum(256);
            a_t_slider->step(1);
            a_t_slider->value(20);
            a_t_slider->callback((Fl_Callback*)cb_a_t_slider);
            a_t_slider->align(Fl_Align(FL_ALIGN_LEFT));
            a_t_slider->when(3);
            int y = getBorderHeight();
            o->value(y);
          } // Fl_Slider* a_t_slider
          { Fl_Value_Output* o = a_t_slider_v = new Fl_Value_Output(320, 110, 35, 25, gettext("pixels"));
            a_t_slider_v->tooltip(gettext("The height of window title bars  in  pixels.  By  default this is set to the \
size of the title font. The minimum is 1, and the maximum is 256."));
            a_t_slider_v->box(FL_FLAT_BOX);
            a_t_slider_v->color(FL_LIGHT3);
            a_t_slider_v->labelsize(10);
            a_t_slider_v->minimum(1);
            a_t_slider_v->maximum(256);
            a_t_slider_v->value(20);
            a_t_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            a_t_slider_v->when(3);
            int v = a_t_slider->value();
            o->value(v);
          } // Fl_Value_Output* a_t_slider_v
          { new Fl_Box(80, 40, 375, 15, gettext("This can make your window borders and Title bar"));
          } // Fl_Box* o
          { Fl_Box* o = new Fl_Box(145, 55, 250, 30, gettext("REALLY HUGE!"));
            o->labelfont(1);
            o->labelsize(24);
          } // Fl_Box* o
          { Fl_Input* o = default_icon = new Fl_Input(190, 230, 125, 25, gettext("Default Menu Button Icon"));
            default_icon->tooltip(gettext("An  icon to display for the menu button on client windows instead of the defa\
ult. This is used for  client  windows that do not specify an icon."));
            default_icon->box(FL_FLAT_BOX);
            if(JWMVERSION<235){o->hide();}
            else{std::string tmp=getElementText("ButtonMenu");if(tmp.compare("")!=0){o->value(tmp.c_str());}}
          } // Fl_Input* default_icon
          { Fl_Button* o = default_icon_button = new Fl_Button(320, 230, 50, 50);
            default_icon_button->tooltip(gettext("Default Menu Button Icon.  An  icon to display for the menu button on client \
windows instead of the default. This is used for  client  windows that do not \
specify an icon."));
            default_icon_button->box(FL_FLAT_BOX);
            default_icon_button->color((Fl_Color)23);
            default_icon_button->callback((Fl_Callback*)cb_default_icon_button);
            if(JWMVERSION<235){o->hide();}
          } // Fl_Button* default_icon_button
          { Fl_Input* o = default_icon_win = new Fl_Input(190, 200, 125, 25, gettext("Default Window Icon"));
            default_icon_win->tooltip(gettext("An icon to display for windows that  do  not  specify  an icon."));
            default_icon_win->box(FL_FLAT_BOX);
            if(JWMVERSION<236){o->hide();}
            else{std::string tmp=getElementText("DefaultIcon");if(tmp.compare("")!=0){o->value(tmp.c_str());}}
          } // Fl_Input* default_icon_win
          { Fl_Button* o = default_icon_button_win = new Fl_Button(320, 175, 50, 50);
            default_icon_button_win->tooltip(gettext("Default Window  Icon.  An icon to display for windows that  do  not  specify \
 an icon."));
            default_icon_button_win->box(FL_FLAT_BOX);
            default_icon_button_win->color((Fl_Color)23);
            default_icon_button_win->callback((Fl_Callback*)cb_default_icon_button_win);
            if(JWMVERSION<236){o->hide();}
          } // Fl_Button* default_icon_button_win
          { Fl_Menu_Button* o = new Fl_Menu_Button(35, 170, 150, 25, gettext("title decorations"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_title_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_title[i].label())
                  menu_title[i].label(gettext(menu_title[i].label()));
              menu_title_i18n_done = 1;
            }
            o->menu(menu_title);
            if(JWMVERSION<236){o->hide();}
          } // Fl_Menu_Button* o
          { Fl_Output* o = decorations = new Fl_Output(190, 170, 125, 25);
            decorations->box(FL_FLAT_BOX);
            decorations->selection_color((Fl_Color)80);
            o->value("flat");o->redraw();
            if(JWMVERSION<236){o->hide();}
            else{std::string decor=getElementAttribute("WindowStyle","decorations");if(decor.compare("")!=0){o->value(decor.c_str());o->redraw();}}
          } // Fl_Output* decorations
          { Fl_Menu_Button* o = new Fl_Menu_Button(35, 140, 150, 25, gettext("border decorations"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_border_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_border[i].label())
                  menu_border[i].label(gettext(menu_border[i].label()));
              menu_border_i18n_done = 1;
            }
            o->menu(menu_border);
            if(JWMVERSION<236){o->hide();}
          } // Fl_Menu_Button* o
          { Fl_Output* o = decorations_border = new Fl_Output(190, 140, 125, 25);
            decorations_border->box(FL_FLAT_BOX);
            decorations_border->selection_color((Fl_Color)80);
            o->value("flat");o->redraw();
            if(JWMVERSION<236){o->hide();}
            else{std::string decor=getElementAttribute("WindowStyle","Outline","decorations");if(decor.compare("")!=0){o->value(decor.c_str());o->redraw();}}
          } // Fl_Output* decorations_border
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(390, 285, 55, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(455, 285, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK6);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(10, 285, 205, 25, gettext("Change GTK Widget theme"));
        o->tooltip(gettext("You will need to close any open windows to see the change"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->selection_color((Fl_Color)48);
        o->callback((Fl_Callback*)cb_Change);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_windows_xpm);
    window_window->xclass("jsm-windows");
    window_window->end();
    window_window->resizable(window_window);
  } // Fl_Double_Window* window_window
  return window_window;
}

Fl_Double_Window* WindowUI::mouse_bindings_window() {
  { action_window = new Fl_Double_Window(280, 310, gettext("Window Actions"));
    action_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 285, 310);
      { Fl_Button* o = context_close = new Fl_Button(10, 10, 40, 40);
        context_close->tooltip(gettext("The close button on a window."));
        context_close->box(FL_FLAT_BOX);
        context_close->color((Fl_Color)23);
        context_close->callback((Fl_Callback*)cb_context_close);
        get_button(o,"ButtonClose",a_title_color1);
      } // Fl_Button* context_close
      { Fl_Button* o = context_minimize = new Fl_Button(66, 10, 40, 40);
        context_minimize->tooltip(gettext("The maximize button on a window."));
        context_minimize->box(FL_FLAT_BOX);
        context_minimize->color((Fl_Color)23);
        context_minimize->callback((Fl_Callback*)cb_context_minimize);
        context_minimize->align(Fl_Align(256));
        get_button(o,"ButtonMin",a_title_color1);
      } // Fl_Button* context_minimize
      { Fl_Button* o = context_maximize = new Fl_Button(123, 10, 40, 40);
        context_maximize->tooltip(gettext("The maximize button on a window."));
        context_maximize->box(FL_FLAT_BOX);
        context_maximize->color((Fl_Color)23);
        context_maximize->callback((Fl_Callback*)cb_context_maximize);
        context_maximize->align(Fl_Align(256));
        get_button(o,"ButtonMaxActive",a_title_color1);
      } // Fl_Button* context_maximize
      { Fl_Button* o = context_title = new Fl_Button(180, 10, 90, 40, gettext("Title Bar"));
        context_title->tooltip(gettext("The title bar of a window."));
        context_title->box(FL_FLAT_BOX);
        context_title->color((Fl_Color)23);
        context_title->callback((Fl_Callback*)cb_context_title);
        context_title->align(Fl_Align(256));
        o->color(activeBGColor(1));
        o->labelcolor(fontColor(1));
      } // Fl_Button* context_title
      { Fl_Button* o = context_icon = new Fl_Button(10, 55, 40, 40, gettext("Icon"));
        context_icon->tooltip(gettext("The icon button on a window."));
        context_icon->box(FL_FLAT_BOX);
        context_icon->color((Fl_Color)23);
        context_icon->callback((Fl_Callback*)cb_context_icon);
        context_icon->align(Fl_Align(256));
        o->color(activeBGColor(1));
        o->labelcolor(fontColor(1));
      } // Fl_Button* context_icon
      { context_border = new Fl_Button(90, 55, 70, 40, gettext("Border"));
        context_border->tooltip(gettext("The window border."));
        context_border->box(FL_FLAT_BOX);
        context_border->color((Fl_Color)23);
        context_border->callback((Fl_Callback*)cb_context_border);
        context_border->align(Fl_Align(256));
      } // Fl_Button* context_border
      { context_root = new Fl_Button(200, 55, 70, 40, gettext("Root"));
        context_root->tooltip(gettext("The title bar of a window"));
        context_root->box(FL_FLAT_BOX);
        context_root->color((Fl_Color)23);
        context_root->callback((Fl_Callback*)cb_context_root);
        context_root->align(Fl_Align(256));
      } // Fl_Button* context_root
      { context_browser = new Fl_Browser(15, 115, 260, 145, gettext("Button          Action               Modifier"));
        context_browser->type(2);
        context_browser->box(FL_FLAT_BOX);
        context_browser->selection_color((Fl_Color)80);
        context_browser->callback((Fl_Callback*)cb_context_browser);
        context_browser->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Browser* context_browser
      { Fl_Button* o = new Fl_Button(15, 265, 35, 35, gettext("@+"));
        o->tooltip(gettext("Add Item"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->align(Fl_Align(256));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(95, 265, 35, 35);
        o->tooltip(gettext("Configure Item"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_6);
        o->align(Fl_Align(256));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(55, 265, 35, 35, gettext("-"));
        o->tooltip(gettext("Remove Item"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->labelfont(1);
        o->labelsize(40);
        o->callback((Fl_Callback*)cb_7);
        o->align(Fl_Align(256));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(160, 275, 55, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel5);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(221, 275, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK7);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    action_window->end();
  } // Fl_Double_Window* action_window
  return action_window;
}

void WindowUI::menu_cb(const char* action, Fl_Input * o) {
  if(context.compare("")==0) return;
  o->value(action);
  o->redraw();
}

void WindowUI::button_choice_cb(int buttonnum, Fl_Output* o) {
  std::string num = linuxcommon::convert_num_to_string(buttonnum);
}

void WindowUI::save_context() {
  if(OutputIsEmpty(context_button))return;
  if(OutputIsEmpty(button))return;
  if(InputIsEmpty(value_1))return;
  std::string Button=button->value();
  std::string Action=value_1->value();
  context=context_button->value();
  std::string Mask;
  if(!InputIsEmpty(mask)){
    Mask=mask->value();
  //<Mouse context="context" mask="mask" button="Button">Action</Mouse>
  
  }
  else{
  //<Mouse context="context" button="Button">Action</Mouse>
  
  }
}
