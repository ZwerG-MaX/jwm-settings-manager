# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include "../include/flMouse.h"} {public global
} 

class MouseUI {open
} {
  Function {make_window()} {open
  } {
    Fl_Window mouse_window {
      label {Mouse Settings} open
      xywh {458 229 425 220} type Double color 31 hide resizable
    } {
      Fl_Scroll {} {open
        xywh {0 0 425 220} color 31
      } {
        Fl_Button {} {
          label Cancel
          callback {flMouse mouse;mouse.cancel();
mouse_window->hide();
UI ux;
ux.showSettings();} selected
          xywh {265 180 65 25} box GTK_UP_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {flMouse mouse;mouse.loadTemp();
mouse.saveChanges();
mouse_window->hide();
UI ux;
ux.showSettings();}
          tooltip {Write to configuration file} xywh {340 180 45 25} box GTK_UP_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Slider double_click_slider {
          label {Double Click Speed}
          callback {flMouse mouse;mouse.loadTemp();
int speed=o->value();
mouse.setDoubleClick(speed);
double_v->value(speed);
mouse.saveChangesTemp();}
          tooltip {This sets how fast you must click to Double Click} xywh {165 75 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 4 minimum 1 maximum 2000 step 1 value 400
          code0 {flMouse mouse;mouse.loadTemp();}
          code1 {int h = mouse.getDoubleClick();}
          code2 {o->value(h);}
        }
        Fl_Slider delta_slider {
          label {Double Click Delta}
          callback {flMouse mouse;mouse.loadTemp();
int delta=o->value();
mouse.setDelta(delta);
delta_v->value(delta);
mouse.saveChangesTemp();}
          tooltip {This sets how fast you must click to Double Click} xywh {165 110 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 4 minimum 1 maximum 32 step 1 value 2
          code0 {flMouse mouse;mouse.loadTemp();}
          code1 {int h = mouse.getDelta();}
          code2 {o->value(h);}
        }
        Fl_Value_Input delta_v {
          label Pixels
          callback {flMouse mouse;mouse.loadTemp();
int delta=o->value();
mouse.setDelta(delta);
delta_slider->value(delta);
mouse.saveChangesTemp()}
          xywh {260 110 40 25} box GTK_DOWN_BOX labelsize 12 align 8 minimum 1 maximum 32 value 2
          code0 {o->value(delta_slider->value());}
        }
        Fl_Value_Input double_v {
          label Pixels
          callback {flMouse mouse;mouse.loadTemp();
int speed=o->value();
mouse.setDoubleClick(speed);
double_click_slider->value(speed);
mouse.saveChangesTemp();}
          xywh {260 75 60 25} box GTK_DOWN_BOX labelsize 12 align 8 minimum 1 maximum 2000 value 400
          code0 {o->value(double_click_slider->value());}
        }
        Fl_Check_Button tap_check {
          label {Disable Touchpad Tap to Click}
          callback {flMouse mouse;mouse.loadTemp();
bool tap =mouse.isTap();
const char * maxTap ="synclient MaxTapTime=0";
if(!tap){
	mouse.addAutostart(maxTap);
	int sys=system(maxTap);
	if(sys){/*do something*/}
	o->value(0);
}
else{
	mouse.removeAutostart(maxTap);
	int e =system("synclient MaxTapTime=200");
	if(e){/*do something*/}
	o->value(1);
}}
          tooltip {Enable/Disable Synaptics Touchpads Clicking} xywh {170 145 250 25} down_box GTK_DOWN_BOX value 1 selection_color 59
          code0 {flMouse mouse;mouse.loadTemp();}
          code1 {bool tap =mouse.isTap();}
          code2 {if(tap){o->value(1);}else{o->value(0);}}
        }
        Fl_Box {} {
          label {Mouse  }
          image {../data/img/jsm-mouse.png} xywh {105 20 175 50} labelfont 1 labelsize 18 labelcolor 35 align 288
        }
        Fl_Button {} {
          label {@<-  Main Settings Window}
          callback {flMouse mouse;mouse.cancel();
mouse_window->hide();
UI ux;
ux.showSettings();}
          xywh {20 180 190 25} box GTK_UP_BOX color 50
        }
        Fl_Check_Button {} {
          label {Enable Touchpad}
          callback {int use = system("/usr/bin/touchpad_toggle");
if(use == 1){
	o->value(1);
	//tap_check->show();
}
else if(use == 0){
	o->value(0);
	//tap_check->hide();
}}
          tooltip {Enable/Disable Synaptics Touchpads} xywh {20 145 70 25} down_box GTK_DOWN_BOX value 1 selection_color 59 when 6
          code0 {int use = system("/usr/bin/touchpad_status");}
          code1 {if(use = 0){o->value(0);}}
          code2 {else if(use = 1){o->value(1);tap_check->show();}}
          code3 {else{tap_check->hide();}}
        }
      }
    }
  }
} 
