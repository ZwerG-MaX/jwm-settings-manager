# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

comment {//Many thanks to flSynclient (c) 2006 Matteo Lucarelli <matteo@matteolucarelli.net>} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include <getopt.h>} {public global
} 

decl {\#include <stdio.h>} {public global
} 

decl {\#include <unistd.h>} {public global
} 

decl {\#include <signal.h>} {public global
} 

decl {\#include <sys/types.h>} {public global
} 

decl {\#include <sys/wait.h>} {public global
} 

decl {\#include <FL/filename.H>} {public global
} 

decl {\#include <FL/fl_draw.H>} {public global
} 

decl {\#include <FL/fl_message.H>} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../data/icons/jsm-mouse.xpm"} {public global
} 

decl {\#include <sstream>} {public local
} 

decl {\#include <fstream>} {public local
} 

decl {\#include "../include/fltkfunctions.hpp"} {public global
} 

class MouseUI {open
} {
  decl {bool verbose;int m_pid;bool deltaChanged;bool doubleChanged;bool JWM;} {public local
  }
  Function {cursors_window()} {open
  } {
    Fl_Window CURSOR_win {
      label {Mouse Cursors} open selected
      xywh {455 361 265 220} type Double hide
      code0 {startup(o,jsm_mouse_xpm);} xclass JSM
    } {
      Fl_Browser cursor_browser {
        xywh {10 5 250 180} type Hold box FLAT_BOX selection_color 72
        code0 {populate_cusors();}
      }
      Fl_Button cancel_button2 {
        label Cancel
        callback {CURSOR_win->hide();}
        xywh {135 190 65 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button save_button2 {
        label OK
        callback {save_cursors();
CURSOR_win->hide();}
        tooltip {Write to configuration file} xywh {215 190 45 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {error_window()} {} {
    Fl_Window {} {
      label ERROR open
      xywh {52 102 230 110} type Double hide
      code0 {startup(o,jsm_mouse_xpm);}
    } {
      Fl_Button {} {
        label QUIT
        callback {exit(0);}
        xywh {75 65 60 30} box FLAT_BOX color 1 labelcolor 7
      }
      Fl_Box {} {
        label {No touchpad detected}
        xywh {25 5 160 60}
      }
    }
  }
  Function {jwm_window()} {open
  } {
    Fl_Window {} {
      label {JWM Mouse Settings} open
      xywh {172 222 400 115} type Double hide
      code0 {startup(o,jsm_mouse_xpm);}
    } {
      Fl_Slider double_click_slider2 {
        label {Double Click Speed}
        callback {int speed=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(speed);
setElementText("DoubleClickSpeed",SPEED);
double_v2->value(speed);
saveChangesTemp();
doubleChanged = true;}
        tooltip {This sets how fast you must click to Double Click} xywh {150 10 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 6 minimum 1 maximum 2000 step 1 value 400
        code0 {JWMmouse();}
      }
      Fl_Slider delta_slider2 {
        label {Double Click Delta}
        callback {int delta=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(delta);
setElementText("DoubleClickDelta",SPEED);
delta_v2->value(delta);
saveChangesTemp();
deltaChanged = true;}
        tooltip {This sets how closely you must click to Double Click} xywh {150 40 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 6 minimum 1 maximum 32 step 1 value 2
        code0 {JWMmouse();}
      }
      Fl_Value_Input delta_v2 {
        label Pixels
        callback {int delta=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(delta);
setElementText("DoubleClickDelta",SPEED);
delta_slider2->value(delta);
saveChangesTemp();
deltaChanged = true;}
        xywh {245 40 40 25} box FLAT_BOX labelsize 12 align 8 minimum 1 maximum 32 value 2
        code0 {o->value(delta_slider2->value());}
      }
      Fl_Value_Input double_v2 {
        label Miliseconds
        callback {int speed=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(speed);
setElementText("DoubleClickSpeed",SPEED);
double_click_slider2->value(speed);
saveChangesTemp();
doubleChanged = true;}
        xywh {245 10 60 25} box FLAT_BOX labelsize 12 align 8 minimum 1 maximum 2000 value 400
        code0 {o->value(double_click_slider2->value());}
      }
      Fl_Button save_button {
        label OK
        callback {if(deltaChanged || doubleChanged){
  if(JWM){saveChanges();}
}
SaveSettings();
add_to_profile();
exit(0);}
        tooltip {Write to configuration file} xywh {345 75 45 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button cancel_button3 {
        label Cancel
        callback {if(JWM){
  cancel();
}
exit(0);}
        xywh {265 75 65 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button cursors_button {
        label Cursors
        callback {cursors_window()->show();}
        xywh {95 75 65 25} box FLAT_BOX color 42 selection_color 0 labelcolor 7 hide deactivate
      }
    }
  }
  Function {make_window()} {open
  } {
    code {JWM=isJWM();
deltaChanged = false;
doubleChanged = false;} {}
    Fl_Window mouse_window {
      label {Touchpad Settings} open
      xywh {194 133 370 345} type Double color 47 resizable
      code0 {readsynclientoutput();}
      code1 {startup(o,jsm_mouse_xpm);} xclass {jsm-mouse} visible
    } {
      Fl_Scroll {} {open
        xywh {-5 0 545 520} color 31
      } {
        Fl_Tabs {} {open
          xywh {5 5 360 305} box FLAT_BOX color 45
        } {
          Fl_Group {} {
            label TouchPad open
            xywh {20 35 325 260} selection_color 45
          } {
            Fl_Choice TouchpadOff {
              label {Touchpad Mode}
              callback {synclient("TouchpadOff",o->value());} open
              tooltip {Toggle the pad ON/OFF or only move (no scroll, tap, ecc.)} xywh {55 40 65 20} box GTK_DOWN_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label ON
                xywh {30 30 100 20} box NO_BOX color 50 selection_color 50 labelsize 12
              }
              MenuItem {} {
                label Off
                xywh {40 40 100 20} box NO_BOX color 50 selection_color 50 labelsize 12
              }
              MenuItem {} {
                label {Tap Off}
                xywh {50 50 100 20} box NO_BOX color 50 selection_color 50 labelsize 12
              }
            }
            Fl_Check_Button GuestMouseOff {
              label {Guest Mouse Off}
              callback {synclient("GuestMouseOff",o->value());}
              tooltip {Toggle on/of the secondary pointer (tipically a joypad)} xywh {55 58 20 22} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Check_Button CircularPad {
              label {Circular Pad}
              callback {synclient("CircularPad",o->value());}
              tooltip {Use this if your touchpad is circular} xywh {55 77 20 23} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Value_Slider FingerLowHigh {
              label {Touch Sensitivity}
              callback {synclient("FingerLow",o->value());
synclient("FingerHigh",o->value());}
              tooltip {The minimum pressure to react to} xywh {55 115 215 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 5 when 4 textcolor 55
              code0 {o->range(0,150);}
              code1 {o->precision(0);}
            }
            Fl_Value_Slider ClickTime {
              label {Click Emulation Time}
              callback {synclient("ClickTime",o->value());}
              tooltip {The duration of the mouse click generated by tapping} xywh {55 160 215 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 5 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,500);}
            }
            Fl_Value_Slider EmulateMidButtonTime {
              label {Middle Button Emulation Time}
              callback {synclient("EmulateMidButtonTime",o->value());}
              tooltip {Maximum time for middle button emulation.} xywh {55 205 215 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 5 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,500);}
            }
          }
          Fl_Group {} {
            label Tapping open
            xywh {10 30 345 280} selection_color 45 hide
          } {
            Fl_Choice TapButton1 {
              label {One Finger}
              callback {synclient("TapButton1",o->value());}
              tooltip {Which mouse button is reported on a non-corner one-finger tap} xywh {55 40 110 20} down_box FLAT_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {15 15 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {left button}
                xywh {5 5 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {center button}
                xywh {25 25 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {right button}
                xywh {15 15 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {up wheel}
                xywh {35 35 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {down wheel}
                xywh {45 45 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {left wheel}
                xywh {55 55 100 20} box NO_BOX color 50 selection_color 50
              }
              MenuItem {} {
                label {right wheel}
                xywh {65 65 100 20} box NO_BOX color 50 selection_color 50
              }
            }
            Fl_Choice TapButton2 {
              label {Two Finger}
              callback {synclient("TapButton2",o->value());}
              tooltip {Which mouse button is reported on a non-corner two-finger tap} xywh {55 60 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 25 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 15 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 35 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 25 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 45 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Choice TapButton3 {
              label {Three Finger}
              callback {synclient("TapButton3",o->value());}
              tooltip {Which mouse button is reported on a non-corner three-finger tap} xywh {55 80 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 35 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 25 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 45 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 35 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 85 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Choice LTCornerButton {
              label {Top Left Corner}
              callback {synclient("LTCornerButton",o->value());}
              tooltip {Which mouse button is reported on a  top left corner finger tap} xywh {55 100 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 45 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 35 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 45 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 85 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 95 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Choice RTCornerButton {
              label {Top Right Corner}
              callback {synclient("RTCornerButton",o->value());}
              tooltip {RTCornerButtonWhich mouse button is reported on a  top right corner finger tap} xywh {55 120 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 45 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 85 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 95 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 105 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Choice LBCornerButton {
              label {Bottom Left Corner}
              callback {synclient("LBCornerButton",o->value());}
              tooltip {LBCornerButtonWhich mouse button is reported on a  bottom left corner finger tap} xywh {55 140 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 55 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 85 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 95 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 105 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 115 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Choice RBCornerButton {
              label {Bottom Right Corner}
              callback {synclient("RBCornerButton",o->value());}
              tooltip {Which mouse button is reported on a  bottom right corner finger tap} xywh {55 160 110 20} box NO_BOX down_box GTK_DOWN_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label disable
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left button}
                xywh {190 65 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {center button}
                xywh {190 85 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right button}
                xywh {190 75 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {up wheel}
                xywh {190 95 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {down wheel}
                xywh {190 105 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {left wheel}
                xywh {190 115 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
              MenuItem {} {
                label {right wheel}
                xywh {190 125 100 20} box NO_BOX color 50 selection_color 50 align 8
              }
            }
            Fl_Value_Slider MaxTapTime {
              label {Tap Time}
              callback {synclient("MaxTapTime",o->value());}
              tooltip {Maximum time for detecting a tap.} xywh {55 185 135 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,300);}
            }
            Fl_Value_Slider MaxDoubleTapTime {
              label {Double Tap Time}
              callback {synclient("MaxDoubleTapTime",o->value());}
              tooltip {Maximum time for detecting a double tap} xywh {55 215 135 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,300);}
            }
            Fl_Value_Slider MaxTapMove {
              label {Tap Move}
              callback {synclient("MaxTapMove",o->value());}
              tooltip {Maximum movement of the finger for detecting a tap} xywh {55 245 135 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,300);}
            }
          }
          Fl_Group {} {
            label Scrolling open
            xywh {20 35 335 265} selection_color 45 hide
          } {
            Fl_Check_Button VertTwoFingerScroll {
              label {Vertical 2 Finger Scroll}
              callback {synclient("VertTwoFingerScroll",o->value());}
              tooltip {Enable Vertical Edge scrolling for this to work} xywh {55 35 20 20} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Check_Button HorizTwoFingerScroll {
              label {Horizontal 2 Finger Scroll}
              callback {synclient("HorizTwoFingerScroll",o->value());}
              tooltip {Enable Horizontal Edge scrolling for this to work} xywh {55 50 20 20} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Check_Button UpDownScrolling {
              label {Up Down Buttons Scroll}
              callback {synclient("UpDownScrolling",o->value());}
              tooltip {If on, the up/down buttons generate button 4/5 events} xywh {55 65 20 20} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Check_Button LeftRightScrolling {
              label {Left Right Buttons Scroll}
              callback {synclient("LeftRightScrolling",o->value());}
              tooltip {If on, the left/right buttons generate button 6/7 events} xywh {55 80 20 20} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Check_Button CircularScrolling {
              label {Circular Scroll}
              callback {synclient("CircularScrolling",o->value());}
              tooltip {If on, circular scrolling is used} xywh {55 95 20 20} down_box GTK_DOWN_BOX color 55 selection_color 2 align 8
            }
            Fl_Value_Slider VertScrollDelta {
              label {VScroll Delta}
              callback {synclient("VertScrollDelta",o->value());}
              tooltip {Move distance of the finger for a scroll event} xywh {55 113 152 26} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(10,1000);}
            }
            Fl_Value_Slider HorizScrollDelta {
              label {HScroll Delta}
              callback {synclient("HorizScrollDelta",o->value());}
              tooltip {Move distance of the finger for a scroll event} xywh {55 140 152 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(10,1000);}
            }
            Fl_Value_Slider CircScrollDelta {
              label {CScroll Delta}
              callback {synclient("CircScrollDelta",o->value());}
              tooltip {Move angle (radians) of finger to generate a scroll event} xywh {55 167 152 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(2);}
              code1 {o->range(0.01,5);}
            }
            Fl_Choice CircScrollTrigger {
              label {CScroll Start}
              callback {synclient("CircScrollTrigger",o->value());}
              xywh {55 194 152 20} box NO_BOX down_box FLAT_BOX color 50 selection_color 50 align 8
            } {
              MenuItem {} {
                label Everywhere
                xywh {20 20 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label Top
                xywh {30 30 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label {Top Right}
                xywh {40 40 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label Right
                xywh {50 50 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label {Bottom Right}
                xywh {40 40 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label Bottom
                xywh {50 50 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label {Bottom Left}
                xywh {60 60 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label Left
                xywh {50 50 100 25} box NO_BOX color 42 selection_color 50
              }
              MenuItem {} {
                label {Top Left}
                xywh {60 60 100 25} box NO_BOX color 42 selection_color 50
              }
            }
            Fl_Value_Slider EdgeMotionMinSpeed {
              label {Edge Min Speed}
              callback {synclient("EdgeMotionMinSpeed",o->value());}
              tooltip {Slowest setting for edge motion speed} xywh {55 216 152 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,300);}
            }
            Fl_Value_Slider EdgeMotionMaxSpeed {
              label {Edge Max Speed}
              callback {synclient("EdgeMotionMaxSpeed",o->value());}
              tooltip {Fastest setting for edge motion speed} xywh {55 243 152 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(0,300);}
            }
            Fl_Value_Slider EdgeMotionMinMaxZ {
              label {Edge Sensitivity}
              callback {synclient("EdgeMotionMinZ",o->value());
synclient("EdgeMotionMaxZ",o->value()*2);}
              tooltip {Finger pressure for  motion speed} xywh {55 270 152 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(0);}
              code1 {o->range(1,150);}
            }
          }
          Fl_Group {} {
            label Movement open
            xywh {20 33 340 260} selection_color 45 hide
          } {
            Fl_Value_Output TopEdge {
              label {@8->| Top}
              tooltip {Y coordinate for top edge} xywh {156 40 50 25} box GTK_DOWN_BOX color 53 selection_color 50 align 8
            }
            Fl_Button {} {
              label Calibrate
              callback {CalibrateEdge(0);}
              tooltip {To calibrate push button and move finger on the top of the pad} xywh {55 40 95 25} box GTK_UP_BOX color 50 selection_color 50
            }
            Fl_Value_Output BottomEdge {
              label {@2->| Bottom}
              tooltip {Y coordinate for bottom edge} xywh {155 70 50 25} box GTK_DOWN_BOX color 53 selection_color 50 align 8
            }
            Fl_Button {} {
              label Calibrate
              callback {CalibrateEdge(1);}
              tooltip {To calibrate push button and move finger on the bottom of the pad} xywh {55 70 95 25} box GTK_UP_BOX color 50 selection_color 50
            }
            Fl_Value_Output LeftEdge {
              label {@4->| Left}
              tooltip {X coordinate for left edge} xywh {155 100 50 25} box GTK_DOWN_BOX color 53 selection_color 50 align 8
            }
            Fl_Button {} {
              label Calibrate
              callback {CalibrateEdge(2);}
              tooltip {To calibrate push button and move finger on the left of the pad} xywh {55 100 95 25} box GTK_UP_BOX color 50 selection_color 50
            }
            Fl_Value_Output RightEdge {
              label {@->| Right}
              tooltip {X coordinate for right edge} xywh {155 130 50 25} box GTK_DOWN_BOX color 53 selection_color 50 align 8
            }
            Fl_Button {} {
              label Calibrate
              callback {CalibrateEdge(3);}
              tooltip {To calibrate push button and move finger on the right of the pad} xywh {55 130 95 25} box GTK_UP_BOX color 50 selection_color 50
            }
            Fl_Value_Slider MinSpeed {
              label {Min Speed}
              callback {synclient("MinSpeed",o->value());}
              tooltip {Minimum speed factor} xywh {55 160 150 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->range(0,10);}
              code1 {o->precision(2);}
            }
            Fl_Value_Slider MaxSpeed {
              label {Max Speed}
              callback {synclient("MaxSpeed",o->value());}
              tooltip {Maximum speed factor} xywh {55 190 150 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->range(0,10);}
              code1 {o->precision(2);}
            }
            Fl_Value_Slider AccelFactor {
              label Acceleration
              callback {synclient("AccelFactor",o->value());}
              tooltip {Acceleration factor} xywh {55 220 150 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 4 textcolor 55
              code0 {o->precision(4);}
              code1 {o->range(0.0001,0.01);}
            }
          }
          Fl_Group {} {
            label JWM open
            xywh {40 35 320 170} selection_color 45 hide
          } {
            Fl_Slider double_click_slider {
              label {Double Click Speed}
              callback {int speed=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(speed);
setElementText("DoubleClickSpeed",SPEED);
double_v->value(speed);
saveChangesTemp();
doubleChanged = true;}
              tooltip {This sets how fast you must click to Double Click} xywh {55 45 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 6 minimum 1 maximum 2000 step 1 value 400
              code0 {JWMmouse();}
            }
            Fl_Value_Input double_v {
              label Miliseconds
              callback {int speed=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(speed);
setElementText("DoubleClickSpeed",SPEED);
double_click_slider->value(speed);
saveChangesTemp();
doubleChanged = true;}
              xywh {55 75 60 25} box FLAT_BOX labelsize 12 align 8 minimum 1 maximum 2000 value 400
              code0 {o->value(double_click_slider->value());}
            }
            Fl_Slider delta_slider {
              label {Double Click Delta}
              callback {int delta=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(delta);
setElementText("DoubleClickDelta",SPEED);
delta_v->value(delta);
saveChangesTemp();
deltaChanged = true;}
              tooltip {This sets how closely you must click to Double Click} xywh {55 115 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 6 minimum 1 maximum 32 step 1 value 2
              code0 {JWMmouse();}
            }
            Fl_Value_Input delta_v {
              label Pixels
              callback {int delta=o->value();
std::string SPEED=linuxcommon::convert_num_to_string(delta);
setElementText("DoubleClickDelta",SPEED);
delta_slider->value(delta);
saveChangesTemp();
deltaChanged = true;}
              xywh {55 145 40 25} box FLAT_BOX labelsize 12 align 8 minimum 1 maximum 32 value 2
              code0 {o->value(delta_slider->value());}
            }
            Fl_Button cancel_button {
              label Reset
              callback {if(JWM){
  cancel();
}
JWMmouse();}
              xywh {155 180 65 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
            }
          }
        }
        Fl_Button ok_button {
          label OK
          callback {if(deltaChanged || doubleChanged){
  if(JWM){saveChanges();}
}
SaveSettings();
add_to_profile();
exit(0);}
          tooltip {Write to configuration file} xywh {320 315 45 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Button main_cursors_button {
          label Cursors
          callback {cursors_window()->show();}
          xywh {190 315 65 25} box FLAT_BOX color 23 selection_color 0
        }
        Fl_Button {} {
          label QUIT
          callback {exit(0);}
          tooltip {Write to configuration file} xywh {265 315 50 25} box FLAT_BOX color 80 selection_color 72 labelcolor 55
        }
      }
    }
  }
  Function {add_to_profile()} {} {
    code {std::string string_command = "sed -i 's/Parameter settings:/synclient/' ";
string_command += getenv("HOME");
string_command += "/.jsm-mouse";
const char* command = string_command.c_str();
int working_sed = system(command);
string_command = "awk '{$1=$1}{gsub(/[ ]/,\\"\\"); print}' ORS=' ' ";
string_command += getenv("HOME");
string_command += "/.jsm-mouse >";
string_command += getenv("HOME");
string_command += "/.config/jsm-mouse";
working_sed = system(string_command.c_str());
string_command = "chmod +x ";
string_command += getenv("HOME");
string_command += "/.config/jsm-mouse";
working_sed = system(string_command.c_str());
string_command = "sed -i '1i\#!/bin/bash' ";
string_command += getenv("HOME");
string_command += "/.config/jsm-mouse";
working_sed = system(string_command.c_str());
if(working_sed!=0){
  std::cerr<< string_command<<" did not return 0"<<std::endl;
}} {}
  }
  Function {checksynclient()} {return_type bool
  } {
    code {std::string command = "synclient";
int start = system(command.c_str());
if(start !=0){
  std::cout<<command<<" did not return 0"<<std::endl;
  return false;
 }
return true;} {}
  }
  Function {convert(std::string number)} {return_type double
  } {
    code {std::stringstream out;
out << number;
double integer;
out >> integer;
return integer;} {}
  }
  Function {convert(double number)} {return_type {std::string}
  } {
    code {std::string num;
std::stringstream out;
out << number;
num = out.str();
return num;} {}
  }
  Function {CalibrateEdge(int edge)} {} {
    code {int fds[2];
int thispipe = pipe(fds);
if(thispipe !=0){std::cerr<<"pipe() did not return 0"<<std::endl;}
char tmp[1024];
m_pid=fork();	

  if (m_pid==(pid_t)0){
    close(fds[0]);
    dup2(fds[1],2);
    close(fds[1]);
    snprintf(tmp,1024,"(%s) 1>&2","synclient -m 100");
    if (verbose) printf("Executing: %s\\n",tmp);
    execlp("/bin/sh", "sh", "-c", tmp, (char *)0);
  }	
  fl_cursor(FL_CURSOR_WAIT);
  Fl::check();
	
  close(fds[1]);
  FILE* fp=fdopen(fds[0],"r");	
  char* argv[3];
  int xmax=0;
  int xmin=100000;
  int ymax=0;
  int ymin=100000;
  char* thischar = fgets(tmp,1024,fp);
  if (thischar == NULL){std::cerr<<"fgets returned NULL"<<std::endl;}
  for (int i=0; i<10 ; i++){
    char* thischar2 = fgets(tmp,1024,fp);
    if (thischar2 == NULL){std::cerr<<"fgets returned NULL"<<std::endl;}
    if (verbose) printf("%s\\n",tmp);
    parseline(tmp,argv,3);
    if (atoi(argv[1])>xmax) xmax=atoi(argv[1]);
    if (atoi(argv[1])<xmin) xmin=atoi(argv[1]);
    if (atoi(argv[2])>ymax) ymax=atoi(argv[2]);
    if (atoi(argv[2])<ymin) ymin=atoi(argv[2]);
  }
  kill(m_pid,SIGTERM);
  fclose(fp);	
  switch (edge){
    case 0: TopEdge->value(ymin);synclient("TopEdge",ymin);break;
    case 1: BottomEdge->value(ymax);synclient("BottomEdge",ymax);break;
    case 2: LeftEdge->value(xmin);synclient("LeftEdge",xmin);break;
    case 3: RightEdge->value(xmax);synclient("RightEdge",xmax);break;
}
	
fl_cursor(FL_CURSOR_DEFAULT);
Fl::check();} {}
  }
  Function {isJWM()} {open return_type bool
  } {
    code {JWM=false;
std::string whichone = "which jwm";
std::string JWMexists = linuxcommon::term_out(whichone);
if (JWMexists.compare("") != 0 ){
  JWM=true;
}
//JWM=false;
if(JWM){
std::cout<<"JWM found"<<std::endl;
  load();
  return true;
}
return false;} {}
  }
  Function {JWMmouse()} {} {
    code {if(JWM){
return;
  std::string doubleClick=getElementText("DoubleClickSpeed");
  double h;
  if(doubleClick.compare("")==0){h=400;}
  else{h = numfromstring(doubleClick);}
  double_click_slider->value(h);
  std::string getDelta=getElementText("DoubleClickDelta");
  double delta;
  if(getDelta.compare("")==0){delta=2;}
  else{delta=numfromstring(getDelta);}
  delta_slider->value(delta);  
}} {}
  }
  Function {numfromstring(std::string text)} {return_type int
  } {
    code {int result = strtol(text.c_str(),0,10);
return result;} {}
  }
  Function {parseline(char *line, char **argv, int maxarg)} {return_type int
  } {
    code {int argc=0;
while (*line!=0 && argc<maxarg) {      
  while (*line==' ' || *line=='\\t' || *line =='\\n') *line++=0;     
  *argv++ = line;
  argc++;
  while (*line!=0 && *line!=' ' && *line!='\\t' && *line!='\\n') line++;             
}
*argv = 0;
return argc;} {}
  }
  Function {parsesynclientoutput(std::string filename)} {} {
    code {std::string full_line = "";
std::string line = "";
std::string line_substring ="";
int starter_element = 0;
int ender_element = 0;
int mid = 0;
int starter = 0;
std::ifstream ifs(filename.c_str(), std::ifstream::in);
if(ifs.is_open()){
std::cout<<filename<<" is open"<<std::endl;
  while (getline(ifs,full_line)){
    starter_element = full_line.find_first_not_of(' ');
    ender_element = full_line.find_first_of(' ',starter_element);
    mid = ender_element - starter_element;
    line = full_line.substr(starter_element,mid);
    starter = full_line.find_first_of('=');
    line_substring = full_line.substr((starter+2),std::string::npos);
if (line.compare("synclient")!=0){
    double dub = convert(line_substring);
//CHECK VALUES
    if (line.compare("LeftEdge")==0){
      LeftEdge->value(dub);
    }
    else if (line.compare("RightEdge")==0){
      RightEdge->value(dub);
    }
    else if (line.compare("TopEdge")==0){
      TopEdge->value(dub);
    }
    else if (line.compare("BottomEdge")==0){
      BottomEdge->value(dub);
    }
    else if (line.compare("FingerLow")==0){
      FingerLowHigh->value(dub);
    }
    else if (line.compare("MaxTapTime")==0){
      MaxTapTime->value(dub);
    }
    else if (line.compare("MaxTapMove")==0){
      MaxTapMove->value(dub);
    }
    else if (line.compare("MaxDoubleTapTime")==0){
      MaxDoubleTapTime->value(dub);
    }
    else if (line.compare("ClickTime")==0){
      ClickTime->value(dub);
    }
    else if (line.compare("EmulateMidButtonTime")==0){
      EmulateMidButtonTime->value(dub);
    }
    else if (line.compare("VertScrollDelta")==0){
      VertScrollDelta->value(dub);
    }
    else if (line.compare("HorizScrollDelta")==0){
      HorizScrollDelta->value(dub);
    }
    else if (line.compare("MinSpeed")==0){
      MinSpeed->value(dub);
    }
    else if (line.compare("MaxSpeed")==0){
      MaxSpeed->value(dub);
    }
    else if (line.compare("AccelFactor")==0){
      AccelFactor->value(dub);
    }
    else if (line.compare("EdgeMotionMinZ")==0){
      EdgeMotionMinMaxZ->value(dub);
    }
    else if (line.compare("EdgeMotionMinSpeed")==0){
      EdgeMotionMinSpeed->value(dub);
    }
    else if (line.compare("EdgeMotionMaxSpeed")==0){
      EdgeMotionMaxSpeed->value(dub);
    }
    else if (line.compare("UpDownScrolling")==0){
      UpDownScrolling->value(dub);
    }
    else if (line.compare("LeftRightScrolling")==0){
      LeftRightScrolling->value(dub);
    }
    else if (line.compare("TouchpadOff")==0){
      TouchpadOff->value(dub);
    }
    else if (line.compare("GuestMouseOff")==0){
      GuestMouseOff->value(dub);
    }
    else if (line.compare("RTCornerButton")==0){
      RTCornerButton->value(dub);
    }
    else if (line.compare("RBCornerButton")==0){
      RBCornerButton->value(dub);
    }
    else if (line.compare("LTCornerButton")==0){
      LTCornerButton->value(dub);
    }
    else if (line.compare("LBCornerButton")==0){
      LBCornerButton->value(dub);
    }
    else if (line.compare("TapButton1")==0){
      TapButton1->value(dub);
    }
    else if (line.compare("TapButton2")==0){
      TapButton2->value(dub);
    }
    else if (line.compare("TapButton3")==0){
      TapButton3->value(dub);
    }
    else if (line.compare("CircularScrolling")==0){
      CircularScrolling->value(dub);
    }
    else if (line.compare("CircScrollDelta")==0){
      CircScrollDelta->value(dub);
    }
    else if (line.compare("CircScrollTrigger")==0){
      CircScrollTrigger->value(dub);
    }
    else if (line.compare("CircularPad")==0){
      CircularPad->value(dub);
    }
    else if (line.compare("VertTwoFingerScroll")==0){
      VertTwoFingerScroll->value(dub);
    }
    else if (line.compare("HorizTwoFingerScroll")==0){
      HorizTwoFingerScroll->value(dub);
    }
//END CHECK VALUES

}//not Parameter
  }//while
}//if ifstream} {}
  }
  Function {populate_cusors()} {open
  } {
    code {addCursorsToBrowser(cursor_browser);} {}
  }
  Function {readsynclientoutput()} {return_type int
  } {
    code {std::string filename =linuxcommon::home_path();
if(filename.compare("")==0){return 1;}
filename += "/.jsm-mouse";
std::string command = "synclient -l >";
command += filename;
int start = system(command.c_str());
if(start !=0){
  std::cout<<command<<" did not return 0"<<std::endl;
  return start;
 }
parsesynclientoutput(filename);
std::cout<<"end of readsynclient"<<std::endl;
return start;} {}
  }
  Function {save_cursors()} {open
  } {
    code {if(changeCursorTheme(cursor_browser)){debug_out("Changed cursor theme.");}} {}
  }
  Function {synclient(const char* field, double value)} {} {
    code {std::string tmp = "synclient ";
tmp +=field;
tmp +="=";
tmp += convert(value);
int check =system(tmp.c_str());
if(check!=0){
  std::cerr<<tmp<<" returns: "<<check<<std::endl;
}} {}
  }
  Function {SaveSettings()} {} {
    code {int configure = system("synclient -l >~/.jsm-mouse");
if (configure !=0){std::cout<<"system did not return 0"<<std::endl;}} {}
  }
} 

Function {main()} {open return_type int
} {
  code {MouseUI mouse;
bool readsyn=mouse.checksynclient();
if (readsyn){
std::cout<<"make_window"<<std::endl;
  mouse.make_window()->show();
}
else if (mouse.isJWM()){
std::cout<<"jwm window"<<std::endl;
  mouse.jwm_window()->show();
}
else{
std::cout<<"error window"<<std::endl;
  mouse.error_window()->show();
}
return Fl::run();} {}
} 
