/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef jwm_panel_h
#define jwm_panel_h
#include <FL/Fl.H>
#include <libintl.h>
#include <string>
#include <algorithm>
#include <stdlib.h>
#include "../include/tinyxml2.h"
#include <iostream>
#include "../include/Config.h"
#include <FL/Fl_File_Chooser.H>
#include "../include/flPanel.h"
#include "../include/Apps.h"
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Color_Chooser.H>
#include "../include/ui.h"
#include <FL/Fl_XPM_Image.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Text_Display.H>

class PanelUI {
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *panel_window;
  Fl_Menu_Button *panel_chooser;
private:
  inline void cb_panel_chooser_i(Fl_Menu_Button*, void*);
  static void cb_panel_chooser(Fl_Menu_Button*, void*);
  static unsigned char menu_panel_chooser_i18n_done;
  static Fl_Menu_Item menu_panel_chooser[];
  inline void cb_Add_i(Fl_Menu_*, void*);
  static void cb_Add(Fl_Menu_*, void*);
  inline void cb_Panel_i(Fl_Menu_*, void*);
  static void cb_Panel(Fl_Menu_*, void*);
  inline void cb_Panel1_i(Fl_Menu_*, void*);
  static void cb_Panel1(Fl_Menu_*, void*);
  inline void cb_Panel2_i(Fl_Menu_*, void*);
  static void cb_Panel2(Fl_Menu_*, void*);
  inline void cb_Panel3_i(Fl_Menu_*, void*);
  static void cb_Panel3(Fl_Menu_*, void*);
  inline void cb_Remove_i(Fl_Menu_*, void*);
  static void cb_Remove(Fl_Menu_*, void*);
  inline void cb_Main_i(Fl_Button*, void*);
  static void cb_Main(Fl_Button*, void*);
public:
  Fl_Output *vh_display;
  Fl_Output *layout_display;
  Fl_Check_Button *c_shortcuts;
private:
  inline void cb_c_shortcuts_i(Fl_Check_Button*, void*);
  static void cb_c_shortcuts(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_clock;
private:
  inline void cb_c_clock_i(Fl_Check_Button*, void*);
  static void cb_c_clock(Fl_Check_Button*, void*);
  inline void cb_CPU_i(Fl_Check_Button*, void*);
  static void cb_CPU(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_desktop;
private:
  inline void cb_c_desktop_i(Fl_Check_Button*, void*);
  static void cb_c_desktop(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_tasklist;
private:
  inline void cb_c_tasklist_i(Fl_Check_Button*, void*);
  static void cb_c_tasklist(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_shutdown;
private:
  inline void cb_c_shutdown_i(Fl_Check_Button*, void*);
  static void cb_c_shutdown(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_indicators;
private:
  inline void cb_c_indicators_i(Fl_Check_Button*, void*);
  static void cb_c_indicators(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_places;
private:
  inline void cb_c_places_i(Fl_Check_Button*, void*);
  static void cb_c_places(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_battery;
private:
  inline void cb_c_battery_i(Fl_Check_Button*, void*);
  static void cb_c_battery(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_volume;
private:
  inline void cb_c_volume_i(Fl_Check_Button*, void*);
  static void cb_c_volume(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *c_network;
private:
  inline void cb_c_network_i(Fl_Check_Button*, void*);
  static void cb_c_network(Fl_Check_Button*, void*);
public:
  Fl_Button *choose_apps;
private:
  inline void cb_choose_apps_i(Fl_Button*, void*);
  static void cb_choose_apps(Fl_Button*, void*);
public:
  Fl_Menu_Button *clock_menu;
private:
  inline void cb_clock_menu_i(Fl_Menu_Button*, void*);
  static void cb_clock_menu(Fl_Menu_Button*, void*);
  static unsigned char menu_clock_menu_i18n_done;
  static Fl_Menu_Item menu_clock_menu[];
  inline void cb_Day_i(Fl_Menu_*, void*);
  static void cb_Day(Fl_Menu_*, void*);
  inline void cb_24_i(Fl_Menu_*, void*);
  static void cb_24(Fl_Menu_*, void*);
  inline void cb_12_i(Fl_Menu_*, void*);
  static void cb_12(Fl_Menu_*, void*);
  inline void cb_Year_i(Fl_Menu_*, void*);
  static void cb_Year(Fl_Menu_*, void*);
  inline void cb_Advanced_i(Fl_Menu_*, void*);
  static void cb_Advanced(Fl_Menu_*, void*);
public:
  Fl_Button *shutdown_icon;
private:
  inline void cb_shutdown_icon_i(Fl_Button*, void*);
  static void cb_shutdown_icon(Fl_Button*, void*);
public:
  Fl_Input *app_menu;
private:
  inline void cb_app_menu_i(Fl_Input*, void*);
  static void cb_app_menu(Fl_Input*, void*);
public:
  Fl_Button *icon_view;
private:
  inline void cb_icon_view_i(Fl_Button*, void*);
  static void cb_icon_view(Fl_Button*, void*);
public:
  Fl_Button *button_color;
private:
  inline void cb_button_color_i(Fl_Button*, void*);
  static void cb_button_color(Fl_Button*, void*);
public:
  Fl_Slider *o_slider;
private:
  inline void cb_o_slider_i(Fl_Slider*, void*);
  static void cb_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *o_slider_v;
private:
  inline void cb_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_o_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Button *menu_bg_color;
private:
  inline void cb_menu_bg_color_i(Fl_Button*, void*);
  static void cb_menu_bg_color(Fl_Button*, void*);
public:
  Fl_Button *menu_fg_color;
private:
  inline void cb_menu_fg_color_i(Fl_Button*, void*);
  static void cb_menu_fg_color(Fl_Button*, void*);
public:
  Fl_Button *task_bg_color;
private:
  inline void cb_task_bg_color_i(Fl_Button*, void*);
  static void cb_task_bg_color(Fl_Button*, void*);
public:
  Fl_Button *task_fg_color;
private:
  inline void cb_task_fg_color_i(Fl_Button*, void*);
  static void cb_task_fg_color(Fl_Button*, void*);
public:
  Fl_Button *b_color;
private:
  inline void cb_b_color_i(Fl_Button*, void*);
  static void cb_b_color(Fl_Button*, void*);
public:
  Fl_Slider *o_menu_slider;
private:
  inline void cb_o_menu_slider_i(Fl_Slider*, void*);
  static void cb_o_menu_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *o_menu_slider_v;
private:
  inline void cb_o_menu_slider_v_i(Fl_Value_Input*, void*);
  static void cb_o_menu_slider_v(Fl_Value_Input*, void*);
  inline void cb_Applications_i(Fl_Check_Button*, void*);
  static void cb_Applications(Fl_Check_Button*, void*);
  inline void cb_Y_i(Fl_Value_Input*, void*);
  static void cb_Y(Fl_Value_Input*, void*);
  inline void cb_X_i(Fl_Value_Input*, void*);
  static void cb_X(Fl_Value_Input*, void*);
  static unsigned char menu_Panel_i18n_done;
  static Fl_Menu_Item menu_Panel[];
  inline void cb_top_i(Fl_Menu_*, void*);
  static void cb_top(Fl_Menu_*, void*);
  inline void cb_bottom_i(Fl_Menu_*, void*);
  static void cb_bottom(Fl_Menu_*, void*);
  inline void cb_right_i(Fl_Menu_*, void*);
  static void cb_right(Fl_Menu_*, void*);
  inline void cb_left_i(Fl_Menu_*, void*);
  static void cb_left(Fl_Menu_*, void*);
  inline void cb_center_i(Fl_Menu_*, void*);
  static void cb_center(Fl_Menu_*, void*);
  inline void cb_fixed_i(Fl_Menu_*, void*);
  static void cb_fixed(Fl_Menu_*, void*);
  inline void cb_center1_i(Fl_Menu_*, void*);
  static void cb_center1(Fl_Menu_*, void*);
  inline void cb_fixed1_i(Fl_Menu_*, void*);
  static void cb_fixed1(Fl_Menu_*, void*);
public:
  Fl_Slider *w_slider;
private:
  inline void cb_w_slider_i(Fl_Slider*, void*);
  static void cb_w_slider(Fl_Slider*, void*);
public:
  Fl_Slider *h_slider;
private:
  inline void cb_h_slider_i(Fl_Slider*, void*);
  static void cb_h_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *height_input;
private:
  inline void cb_height_input_i(Fl_Value_Input*, void*);
  static void cb_height_input(Fl_Value_Input*, void*);
public:
  Fl_Slider *border_slider;
private:
  inline void cb_border_slider_i(Fl_Slider*, void*);
  static void cb_border_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *border_slider_v;
  Fl_Value_Input *width_input;
private:
  inline void cb_width_input_i(Fl_Value_Input*, void*);
  static void cb_width_input(Fl_Value_Input*, void*);
  inline void cb_Autohide_i(Fl_Check_Button*, void*);
  static void cb_Autohide(Fl_Check_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Button *save_button;
private:
  inline void cb_save_button_i(Fl_Button*, void*);
  static void cb_save_button(Fl_Button*, void*);
public:
  Fl_Double_Window* make_shortcut_window();
  Fl_Double_Window *shortcut_window;
private:
  inline void cb_Application_i(Fl_Button*, void*);
  static void cb_Application(Fl_Button*, void*);
  inline void cb_Icon_i(Fl_Button*, void*);
  static void cb_Icon(Fl_Button*, void*);
public:
  Fl_Input *app_command;
private:
  inline void cb_app_command_i(Fl_Input*, void*);
  static void cb_app_command(Fl_Input*, void*);
public:
  Fl_Box *app_icon_box;
  Fl_Input *tooltip;
  Fl_Output *icon_name;
private:
  inline void cb_Add1_i(Fl_Button*, void*);
  static void cb_Add1(Fl_Button*, void*);
public:
  Fl_Button *ok_button;
private:
  inline void cb_ok_button_i(Fl_Button*, void*);
  static void cb_ok_button(Fl_Button*, void*);
public:
  Fl_Check_Button *shortcut_border;
  Fl_Browser *shortcut_browser;
private:
  inline void cb_Remove1_i(Fl_Button*, void*);
  static void cb_Remove1(Fl_Button*, void*);
public:
  Fl_Double_Window* make_help_window();
  Fl_Double_Window *help_window;
private:
  inline void cb_HELP_i(Fl_Text_Display*, void*);
  static void cb_HELP(Fl_Text_Display*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  void one_color(Fl_Widget *o, const char* whichElement);
  void display(const char* filename);
  void displayAPPicon(const char* filename);
  void one_color_active(Fl_Widget *o, const char* whichElement);
  void panel_label(Fl_Menu_Button *o);
  Fl_Double_Window* new_panel_window();
  Fl_Double_Window *new_panel;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
public:
  unsigned int switch_panel(Fl_Menu_Item *o);
  void Menu_CB(int num);
  void hide_menu(Fl_Menu_Item * o, int whichOne);
};
#endif
