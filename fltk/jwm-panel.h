/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef jwm_panel_h
#define jwm_panel_h
#include <FL/Fl.H>
#include <libintl.h>
#include <string>
#include <algorithm>
#include <stdlib.h>
#include <iostream>
#include "../include/panel.hpp"
#include "../include/jwmrc.h"
#include "../include/ui.h"
#include "../data/icons/jsm-panel.xpm"
#include "../include/fltkfunctions.hpp"
//#include "jwm-menu.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Value_Output.H>

class PanelUI {
  int BUTTON_NUM;int JWM_VERSION; 
public:
  Fl_Double_Window* add_spacer();
  Fl_Double_Window *add_spacer_win;
private:
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Value_Input *spacer_w;
  Fl_Value_Input *spacer_h;
  void clear_shortcuts();
  void display(std::string filename);
  Fl_Double_Window* make_window();
  Fl_Double_Window *panel_window;
  Fl_Menu_Button *panel_chooser;
private:
  inline void cb_panel_chooser_i(Fl_Menu_Button*, void*);
  static void cb_panel_chooser(Fl_Menu_Button*, void*);
  static unsigned char menu_panel_chooser_i18n_done;
  static Fl_Menu_Item menu_panel_chooser[];
  inline void cb_Add_i(Fl_Menu_*, void*);
  static void cb_Add(Fl_Menu_*, void*);
  inline void cb_Panel_i(Fl_Menu_*, void*);
  static void cb_Panel(Fl_Menu_*, void*);
  inline void cb_Panel1_i(Fl_Menu_*, void*);
  static void cb_Panel1(Fl_Menu_*, void*);
  inline void cb_Panel2_i(Fl_Menu_*, void*);
  static void cb_Panel2(Fl_Menu_*, void*);
  inline void cb_Panel3_i(Fl_Menu_*, void*);
  static void cb_Panel3(Fl_Menu_*, void*);
  inline void cb_Remove_i(Fl_Menu_*, void*);
  static void cb_Remove(Fl_Menu_*, void*);
public:
  Fl_Group *apps_tab;
private:
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Browser *app_browser;
private:
  inline void cb_app_browser_i(Fl_Browser*, void*);
  static void cb_app_browser(Fl_Browser*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Button *choose_apps;
private:
  inline void cb_choose_apps_i(Fl_Button*, void*);
  static void cb_choose_apps(Fl_Button*, void*);
  inline void cb_98_i(Fl_Button*, void*);
  static void cb_98(Fl_Button*, void*);
  inline void cb_92_i(Fl_Button*, void*);
  static void cb_92(Fl_Button*, void*);
public:
  Fl_Button *menu_bg_color;
private:
  inline void cb_menu_bg_color_i(Fl_Button*, void*);
  static void cb_menu_bg_color(Fl_Button*, void*);
public:
  Fl_Button *menu_bg_color_a;
private:
  inline void cb_menu_bg_color_a_i(Fl_Button*, void*);
  static void cb_menu_bg_color_a(Fl_Button*, void*);
public:
  Fl_Button *menu_font_color;
private:
  inline void cb_menu_font_color_i(Fl_Button*, void*);
  static void cb_menu_font_color(Fl_Button*, void*);
public:
  Fl_Slider *o_menu_slider;
private:
  inline void cb_o_menu_slider_i(Fl_Slider*, void*);
  static void cb_o_menu_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *o_menu_slider_v;
private:
  inline void cb_o_menu_slider_v_i(Fl_Value_Input*, void*);
  static void cb_o_menu_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Button *b_color;
private:
  inline void cb_b_color_i(Fl_Button*, void*);
  static void cb_b_color(Fl_Button*, void*);
public:
  Fl_Button *button_color_font_a;
private:
  inline void cb_button_color_font_a_i(Fl_Button*, void*);
  static void cb_button_color_font_a(Fl_Button*, void*);
public:
  Fl_Slider *o_slider;
private:
  inline void cb_o_slider_i(Fl_Slider*, void*);
  static void cb_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *o_slider_v;
private:
  inline void cb_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_o_slider_v(Fl_Value_Input*, void*);
  inline void cb_Edit_i(Fl_Button*, void*);
  static void cb_Edit(Fl_Button*, void*);
public:
  Fl_Button *button_color;
private:
  inline void cb_button_color_i(Fl_Button*, void*);
  static void cb_button_color(Fl_Button*, void*);
public:
  Fl_Button *button_color_active;
private:
  inline void cb_button_color_active_i(Fl_Button*, void*);
  static void cb_button_color_active(Fl_Button*, void*);
public:
  Fl_Button *button_color_font;
private:
  inline void cb_button_color_font_i(Fl_Button*, void*);
  static void cb_button_color_font(Fl_Button*, void*);
public:
  Fl_Button *panel_font_a;
private:
  inline void cb_panel_font_a_i(Fl_Button*, void*);
  static void cb_panel_font_a(Fl_Button*, void*);
public:
  Fl_Button *panel_color_a;
private:
  inline void cb_panel_color_a_i(Fl_Button*, void*);
  static void cb_panel_color_a(Fl_Button*, void*);
public:
  Fl_Button *panel_font;
private:
  inline void cb_panel_font_i(Fl_Button*, void*);
  static void cb_panel_font(Fl_Button*, void*);
public:
  Fl_Button *menu_font_a;
private:
  inline void cb_menu_font_a_i(Fl_Button*, void*);
  static void cb_menu_font_a(Fl_Button*, void*);
  static unsigned char menu_decorations_i18n_done;
  static Fl_Menu_Item menu_decorations[];
public:
  Fl_Button *menu_outline;
private:
  inline void cb_menu_outline_i(Fl_Button*, void*);
  static void cb_menu_outline(Fl_Button*, void*);
  static unsigned char menu_Panel_i18n_done;
  static Fl_Menu_Item menu_Panel[];
  inline void cb_top_i(Fl_Menu_*, void*);
  static void cb_top(Fl_Menu_*, void*);
  inline void cb_bottom_i(Fl_Menu_*, void*);
  static void cb_bottom(Fl_Menu_*, void*);
  inline void cb_right_i(Fl_Menu_*, void*);
  static void cb_right(Fl_Menu_*, void*);
  inline void cb_left_i(Fl_Menu_*, void*);
  static void cb_left(Fl_Menu_*, void*);
public:
  Fl_Check_Button *autohide_check;
private:
  inline void cb_autohide_check_i(Fl_Check_Button*, void*);
  static void cb_autohide_check(Fl_Check_Button*, void*);
public:
  Fl_Slider *w_slider;
private:
  inline void cb_w_slider_i(Fl_Slider*, void*);
  static void cb_w_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *width_input;
private:
  inline void cb_width_input_i(Fl_Value_Input*, void*);
  static void cb_width_input(Fl_Value_Input*, void*);
public:
  Fl_Slider *h_slider;
private:
  inline void cb_h_slider_i(Fl_Slider*, void*);
  static void cb_h_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *height_input;
private:
  inline void cb_height_input_i(Fl_Value_Input*, void*);
  static void cb_height_input(Fl_Value_Input*, void*);
  inline void cb_X_i(Fl_Value_Input*, void*);
  static void cb_X(Fl_Value_Input*, void*);
  inline void cb_Y_i(Fl_Value_Input*, void*);
  static void cb_Y(Fl_Value_Input*, void*);
public:
  Fl_Output *halign;
  Fl_Output *valign;
  Fl_Slider *border_slider;
private:
  inline void cb_border_slider_i(Fl_Slider*, void*);
  static void cb_border_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *border_input;
private:
  inline void cb_border_input_i(Fl_Value_Input*, void*);
  static void cb_border_input(Fl_Value_Input*, void*);
public:
  Fl_Menu_Button *choose_autohide;
  static unsigned char menu_choose_autohide_i18n_done;
  static Fl_Menu_Item menu_choose_autohide[];
private:
  inline void cb_top1_i(Fl_Menu_*, void*);
  static void cb_top1(Fl_Menu_*, void*);
  inline void cb_bottom1_i(Fl_Menu_*, void*);
  static void cb_bottom1(Fl_Menu_*, void*);
  inline void cb_right1_i(Fl_Menu_*, void*);
  static void cb_right1(Fl_Menu_*, void*);
  inline void cb_left1_i(Fl_Menu_*, void*);
  static void cb_left1(Fl_Menu_*, void*);
  inline void cb_off_i(Fl_Menu_*, void*);
  static void cb_off(Fl_Menu_*, void*);
public:
  Fl_Output *autohide_pos;
  static unsigned char menu_halign_i18n_done;
  static Fl_Menu_Item menu_halign[];
private:
  inline void cb_fixed_i(Fl_Menu_*, void*);
  static void cb_fixed(Fl_Menu_*, void*);
  inline void cb_left2_i(Fl_Menu_*, void*);
  static void cb_left2(Fl_Menu_*, void*);
  inline void cb_center_i(Fl_Menu_*, void*);
  static void cb_center(Fl_Menu_*, void*);
  inline void cb_right2_i(Fl_Menu_*, void*);
  static void cb_right2(Fl_Menu_*, void*);
  static unsigned char menu_valign_i18n_done;
  static Fl_Menu_Item menu_valign[];
  inline void cb_fixed1_i(Fl_Menu_*, void*);
  static void cb_fixed1(Fl_Menu_*, void*);
  inline void cb_top2_i(Fl_Menu_*, void*);
  static void cb_top2(Fl_Menu_*, void*);
  inline void cb_center1_i(Fl_Menu_*, void*);
  static void cb_center1(Fl_Menu_*, void*);
  inline void cb_bottom2_i(Fl_Menu_*, void*);
  static void cb_bottom2(Fl_Menu_*, void*);
  static unsigned char menu_layout_i18n_done;
  static Fl_Menu_Item menu_layout[];
  inline void cb_horizontal_i(Fl_Menu_*, void*);
  static void cb_horizontal(Fl_Menu_*, void*);
  inline void cb_vertical_i(Fl_Menu_*, void*);
  static void cb_vertical(Fl_Menu_*, void*);
public:
  Fl_Output *layOut;
  static unsigned char menu_layer_i18n_done;
  static Fl_Menu_Item menu_layer[];
private:
  inline void cb_below_i(Fl_Menu_*, void*);
  static void cb_below(Fl_Menu_*, void*);
  inline void cb_normal_i(Fl_Menu_*, void*);
  static void cb_normal(Fl_Menu_*, void*);
  inline void cb_above_i(Fl_Menu_*, void*);
  static void cb_above(Fl_Menu_*, void*);
public:
  Fl_Output *layer;
private:
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Button *save_button;
private:
  inline void cb_save_button_i(Fl_Button*, void*);
  static void cb_save_button(Fl_Button*, void*);
public:
  Fl_Double_Window* add_indicator();
  Fl_Double_Window *indicator_win;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
  inline void cb_CLOSE_i(Fl_Button*, void*);
  static void cb_CLOSE(Fl_Button*, void*);
public:
  Fl_Browser *add_indicator_browser;
private:
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Double_Window* add_to_panel();
  Fl_Double_Window *add_2_panel;
private:
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
public:
  Fl_Browser *panel_items_browser;
private:
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
  inline void cb_CLOSE1_i(Fl_Button*, void*);
  static void cb_CLOSE1(Fl_Button*, void*);
public:
  Fl_Double_Window* clock_window();
  Fl_Double_Window *clock_config_window;
private:
  inline void cb_OK3_i(Fl_Button*, void*);
  static void cb_OK3(Fl_Button*, void*);
public:
  Fl_Input *clock_style;
private:
  inline void cb_clock_style_i(Fl_Input*, void*);
  static void cb_clock_style(Fl_Input*, void*);
  inline void cb_4_i(Fl_Browser*, void*);
  static void cb_4(Fl_Browser*, void*);
public:
  Fl_Output *clock_display;
private:
  inline void cb_Notes_i(Fl_Button*, void*);
  static void cb_Notes(Fl_Button*, void*);
  inline void cb_Modifier_i(Fl_Button*, void*);
  static void cb_Modifier(Fl_Button*, void*);
public:
  Fl_Double_Window* clock_notes_window();
  Fl_Double_Window *clock_info;
private:
  inline void cb_CLOSE2_i(Fl_Button*, void*);
  static void cb_CLOSE2(Fl_Button*, void*);
public:
  Fl_Double_Window* clock_info_window();
  Fl_Double_Window *clock_modifier_notes;
private:
  inline void cb_CLOSE3_i(Fl_Button*, void*);
  static void cb_CLOSE3(Fl_Button*, void*);
  inline void cb_See_i(Fl_Button*, void*);
  static void cb_See(Fl_Button*, void*);
public:
  Fl_Double_Window* config_applist_window();
  Fl_Double_Window *conf_applist_window;
private:
  inline void cb_OK4_i(Fl_Button*, void*);
  static void cb_OK4(Fl_Button*, void*);
public:
  Fl_Button *task_bg_color;
private:
  inline void cb_task_bg_color_i(Fl_Button*, void*);
  static void cb_task_bg_color(Fl_Button*, void*);
public:
  Fl_Button *task_fg_color;
private:
  inline void cb_task_fg_color_i(Fl_Button*, void*);
  static void cb_task_fg_color(Fl_Button*, void*);
  inline void cb_Max_i(Fl_Value_Input*, void*);
  static void cb_Max(Fl_Value_Input*, void*);
  inline void cb_Height_i(Fl_Value_Input*, void*);
  static void cb_Height(Fl_Value_Input*, void*);
  inline void cb_Labeled_i(Fl_Check_Button*, void*);
  static void cb_Labeled(Fl_Check_Button*, void*);
public:
  Fl_Double_Window* config_button_window(int input_num);
  Fl_Double_Window *conf_button_window;
  Fl_Input *button_label;
  Fl_Input *button_icon_name;
  Fl_Button *button_icon_view;
private:
  inline void cb_button_icon_view_i(Fl_Button*, void*);
  static void cb_button_icon_view(Fl_Button*, void*);
  static unsigned char menu_Mouse_i18n_done;
  static Fl_Menu_Item menu_Mouse[];
  inline void cb_11_i(Fl_Menu_*, void*);
  static void cb_11(Fl_Menu_*, void*);
  inline void cb_21_i(Fl_Menu_*, void*);
  static void cb_21(Fl_Menu_*, void*);
  inline void cb_31_i(Fl_Menu_*, void*);
  static void cb_31(Fl_Menu_*, void*);
public:
  Fl_Value_Output *button_val;
  Fl_Input *button_prog;
  Fl_Button *prog_conf_gear;
private:
  inline void cb_prog_conf_gear_i(Fl_Button*, void*);
  static void cb_prog_conf_gear(Fl_Button*, void*);
public:
  Fl_Output *button_menu;
  Fl_Button *menu_conf_gear;
private:
  inline void cb_menu_conf_gear_i(Fl_Button*, void*);
  static void cb_menu_conf_gear(Fl_Button*, void*);
  inline void cb_OK5_i(Fl_Button*, void*);
  static void cb_OK5(Fl_Button*, void*);
public:
  Fl_Double_Window* config_clock_window();
  Fl_Double_Window *conf_clock_window;
  Fl_Menu_Button *clock_menu;
  static unsigned char menu_clock_menu_i18n_done;
  static Fl_Menu_Item menu_clock_menu[];
private:
  inline void cb_Day_i(Fl_Menu_*, void*);
  static void cb_Day(Fl_Menu_*, void*);
  inline void cb_24_i(Fl_Menu_*, void*);
  static void cb_24(Fl_Menu_*, void*);
  inline void cb_12_i(Fl_Menu_*, void*);
  static void cb_12(Fl_Menu_*, void*);
  inline void cb_Year_i(Fl_Menu_*, void*);
  static void cb_Year(Fl_Menu_*, void*);
  inline void cb_Advanced_i(Fl_Menu_*, void*);
  static void cb_Advanced(Fl_Menu_*, void*);
public:
  Fl_Output *clock_displayer;
private:
  inline void cb_Width_i(Fl_Value_Input*, void*);
  static void cb_Width(Fl_Value_Input*, void*);
  inline void cb_Height1_i(Fl_Value_Input*, void*);
  static void cb_Height1(Fl_Value_Input*, void*);
  static unsigned char menu_Mouse1_i18n_done;
  static Fl_Menu_Item menu_Mouse1[];
  inline void cb_13_i(Fl_Menu_*, void*);
  static void cb_13(Fl_Menu_*, void*);
  inline void cb_22_i(Fl_Menu_*, void*);
  static void cb_22(Fl_Menu_*, void*);
  inline void cb_32_i(Fl_Menu_*, void*);
  static void cb_32(Fl_Menu_*, void*);
public:
  Fl_Value_Output *output_button_val;
  Fl_Output *clock_button_menu;
  Fl_Button *clock_menu_conf_gear;
private:
  inline void cb_clock_menu_conf_gear_i(Fl_Button*, void*);
  static void cb_clock_menu_conf_gear(Fl_Button*, void*);
public:
  Fl_Input *clock_prog;
  Fl_Button *clock_prog_conf_gear;
private:
  inline void cb_clock_prog_conf_gear_i(Fl_Button*, void*);
  static void cb_clock_prog_conf_gear(Fl_Button*, void*);
  inline void cb_OK6_i(Fl_Button*, void*);
  static void cb_OK6(Fl_Button*, void*);
public:
  Fl_Button *clock_fg;
private:
  inline void cb_clock_fg_i(Fl_Button*, void*);
  static void cb_clock_fg(Fl_Button*, void*);
  inline void cb_Background_i(Fl_Button*, void*);
  static void cb_Background(Fl_Button*, void*);
public:
  Fl_Double_Window* config_indicator_window();
  Fl_Double_Window *conf_indicator_window;
private:
  inline void cb_OK7_i(Fl_Button*, void*);
  static void cb_OK7(Fl_Button*, void*);
public:
  Fl_Browser *indicator_browser;
private:
  inline void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
  inline void cb_6_i(Fl_Button*, void*);
  static void cb_6(Fl_Button*, void*);
  inline void cb_Width1_i(Fl_Value_Input*, void*);
  static void cb_Width1(Fl_Value_Input*, void*);
public:
  Fl_Double_Window* configure_manually_window(std::string icon);
  Fl_Double_Window *conf_manual_window;
  Fl_Input *manually_in;
private:
  inline void cb_OK8_i(Fl_Button*, void*);
  static void cb_OK8(Fl_Button*, void*);
public:
  Fl_Input *label_input;
private:
  inline void cb_7_i(Fl_Button*, void*);
  static void cb_7(Fl_Button*, void*);
public:
  Fl_Input *hid_in;
  Fl_Input *icon_file;
  Fl_Input *tooltip_label;
  Fl_Double_Window* config_menu_window(std::string file);
  Fl_Double_Window *conf_menu_window;
private:
  inline void cb_OK9_i(Fl_Button*, void*);
  static void cb_OK9(Fl_Button*, void*);
public:
  Fl_Input *app_menu;
  Fl_Button *icon_view;
private:
  inline void cb_icon_view_i(Fl_Button*, void*);
  static void cb_icon_view(Fl_Button*, void*);
public:
  Fl_Input *hidden_icon_name;
  Fl_Output *tester;
private:
  inline void cb_8_i(Fl_Button*, void*);
  static void cb_8(Fl_Button*, void*);
public:
  Fl_Double_Window* config_swallow_window(int input_num);
  Fl_Double_Window *conf_swallow_window;
private:
  inline void cb_OKa_i(Fl_Button*, void*);
  static void cb_OKa(Fl_Button*, void*);
public:
  Fl_Input *swallow_name;
private:
  inline void cb_swallow_name_i(Fl_Input*, void*);
  static void cb_swallow_name(Fl_Input*, void*);
public:
  Fl_Input *swallow_config;
private:
  inline void cb_swallow_config_i(Fl_Input*, void*);
  static void cb_swallow_config(Fl_Input*, void*);
  inline void cb_Width2_i(Fl_Value_Input*, void*);
  static void cb_Width2(Fl_Value_Input*, void*);
  inline void cb_Height2_i(Fl_Value_Input*, void*);
  static void cb_Height2(Fl_Value_Input*, void*);
public:
  Fl_Double_Window* config_switcher_window();
  Fl_Double_Window *conf_switcher;
private:
  inline void cb_OKb_i(Fl_Button*, void*);
  static void cb_OKb(Fl_Button*, void*);
public:
  Fl_Button *a_fg;
private:
  inline void cb_a_fg_i(Fl_Button*, void*);
  static void cb_a_fg(Fl_Button*, void*);
public:
  Fl_Button *a_bg;
private:
  inline void cb_a_bg_i(Fl_Button*, void*);
  static void cb_a_bg(Fl_Button*, void*);
public:
  Fl_Button *t_fg;
private:
  inline void cb_t_fg_i(Fl_Button*, void*);
  static void cb_t_fg(Fl_Button*, void*);
public:
  Fl_Button *t_bg;
private:
  inline void cb_t_bg_i(Fl_Button*, void*);
  static void cb_t_bg(Fl_Button*, void*);
public:
  Fl_Value_Input *num_desktop_w;
private:
  inline void cb_num_desktop_w_i(Fl_Value_Input*, void*);
  static void cb_num_desktop_w(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *num_desktop_h;
private:
  inline void cb_num_desktop_h_i(Fl_Value_Input*, void*);
  static void cb_num_desktop_h(Fl_Value_Input*, void*);
  inline void cb_Labled_i(Fl_Check_Button*, void*);
  static void cb_Labled(Fl_Check_Button*, void*);
public:
  Fl_Double_Window* make_shortcut_window();
  Fl_Double_Window *shortcut_window;
private:
  inline void cb_Application_i(Fl_Button*, void*);
  static void cb_Application(Fl_Button*, void*);
public:
  Fl_Input *app_command;
private:
  inline void cb_app_command_i(Fl_Input*, void*);
  static void cb_app_command(Fl_Input*, void*);
public:
  Fl_Input *tooltip;
private:
  inline void cb_9_i(Fl_Button*, void*);
  static void cb_9(Fl_Button*, void*);
public:
  Fl_Button *ok_button;
private:
  inline void cb_ok_button_i(Fl_Button*, void*);
  static void cb_ok_button(Fl_Button*, void*);
public:
  Fl_Check_Button *shortcut_border;
  Fl_Browser *shortcut_browser;
private:
  inline void cb_a_i(Fl_Button*, void*);
  static void cb_a(Fl_Button*, void*);
public:
  Fl_Box *icon_name;
  Fl_Button *app_icon_box;
private:
  inline void cb_app_icon_box_i(Fl_Button*, void*);
  static void cb_app_icon_box(Fl_Button*, void*);
  inline void cb_CLOSE4_i(Fl_Button*, void*);
  static void cb_CLOSE4(Fl_Button*, void*);
public:
  Fl_Double_Window* new_panel_window();
  Fl_Double_Window *new_panel;
private:
  inline void cb_OKc_i(Fl_Button*, void*);
  static void cb_OKc(Fl_Button*, void*);
public:
  Fl_Double_Window* no_config();
  void add_item();
  void cancel_button();
  void change_manual_item(std::string input, std::string old_input);
  void change_panel_position(std::string position);
  void change_clock(std::string clockFMT);
  void coordinate(const char* xy, Fl_Value_Input *o, int get1_set2);
  void config_Item(std::string whichItem);
  void current_clock_text();
  void displayAPPicon(std::string filename,Fl_Widget* widget);
  void get_clock_button_stuff(int button);
  void get_button_stuff(int button);
  void get_button_stuff(int button,Fl_Input *input_prog,Fl_Input *input_menu,Fl_Value_Output *mouse_button_current);
  void get_tray_element_attrib(Fl_Input *o, std::string attribute,int num);
  void Menu_CB(int num);
  void move_up();
  void move_down();
  void ok();
  void remove_indicator();
  void save_user_clock();
  void save_traybutton();
  Fl_Double_Window* spacer_config();
  Fl_Double_Window *conf_spacer_win;
private:
  inline void cb_OKd_i(Fl_Button*, void*);
  static void cb_OKd(Fl_Button*, void*);
  inline void cb_Width3_i(Fl_Value_Input*, void*);
  static void cb_Width3(Fl_Value_Input*, void*);
  inline void cb_Height3_i(Fl_Value_Input*, void*);
  static void cb_Height3(Fl_Value_Input*, void*);
};
#endif
