# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <algorithm>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include "../include/tinyxml2.h"} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include "../include/flPanel.h"} {public global
} 

decl {\#include "../include/Apps.h"} {public global
} 

decl {\#include <FL/Fl_PNG_Image.H>} {public global
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include <FL/Fl_XPM_Image.H>} {public global
} 

decl {\#include <FL/Fl_Browser.H>} {public global
} 

class PanelUI {open
} {
  Function {make_window()} {open
  } {
    code {flPanel panel;
panel.load();
panel.saveChangesTemp();} {}
    Fl_Window panel_window {
      label {Panel Settings} open selected
      xywh {114 303 335 525} type Double color 31 selection_color 22 align 80 hide resizable
      code0 {//o->icon("/usr/share/icons/jsm-panel.png");}
      code1 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Scroll {} {open
        xywh {0 0 355 665} color 31
      } {
        Fl_Menu_Button panel_chooser {
          callback {flPanel panel;
std::string panelLabel = panel.convert(panel.currentPanel());
std::string LABEL = "Panel ";
LABEL +=panelLabel;
o->copy_label(LABEL.c_str());}
          xywh {25 20 115 25} box GTK_UP_BOX selection_color 80 when 3
          code0 {flPanel panel;int n = panel.currentPanel();}
          code1 {std::string panelLabel = panel.convert(n);}
          code2 {std::string LABEL = "Panel ";LABEL +=panelLabel;}
          code3 {o->copy_label(LABEL.c_str());}
        } {
          MenuItem {} {
            label {Add a Panel  +}
            callback {flPanel panel;
if((panel.numPanels())>=4){
  new_panel_window()->show();
}
else{
  panel.addPanel();
  Menu_CB(panel.numPanels());
}}
            xywh {15 15 100 20}
          }
          MenuItem {} {
            label {Panel 1}
            callback {Menu_CB(1);}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Panel 2}
            callback {Menu_CB(2);}
            xywh {10 10 100 20}
            code0 {hide_menu(o,2);}
          }
          MenuItem {} {
            label {Panel 3}
            callback {Menu_CB(3);}
            xywh {20 20 100 20}
            code0 {hide_menu(o,3);}
          }
          MenuItem {} {
            label {Panel 4}
            callback {Menu_CB(4);}
            xywh {30 30 100 20}
            code0 {hide_menu(o,4);}
          }
          MenuItem {} {
            label {Remove Current  Panel}
            callback {flPanel panel;
panel.deletePanel();
int a = panel.numPanels();
Menu_CB(a);}
            xywh {25 25 100 20}
          }
        }
        Fl_Box {} {
          xywh {130 80 190 25} box GTK_DOWN_BOX color 42 hide
        }
        Fl_Tabs {} {open
          xywh {5 60 350 415} box PLASTIC_THIN_UP_BOX
        } {
          Fl_Group {} {
            label Apps open
            xywh {10 90 345 385}
          } {
            Fl_Box {} {
              label {Panel Apps}
              xywh {90 90 150 45} labelfont 1 labelsize 18
            }
            Fl_Button {} {
              label {-}
              callback {remove_app();}
              xywh {80 425 35 25} box GTK_UP_BOX labelfont 1 labelsize 34
            }
            Fl_Browser app_browser {
              callback {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  //Do I really want to do this?
 // config_Item(result);
}}
              xywh {30 130 290 275} type Hold box GTK_DOWN_BOX selection_color 72
              code0 {Apps app;}
              code1 {app.populate(o);}
            }
            Fl_Button {} {
              label Configure
              callback {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  config_Item(result);
}}
              xywh {125 425 85 25} box GTK_UP_BOX
            }
            Fl_Button choose_apps {
              label {@+}
              callback {add_to_panel()->show();}
              xywh {35 425 35 25} box GTK_UP_BOX
            }
            Fl_Button {} {
              label {@+98>}
              callback {move_up()}
              xywh {230 425 40 30} box GTK_UP_BOX hide deactivate
            }
            Fl_Button {} {
              label {@+92>}
              callback {move_down()}
              xywh {275 425 40 30} box GTK_UP_BOX hide deactivate
            }
          }
          Fl_Group {} {
            label Appearance
            xywh {5 85 340 335} hide
          } {
            Fl_Box {} {
              label {Menu Background}
              xywh {32 135 129 25}
            }
            Fl_Button menu_bg_color {
              callback {one_color(o,"MenuStyle");}
              xywh {182 134 60 25} box GTK_UP_BOX
              code0 {flPanel fl_panel;unsigned int c;}
              code1 {unsigned int color = fl_panel.getBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_fg_color {
              callback {one_color_active(o,"MenuStyle");}
              xywh {182 176 60 25} box GTK_UP_BOX
              code0 {flPanel panel;unsigned int c;}
              code1 {unsigned int color = panel.getActiveBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_font_color {
              callback {one_color_Font(o,"MenuStyle");}
              xywh {182 219 60 25} box GTK_UP_BOX
              code0 {flPanel panel;unsigned int c;}
              code1 {unsigned int color = panel.getFontColor(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Slider o_menu_slider {
              label {Opacity of Menu }
              callback {opacity(o_menu_slider_v,o,"MenuStyle");}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {152 262 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 4 step 0.02 value 1
              code0 {flPanel panel;}
              code1 {float h = panel.getOpacity("MenuStyle");}
              code2 {o->value(h);}
            }
            Fl_Value_Input o_menu_slider_v {
              label {%}
              callback {opacity(o,o_menu_slider,"MenuStyle");}
              xywh {257 262 40 25} box GTK_DOWN_BOX labelsize 10 align 8
              code0 {float v = o_menu_slider->value();}
              code1 {o->value(v*100.0f);}
            }
            Fl_Box {} {
              label {Menu Selection}
              xywh {31 175 112 25}
            }
            Fl_Box {} {
              label {Panel Button Color }
              xywh {32 350 135 15}
            }
            Fl_Button b_color {
              callback {one_color(o, "TrayStyle");}
              xywh {182 304 60 25} box GTK_UP_BOX
              code0 {flPanel fl_panel;unsigned int c;}
              code1 {unsigned int color = fl_panel.getBackground(c, "TrayStyle");}
              code2 {o->color(color);}
            }
            Fl_Button button_color {
              callback {one_color(o,"TrayButtonStyle");}
              xywh {182 347 60 25} box GTK_UP_BOX
              code0 {flPanel panel;unsigned int c;}
              code1 {unsigned int color = panel.getBackground(c,"TrayButtonStyle");}
              code2 {o->color(color);}
            }
            Fl_Slider o_slider {
              label {Opacity of Panel  }
              callback {opacity(o_slider_v,o_slider,"TrayStyle");}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {157 390 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 4 when 4 step 0.02 value 1
              code0 {flPanel panel;}
              code1 {float h = panel.getOpacity("TrayStyle");}
              code2 {o->value(h);}
            }
            Fl_Value_Input o_slider_v {
              label {%}
              callback {opacity(o_slider_v,o_slider,"TrayStyle");}
              xywh {257 390 40 25} box GTK_DOWN_BOX labelsize 10 align 8
              code0 {float v = o_slider->value();}
              code1 {o->value(v*100.0f);}
            }
            Fl_Box {} {
              label {Panel Color }
              xywh {32 310 85 15}
            }
            Fl_Box {} {
              label {Menu Font Color}
              xywh {30 220 120 25}
            }
          }
          Fl_Group {} {
            label {Size And Position}
            xywh {10 85 330 380} hide
          } {
            Fl_Box {} {
              label {Advanced Options}
              xywh {85 295 185 30} labelfont 1 labelsize 18
            }
            Fl_Value_Input {} {
              label {Y position of panel}
              callback {coordinate("y",o,2);}
              xywh {230 375 25 25} box GTK_DOWN_BOX minimum -100 maximum 2000
              code0 {coordinate("y",o,1);}
            }
            Fl_Value_Input {} {
              label {X position of panel}
              callback {coordinate("x",o,2);}
              xywh {230 330 25 25} box GTK_DOWN_BOX minimum -100 maximum 2000
              code0 {coordinate("x",o,1);}
            }
            Fl_Menu_Button {} {
              label {Panel Position} open
              xywh {20 110 125 25} box GTK_UP_BOX selection_color 80
            } {
              MenuItem {} {
                label top
                callback {panel_position("top");}
                xywh {30 30 100 20}
              }
              MenuItem {} {
                label bottom
                callback {panel_position("bottom");}
                xywh {40 40 100 20}
              }
              MenuItem {} {
                label right
                callback {panel_position("right");}
                xywh {50 50 100 20}
              }
              MenuItem {} {
                label left
                callback {panel_position("left");}
                xywh {60 60 100 20}
              }
            }
            Fl_Slider w_slider {
              label {Width of Panel  }
              callback {width_height_border(o,width_input,"width");}
              tooltip {0 is Full Length} xywh {20 190 200 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 4 maximum 3000 step 1 value 32
              code0 {flPanel panel;}
              code1 {int h = panel.getWidth();}
              code2 {o->value(h);}
            }
            Fl_Slider h_slider {
              label {Height of Panel  }
              callback {width_height_border(o,height_input,"height");}
              tooltip {0 bases the height on the items} xywh {20 260 200 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 4 maximum 3000 step 1 value 32
              code0 {flPanel panel;}
              code1 {int h = panel.getHeight();}
              code2 {o->value(h);}
            }
            Fl_Value_Input height_input {
              label pixels
              callback {width_height_border(h_slider,o,"height");}
              xywh {230 260 55 25} box GTK_DOWN_BOX labelsize 10 align 8 maximum 3000
              code0 {int v = h_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider border_slider {
              label {Width of Panel Border}
              callback {width_height_border(o,border_input,"border");}
              xywh {75 435 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 4 maximum 32 step 1
              code0 {flPanel panel;}
              code1 {int border =panel.getBorder();}
              code2 {o->value(border);}
            }
            Fl_Value_Input width_input {
              label pixels
              callback {width_height_border(w_slider,o,"width");}
              xywh {230 190 55 25} box GTK_DOWN_BOX labelsize 10 align 8 maximum 3000
              code0 {int v = w_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Check_Button autohide_check {
              label {Autohide?}
              callback {flPanel fl_panel;
int autohide=o->value();
bool autohideValue = bool(autohide);
fl_panel.panelAutohide(autohideValue);}
              tooltip {This will make the Panel hide when you aren't using it.} xywh {230 140 95 25} down_box GTK_DOWN_BOX selection_color 59 when 1
            }
            Fl_Value_Input border_input {
              label pixels
              callback {width_height_border(border_slider,o,"border");}
              xywh {230 435 40 25} box GTK_DOWN_BOX labelsize 10 align 8 maximum 3000
              code0 {int v = border_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Menu_Button choose_autohide {
              label {Autohide Position} open
              xywh {170 110 150 25} box GTK_UP_BOX selection_color 80
              code0 {autohide();}
            } {
              MenuItem {} {
                label top
                callback {autohide_position("top");}
                xywh {40 40 100 20}
              }
              MenuItem {} {
                label bottom
                callback {autohide_position("bottom");}
                xywh {50 50 100 20}
              }
              MenuItem {} {
                label right
                callback {autohide_position("right");}
                xywh {60 60 100 20}
              }
              MenuItem {} {
                label left
                callback {autohide_position("left");}
                xywh {70 70 100 20}
              }
            }
          }
        }
        Fl_Button {} {
          label Cancel
          callback {cancel_button();}
          xywh {209 490 57 25} box GTK_UP_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {ok();}
          tooltip {Write to configuration file} xywh {275 490 45 25} box GTK_UP_BOX color 61 selection_color 59 labelcolor 55
        }
      }
    }
  }
  Function {add_indicator()} {} {
    Fl_Window indicator_win {
      label {Add Indicator} open
      xywh {552 213 230 185} type Double hide
      code0 {Config config; config.under_mouse(o);}
    } {
      Fl_Button {} {
        label Battery
        callback {Apps app;
app.addBattery();
app.getIndicators(indicator_browser);}
        xywh {65 15 90 30} box GTK_UP_BOX
      }
      Fl_Button {} {
        label Volume
        callback {Apps app;
app.addVolume();
app.getIndicators(indicator_browser);}
        xywh {65 55 90 30} box GTK_UP_BOX
      }
      Fl_Button {} {
        label Network
        callback {Apps app;
app.addNetworkMonitor();
app.getIndicators(indicator_browser);}
        xywh {65 95 90 30} box GTK_UP_BOX
      }
      Fl_Button {} {
        label OK
        callback {indicator_win->hide();}
        xywh {165 145 60 30} box GTK_UP_BOX color 61 selection_color 59 labelcolor 7
      }
    }
  }
  Function {add_to_panel()} {} {
    Fl_Window add_2_panel {
      label {Add to Panel}
      xywh {685 471 190 290} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {flPanel panel;
panel.saveChanges();
add_2_panel->hide();}
        xywh {130 250 45 30} box GTK_UP_BOX color 62 selection_color 60 labelcolor 7
      }
      Fl_Browser panel_items_browser {
        xywh {20 25 160 215} type Hold box GTK_DOWN_BOX selection_color 72
        code0 {new_panel_items(o);}
      }
      Fl_Button {} {
        label {@+}
        callback {add_item()}
        xywh {20 250 35 25} box GTK_UP_BOX
      }
    }
  }
  Function {clock_window()} {} {
    Fl_Window clock_config_window {
      label {Configure Clock}
      xywh {249 383 480 580} type Double hide resizable
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {save_user_clock();}
        xywh {375 535 75 30} box GTK_UP_BOX color 61 labelcolor 7 resizable
      }
      Fl_Input clock_style {
        label style
        callback {const char* style = o->value();
Apps app;
std::string result = app.getClock(style);
clock_display->redraw_label();
clock_display->copy_label(result.c_str());
clock_display->redraw();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
        xywh {70 535 290 30} box GTK_DOWN_BOX selection_color 72 when 3
      }
      Fl_Browser {} {
        callback {std::string item=o->text(o->value());
item= item.substr(0,2);
clock_style->insert(item.c_str());
std::cerr<<"Click Clock: "<<item<<std::endl;}
        xywh {15 5 455 450} type Hold box GTK_DOWN_BOX selection_color 72
        code1 {Apps apps;apps.populateClocks(o);}
      }
      Fl_Output clock_display {
        xywh {35 500 385 25} box NO_BOX labelfont 1 labelsize 18 align 1
      }
    }
  }
  Function {config_applist_window()} {} {
    Fl_Window conf_applist_window {
      label {Configure Running App List}
      xywh {703 532 310 105} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {conf_applist_window->hide();}
        xywh {235 35 60 30} box GTK_UP_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Button task_bg_color {
        callback {one_color(o,"TaskListStyle");}
        xywh {140 55 60 25} box GTK_UP_BOX
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getBackground(c,"TaskListStyle");}
        code2 {o->color(color);}
      }
      Fl_Button task_fg_color {
        callback {one_color_active(o,"TaskListStyle");}
        xywh {140 20 60 25} box GTK_UP_BOX
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getActiveBackground(c,"TaskListStyle");}
        code2 {o->color(color);}
      }
      Fl_Box {} {
        label {Open Apps}
        xywh {30 55 95 25}
      }
      Fl_Box {} {
        label {Current App}
        xywh {30 20 95 25}
      }
    }
  }
  Function {config_clock_window()} {} {
    Fl_Window conf_clock_window {
      label {Configure Clock}
      xywh {618 568 355 130} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Menu_Button clock_menu {
        label {Clock Format} open
        xywh {15 20 130 25} box GTK_UP_BOX selection_color 72
      } {
        MenuItem {} {
          label {Day name Month Day 12 Hour}
          callback {Apps apps;
apps.changeClock("Day");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%a, %e %b %l:%M %p} xywh {35 35 100 20}
        }
        MenuItem {} {
          label {24 Hour Clock}
          callback {Apps apps;
apps.changeClock("24");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%H:%M} xywh {35 35 100 20}
        }
        MenuItem {} {
          label {12 Hour Clock}
          callback {Apps apps;
apps.changeClock("12");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%l:%M %p} xywh {35 35 100 20}
        }
        MenuItem {} {
          label {Year Month Day 24 Hour clock}
          callback {Apps apps;
apps.changeClock("Year");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%F %H:%M %p} xywh {35 35 100 20}
        }
        MenuItem {} {
          label {(Advanced) User Defined}
          callback {clock_window()->show();}
          tooltip {Use this to add a custom Unix time} xywh {45 45 100 20}
        }
      }
      Fl_Button {} {
        label OK
        callback {conf_clock_window->hide();}
        xywh {285 90 60 30} box GTK_UP_BOX color 61 labelcolor 7
      }
      Fl_Output clock_displayer {
        xywh {150 38 160 30} box NO_BOX align 1
        code0 {Apps app;}
        code1 {std::string clock_text = app.getClock();}
        code2 {o->copy_label(clock_text.c_str());}
        code3 {o->redraw_label();}
      }
      Fl_Input {} {
        label {Program to Launch}
        tooltip {Usually used for a calendar or analog clock} xywh {155 60 185 25} box GTK_DOWN_BOX selection_color 72 deactivate
        code0 {o->value("xclock");}
      }
    }
  }
  Function {config_indicator_window()} {} {
    Fl_Window conf_indicator_window {
      label {Configure Indicators}
      xywh {708 549 285 260} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {conf_indicator_window->hide();}
        xywh {210 215 60 30} box GTK_UP_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Browser indicator_browser {
        xywh {20 10 250 170} type Hold box GTK_DOWN_BOX selection_color 80
        code0 {Apps app;}
        code1 {app.getIndicators(o);}
      }
      Fl_Button {} {
        label {-}
        callback {remove_indicator();}
        xywh {90 195 35 25} box GTK_UP_BOX labelfont 1 labelsize 34
      }
      Fl_Button {} {
        label {@+}
        callback {add_indicator()->show();}
        xywh {45 195 35 25} box GTK_UP_BOX
      }
    }
  }
  Function {configure_manually_window()} {} {
    Fl_Window conf_manual_window {
      label {Manual Editing}
      xywh {771 577 370 75} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Input {} {
        callback {const char* result = o->label();
unsigned int appLine=app_browser->value();
std::string old_one=app_browser->text(app_browser->value());}
        xywh {25 20 215 30} box GTK_DOWN_BOX
        code0 {unsigned int appLine=app_browser->value();}
        code1 {std::string result=app_browser->text(app_browser->value());}
        code2 {o->label(result.c_str());}
      }
      Fl_Button {} {
        label OK
        callback {conf_manual_window->hide();}
        xywh {290 20 60 30} box GTK_UP_BOX color 61 labelcolor 7
      }
    }
  }
  Function {config_menu_window()} {} {
    Fl_Window conf_menu_window {
      label {Configure Menu}
      xywh {705 626 285 180} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {conf_menu_window->hide();}
        xywh {205 140 60 30} box GTK_UP_BOX color 61 labelcolor 7
      }
      Fl_Input app_menu {
        label {Menu Label}
        callback {flPanel panel;
const char * label=o->value();
panel.menuLabel(label);}
        xywh {110 15 130 25} box GTK_DOWN_BOX color 53 selection_color 72 when 1
        code0 {flPanel panel;}
        code1 {std::string l= panel.getLabelMenu(5);}
        code2 {o->value(l.c_str());}
      }
      Fl_Button icon_view {
        callback {const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
flPanel panel;
const char *p="*.{xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	panel.setImageMenu(result,5);
	display(result);
}}
        xywh {135 45 50 50} box GTK_DOWN_BOX align 128
        code0 {flPanel panel;}
        code1 {std::string icon =panel.getImageMenu(5);}
        code2 {display(icon.c_str());}
      }
      Fl_Menu_Button {} {
        label {Menu Type} open
        xywh {40 125 105 30} box GTK_UP_BOX selection_color 80 deactivate
      } {
        MenuItem {} {
          label Traditional
          callback {change_menu(1);}
          xywh {5 5 100 20}
        }
        MenuItem {} {
          label {Gnome 2}
          callback {change_menu(2);}
          xywh {5 5 100 20}
        }
      }
      Fl_Box {} {
        label Icon
        xywh {45 60 70 25}
      }
    }
  }
  Function {config_shutdown_window()} {} {
    Fl_Window conf_shut_window {
      label {Configure Shutdown}
      xywh {766 613 285 120} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button shutdown_icon {
        label {Shutdown Icon}
        callback {Apps apps;
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{svg,SVG,xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	apps.setShutdownImage(result);
}}
        xywh {15 25 125 30} box GTK_UP_BOX
      }
      Fl_Button {} {
        label OK
        callback {conf_shut_window->hide();}
        xywh {210 75 60 30} box GTK_UP_BOX color 61 labelcolor 7
      }
    }
  }
  Function {config_swallow_window()} {} {
    Fl_Window conf_swallow_window {
      label {Configure Swallowed Application}
      xywh {696 517 465 80} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {conf_swallow_window->hide();}
        xywh {370 40 60 30} box GTK_UP_BOX color 61 labelcolor 7
      }
      Fl_Input swallow_name {
        label {App Name}
        callback {flPanel panel;
const char* name = o->value();
panel.setSubElementAttribute("Swallow","name",name);}
        tooltip {This MUST be the same as the executable's name} xywh {85 40 260 25} box GTK_DOWN_BOX color 53 selection_color 72 when 1
        code0 {flPanel panel;}
        code1 {const char* name = panel.getSubElementAttribute("Swallow","name");}
        code2 {o->value(name);}
      }
      Fl_Input swallow_config {
        label Configure
        callback {flPanel panel;
const char* name = o->value();
panel.setSubElementText("Swallow",name);}
        xywh {85 10 370 25} box GTK_DOWN_BOX color 53 selection_color 72 when 1
        code0 {flPanel panel;}
        code1 {std::string name = panel.getSubElementText("Swallow");}
        code2 {o->value(name.c_str());}
      }
    }
  }
  Function {config_switcher_window()} {} {
    Fl_Window conf_switcher {
      label {Configure Switcher}
      xywh {700 482 265 250} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label OK
        callback {conf_switcher->hide();}
        xywh {190 205 60 30} box GTK_UP_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Box {} {
        label {Active Foreground}
        xywh {15 10 140 30}
      }
      Fl_Box {} {
        label {Active Background}
        xywh {15 45 140 30}
      }
      Fl_Box {} {
        label Foreground
        xywh {35 80 90 30}
      }
      Fl_Box {} {
        label Background
        xywh {35 115 90 30}
      }
      Fl_Button {} {
        callback {one_color_Font(o,"PagerStyle");}
        xywh {160 5 75 30} box GTK_UP_BOX deactivate
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getFontColor(c,"PagerStyle");}
        code2 {o->color(color);}
      }
      Fl_Button {} {
        callback {one_color_active(o,"PagerStyle");}
        xywh {160 43 75 30} box GTK_UP_BOX
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getActiveBackground(c,"PagerStyle");}
        code2 {o->color(color);}
      }
      Fl_Button {} {
        callback {one_color_Font(o,"PagerStyle");}
        xywh {160 80 75 30} box GTK_UP_BOX
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getFontColor(c,"PagerStyle");}
        code2 {o->color(color);}
      }
      Fl_Button {} {
        callback {one_color(o,"PagerStyle");}
        xywh {160 115 75 30} box GTK_UP_BOX
        code0 {flPanel panel;unsigned int c;}
        code1 {unsigned int color = panel.getBackground(c,"PagerStyle");}
        code2 {o->color(color);}
      }
      Fl_Value_Input num_desktop_w {
        label {Number of Desktops Wide}
        callback {int width = int((o->value()));
num_desktop_wh_cb("width",width);}
        xywh {20 150 20 25} box GTK_DOWN_BOX color 53 align 8
        code0 {Config config;}
        code1 {int width = config.getIntAttribute("Desktops","width");}
        code2 {o->value(width);}
      }
      Fl_Value_Input num_desktop_h {
        label {Number of Desktops High }
        callback {int height = int((o->value()));
num_desktop_wh_cb("height",height);}
        xywh {20 175 20 25} box GTK_DOWN_BOX color 53 align 8
        code0 {Config config;}
        code1 {int height = config.getIntAttribute("Desktops","height");}
        code2 {o->value(height);}
      }
    }
  }
  Function {make_shortcut_window()} {} {
    Fl_Window shortcut_window {
      label {Choose an application to add}
      xywh {449 523 700 255} type Double hide resizable
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Button {} {
        label Application
        callback {icon_for_desktop();}
        xywh {10 20 105 25} box GTK_UP_BOX
      }
      Fl_Button {} {
        label Icon
        callback {Apps apps;apps.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{xbm,XBM,xpm,XPM,png,PNG,svg,SVG}";
int r = 0;
const char * program = app_command->value();
char *result = fl_file_chooser(m,p,f,r);
std::string icon = result;
if(result!=NULL && program !=NULL){
	icon_name->copy_label(icon.c_str());
	displayAPPicon(result);
}}
        xywh {20 100 65 25} box GTK_UP_BOX
      }
      Fl_Input app_command {
        callback {const char* result = o->value();
if(result!=NULL){
	std::string icon = result;
	unsigned found = icon.find_last_of("//");
	icon=icon.erase(0,found+1);
	result = icon.c_str();
	app_command->value(result);
	tooltip->value(result);
	icon+=".png";
	std::string iconPath = "/usr/share/pixmaps/"+icon;
	displayAPPicon(iconPath.c_str());
	app_icon_box->redraw();
	icon_name->copy_label(icon.c_str());
}}
        tooltip {You can add arguments here} xywh {120 20 185 25} box GTK_DOWN_BOX selection_color 80 align 8 when 8
      }
      Fl_Box app_icon_box {
        xywh {30 137 48 48} box GTK_DOWN_BOX color 42 align 288
      }
      Fl_Input tooltip {
        label {Tooltip Label}
        xywh {120 60 185 25} box GTK_DOWN_BOX selection_color 80
      }
      Fl_Button {} {
        label {@+  Add to panel}
        callback {Apps apps;apps.loadTemp();
const char* icon = icon_name->label();
std::string execLine = "exec:";
execLine += app_command->value();
const char* program = execLine.c_str();
const char* popup = tooltip->value();
int border = shortcut_border->value();
apps.addShortcut(icon,program,popup, border);
shortcut_browser->clear();
//shortcut_browser->add(program);
apps.getShortcuts(shortcut_browser);
shortcut_browser->redraw();}
        xywh {95 145 125 35} box GTK_UP_BOX
      }
      Fl_Button ok_button {
        label SAVE
        callback {flPanel panel;
panel.saveJWMRC();
shortcut_window->hide();}
        tooltip {Write to configuration file} xywh {240 150 45 25} box GTK_UP_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Check_Button shortcut_border {
        label {Show a Border around the Button?}
        tooltip {The button you are adding can be borderless, if you like} xywh {10 195 265 25} down_box GTK_DOWN_BOX selection_color 60 deactivate
      }
      Fl_Browser shortcut_browser {
        xywh {320 10 360 175} type Hold box GTK_DOWN_BOX when 2
        code0 {Apps apps;apps.loadTemp();}
        code1 {apps.getShortcuts(o);o->redraw();}
      }
      Fl_Button {} {
        label {@  Remove from panel}
        callback {Apps apps;apps.loadTemp();
std::string prog = "exec:";
int whichLine = shortcut_browser->value();
prog += shortcut_browser->text(whichLine);
const char* program = prog.c_str();
std::cerr<<"*"<<program<<"*"<<std::endl;
if (prog.compare("exec:")!=0){
	apps.deleteShortcut(program);
	shortcut_browser->clear();
	apps.getShortcuts(shortcut_browser);
	shortcut_browser->redraw();
}}
        xywh {365 200 170 35} box GTK_UP_BOX
      }
      Fl_Box icon_name {
        label {Icon File Name}
        xywh {110 100 185 25} box GTK_DOWN_BOX
      }
    }
  }
  Function {new_panel_window()} {} {
    Fl_Window new_panel {
      label {Add a Panel}
      xywh {738 525 290 115} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Box {} {
        label {Only Four Panels are supported Currently}
        xywh {25 25 240 50} align 128
      }
      Fl_Button {} {
        label OK
        callback {new_panel->hide();}
        xywh {85 80 105 30} box GTK_UP_BOX
      }
    }
  }
  Function {no_config()} {} {
    Fl_Window {} {
      label {Nothing to Configure}
      xywh {872 569 250 65} type Double hide
      code0 {Config config; config.under_mouse(o);} xclass JSM
    } {
      Fl_Box {} {
        label {Nothing to Configure}
        xywh {25 25 175 25}
      }
    }
  }
  Function {add_item()} {open
  } {
    code {unsigned int line = panel_items_browser->value();
Apps app;
switch (line){
  case 1:
    //Application Menu
    app.addAppMenu();
    break;
  case 2:
    //Places Menu
    app.addPlaces();
    break;
  case 3:
    //Shutdown Menu
    app.addShutdown();
    break;
  case 4:
    //Clock
    app.addClock();
    config_clock_window()->show();
    break;
  case 5:
    //Desktop Switcher
    app.addPager();
    config_switcher_window()->show();
    break;
  case 6:
    //Indicators
    config_indicator_window()->show();
    add_indicator()->show();
    break;
  case 7:
    //Running App List
    app.addTaskList();
    config_applist_window()->show();
    break;
  case 8:
    //Launcher
    make_shortcut_window()->show();
    break;
  case 9:
    //Swallow
    //app.
    std::cout<<"swallow"<<std::endl;
    break;
}
app.populate(app_browser);} {}
  }
  Function {autohide()} {} {
    code {flPanel panel;
std::string a = panel.getAutohide();
if(!panel.newStyle()){
  autohide_check->show();
  choose_autohide->hide();
  if(a=="true"){autohide_check->value(1);}
  else{autohide_check->value(0);}
}
else{
  autohide_check->hide();
  choose_autohide->show();
}} {}
  }
  Function {autohide_position(const char* where)} {} {
    code {flPanel panel;
panel.panelAutohide(where);} {}
  }
  Function {cancel_button()} {} {
    code {flPanel panel;
panel.cancel();
panel_window->hide();
UI ux;ux.showSettings();} {}
  }
  Function {change_menu(int whichStyle)} {} {
    code {const char* menuName = app_menu->value();
flPanel panel; panel.switchMenu(whichStyle, menuName);} {}
  }
  Function {coordinate(const char* xy, Fl_Value_Input *o, int get1_set2)} {} {
    code {flPanel panel;
if(get1_set2 == 1){
  int x = panel.getCoordinate(xy);
  o->value(x);
}
else if (get1_set2 == 2){
  int value=o->value();
  panel.setCoordinate(xy,value);
}
else{
std::cerr<<"coordinate() function called incorrectly"<<std::endl;
}} {}
  }
  Function {config_Item(std::string whichItem)} {} {
    code {if(whichItem.compare("App Menu")==0){
  config_menu_window()->show();
}
else if(whichItem.compare("Places Menu")==0){
      no_config()->show();
}
else if(whichItem.compare("Shutdown Menu")==0){
  config_shutdown_window()->show();
}
else if(whichItem.compare("Desktop Switcher")==0){
  config_switcher_window()->show();
}
else if(whichItem.compare("Running App List")==0){
  config_applist_window()->show();
}
else if(whichItem.compare("Indicators")==0){
  config_indicator_window()->show();
}
else if(whichItem.compare("Clock")==0){
    config_clock_window()->show();
}
else if(whichItem.compare("")==0){
  no_config()->show();
}
else{
  unsigned found = whichItem.find_first_of(":");
  if(found<=whichItem.length()){
    std::string thisItem = whichItem.erase(0,found+1);
    if(thisItem.compare("Swallowed App")){
        config_swallow_window()->show();
    }
  }
  else{
      configure_manually_window()->show();
  }
}} {}
  }
  Function {display(const char* filename)} {} {
    code {std::string extention, filenameStr;
filenameStr = filename;
if (filenameStr.length() == 0)return;
extention = filenameStr.substr((strlen(filename)-4),4);
//std::cout<<extention<<"\\n";
std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
Fl_Image* image;
std::string png =".png";
std::string xpm =".xpm";
std::string svg =".svg";
if (extention.compare(png) ==0){
	image = new Fl_PNG_Image(filename);
	Fl_Image * image2 = image->copy(48,48);
	icon_view->image(image2);
	icon_view->redraw();
}
else if(extention.compare(xpm) ==0){
	image = new Fl_XPM_Image(filename);
	Fl_Image * image2 = image->copy(48,48);
	icon_view->image(image2);
	icon_view->redraw();
}
else if(extention.compare(svg) ==0){
return;
}
else {
	icon_view->label("FLTK cannot display");
}} {}
  }
  Function {displayAPPicon(const char* filename)} {} {
    code {std::string extention, filenameStr;
filenameStr = filename;
extention = filenameStr.substr((strlen(filename)-4),4);
std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
Fl_Image* image;
std::string png =".png";
std::string xpm =".xpm";
if (extention.compare(png) ==0){
	image = new Fl_PNG_Image(filename);
	Fl_Image * image2 = image->copy(48,48);
	app_icon_box->image(image2);
	app_icon_box->redraw();
}
else if(extention.compare(xpm) ==0){
	image = new Fl_XPM_Image(filename);
	Fl_Image * image2 = image->copy(48,48);
	app_icon_box->image(image2);
	app_icon_box->redraw();
}
else{
	std::cout<<"Other image formats are not supported for preview"<<std::endl;
}} {}
  }
  Function {hide_menu(Fl_Menu_Item * o, int whichOne)} {} {
    code {flPanel panel;
int num = panel.numPanels();
if (whichOne > num) o->hide();
else o->show();} {}
  }
  Function {icon_for_desktop()} {} {
    code {Apps apps;apps.loadTemp();
const char * f = "/usr/share/applications";
const char * m="Choose a program";
const char *p="*";
int r = 0;
const char *result = fl_file_chooser(m,p,f,r);
std::string icon2 = result;
std::string executable = result;
std::string iconName = result;
std::string icon = result;
unsigned period = icon.find_last_of(".");
bool isDESKTOP = false;
if(result!=NULL){
  if(period<icon.length()){
    std::string testDesktop = icon.substr(period+1,std::string::npos);
    //std::cerr<<testDesktop<<std::endl;
    if(testDesktop.compare("desktop")==0){isDESKTOP = true;}
  }
  unsigned found = icon.find_last_of("//");
  if(found<icon.length()){icon=icon.erase(0,found+1);}
  unsigned found2 = icon.find_last_of(".");
  if(found2<icon.length()){icon=icon.erase(found2,std::string::npos);}
  result = icon.c_str();	
  if(isDESKTOP){
    std::string desktop = apps.desktopExec(executable);
    std::string name = apps.desktopName(iconName);
    app_command->value(desktop.c_str());
    std::string deskIcon = apps.desktopIcon(icon2);
    //icon_name->label(deskIcon);
    icon_name->copy_label(deskIcon.c_str());
    tooltip->value(name.c_str());
  }
  else{
    std::string iconLABEL = result;
    std::string EXT = apps.getExtention();
    iconLABEL += EXT;
    icon_name->copy_label(iconLABEL.c_str());
    app_command->value(result);
    tooltip->value(result);
  }
  app_command->redraw();
}} {}
  }
  Function {Menu_CB(int num)} {} {
    code {flPanel panel;
panel.recoverJSM(num);
panel.loadTemp();
panel.saveChanges();
int n = panel.currentPanel();
std::string l = panel.convert(n);
std::string LABEL = "Panel ";LABEL +=l;
panel_chooser->copy_label(LABEL.c_str());
panel_window->hide();
//panel_window->show();
UI ux;
ux.showPanel();} {}
  }
  Function {move_up()} {open
  } {
    code {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string whichAPP = app_browser->text(appLine);
  if(whichAPP.compare("")!=0){
    flPanel panel;
    panel.moveUp(whichAPP);
    Apps app;
    app.populate(app_browser);
  }
}} {}
  }
  Function {move_down()} {} {
    code {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string whichAPP = app_browser->text(appLine);
  if(whichAPP.compare("")!=0){
    flPanel panel;
    panel.moveDown(whichAPP);
    //Apps app;
    //app.populate(app_browser);
    //app_browser->redraw();
  }
}} {}
  }
  Function {new_panel_items(Fl_Browser *o)} {} {
    code {o->add("Application Menu");
o->add("Places Menu");
o->add("Shutdown Menu");
o->add("Clock");
o->add("Desktop Switcher");
o->add("Indicators");
o->add("Running App List");
o->add("Launcher");
o->add("Swallow");} {}
  }
  Function {num_desktop_wh_cb(const char* whichone, int value)} {} {
    code {Config config;
config.setAttribute("Desktops",whichone,value);
int w = int((num_desktop_w->value()));
int h = int((num_desktop_h->value()));
int defaultValue = 1;
if(w==0){config.setAttribute("Desktops","width",defaultValue);}
if(h==0){config.setAttribute("Desktops","height",defaultValue);}} {}
  }
  Function {one_color_Font(Fl_Widget *o, const char* whichElement)} {} {
    code {flPanel panel;panel.loadTemp();
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;

if(c!=0){ //If color chooser isn't canceled... do stuff
	panel.setFontColor(colors, whichElement);
	unsigned int unusedColor;
	unsigned int colorSet = panel.getFontColor(unusedColor, whichElement);
	panel.saveChangesTemp();
	o->color(colorSet);
	o->redraw();
}} {}
  }
  Function {ok()} {} {
    code {flPanel panel;
panel.saveJWMRC();
panel_window->hide();
UI ux;ux.showSettings();} {}
  }
  Function {one_color(Fl_Widget *o, const char* whichElement)} {} {
    code {flPanel panel;
//loadTemp();
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;

if(c!=0){ //If color chooser isn't canceled... do stuff
	panel.setBackground(colors, whichElement);
	unsigned int unusedColor;
	unsigned int colorSet = panel.getBackground(unusedColor, whichElement);
	o->color(colorSet);
	o->redraw();
	panel.saveChangesTemp();
}} {}
  }
  Function {one_color_active(Fl_Widget *o, const char* whichElement)} {} {
    code {flPanel panel;panel.loadTemp();
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;

if(c!=0){ //If color chooser isn't canceled... do stuff
	panel.setActiveBackground(colors, whichElement);
	unsigned int unusedColor;
	unsigned int colorSet = panel.getActiveBackground(unusedColor, whichElement);
	panel.saveChangesTemp();
	o->color(colorSet);
	o->redraw();
}} {}
  }
  Function {opacity(Fl_Value_Input *o, Fl_Slider *slider, const char* whichElement)} {} {
    code {flPanel panel;
float opacity=slider->value();
panel.setOpacity(opacity,whichElement);
o->value(opacity*100);} {}
  }
  Function {panel_label(Fl_Menu_Button *o)} {} {
    code {flPanel panel;
int num = 1;
std::string x = panel.convert(num);
std::string l = "Panel ";
l+=x;
o->copy_label(l.c_str());
o->redraw();} {}
  }
  Function {panel_position(const char* position)} {} {
    code {flPanel fl_panel;
std::string stringPosition = position;
if((stringPosition.compare("top")==0)||(stringPosition.compare("bottom")==0)){
  fl_panel.panelPositionHoriz("fixed");
  fl_panel.panelLayout("horizontal");
  fl_panel.panelPositionVert(position);
}
else{
  fl_panel.panelLayout("vertical");
  fl_panel.panelPositionVert("center");
  fl_panel.panelPositionHoriz(position);
}} {}
  }
  Function {remove_app()} {} {
    code {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string whichAPP = app_browser->text(appLine);
  Apps app;
  app.deletePanelItem(whichAPP);
  //std::cout<<whichAPP<<std::endl;
  app_browser->clear();
  app.populate(app_browser);
}} {}
  }
  Function {remove_indicator()} {} {
    code {unsigned int line_item = indicator_browser->value();
std::string item = indicator_browser->text(line_item);
std::cout<<item<<std::endl;
Apps app;
if(item.compare("Network")==0){app.deleteNetworkMonitor();}
else if(item.compare("Battery")==0){app.deleteBattery();}
else if(item.compare("Volume")==0){app.deleteVolume();}} {}
  }
  Function {save_user_clock()} {} {
    code {const char* result = clock_style->value();
Apps app;
app.changeClock(result);
clock_config_window->hide();} {}
  }
  Function {switch_panel(Fl_Menu_Item *o)} {return_type {unsigned int}
  } {
    code {unsigned int whichPanel = o->value();
return whichPanel;} {}
  }
  Function {width_height_border(Fl_Slider *slider_o, Fl_Value_Input *input_o, const char* dimension)} {} {
    code {flPanel fl_panel;
int panelSize=slider_o->value();
input_o->value(panelSize);
std::string border = dimension;
std::string stringInt = fl_panel.convert(panelSize);
if(border.compare("border")==0){
  std::cerr<<"Border size: "<< panelSize<<std::endl;
  if (panelSize == 0){
    fl_panel.setValue(dimension,"false");
    return;
  }
}
fl_panel.setValue(dimension,panelSize);} {}
  }
} 
