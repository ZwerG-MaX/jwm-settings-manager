# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <algorithm>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/panel.hpp"} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include "../data/icons/jsm-panel.xpm"} {public global
} 

decl {\#include "../include/fltkfunctions.hpp"} {public global
} 

decl {//\#include "jwm-menu.h"} {public global
} 

class PanelUI {open
} {
  Function {clear_shortcuts()} {} {
    code {app_command->value("");
app_command->redraw();
tooltip->value("");
tooltip->redraw();
icon_name->copy_label("");
icon_name->redraw();} {}
  }
  Function {display(std::string filename)} {} {
    code {if(filename.compare("")==0){return;}
makeWidgetIcon(filename,icon_view,48);} {}
  }
  Function {make_window()} {open
  } {
    code {load();} {}
    Fl_Window panel_window {
      label {Panel Settings} open
      xywh {838 172 285 450} type Double color 47 align 80 resizable
      code1 {startup(o,jsm_panel_xpm);} xclass {jsm-panel} visible
    } {
      Fl_Scroll {} {open
        xywh {0 0 355 665} color 31
      } {
        Fl_Menu_Button panel_chooser {
          callback {panel_menu_button_label(o);} open
          xywh {5 5 110 25} box FLAT_BOX down_box FLAT_BOX color 23 selection_color 51 when 3
          code0 {panel_menu_button_label(o);}
        } {
          MenuItem {} {
            label {Add a Panel  +}
            callback {if((numPanels())>=4){
  new_panel_window()->show();
}
else{
  addPanel();
  Menu_CB(numPanels());
}}
            xywh {15 15 100 20}
            code0 {const char* text=gettext("Add a Panel");}
            code1 {o->label(text);}
          }
          MenuItem {} {
            label {Panel 1}
            callback {Menu_CB(1);}
            xywh {0 0 100 20}
            code0 {const char* text=gettext("Panel 1");}
            code1 {o->label(text);}
          }
          MenuItem {} {
            label {Panel 2}
            callback {Menu_CB(2);}
            xywh {10 10 100 20}
            code0 {hide_menu(o,2);}
            code1 {const char* text=gettext("Panel 2");}
            code2 {o->label(text);}
          }
          MenuItem {} {
            label {Panel 3}
            callback {Menu_CB(3);}
            xywh {20 20 100 20}
            code0 {hide_menu(o,3);}
            code1 {const char* text=gettext("Panel 3");}
            code2 {o->label(text);}
          }
          MenuItem {} {
            label {Panel 4}
            callback {Menu_CB(4);}
            xywh {30 30 100 20}
            code0 {hide_menu(o,4);}
            code1 {const char* text=gettext("Panel 4");}
            code2 {o->label(text);}
          }
          MenuItem {} {
            label {Remove Current  Panel}
            callback {deletePanel();
int a = numPanels();
Menu_CB(a);}
            xywh {25 25 100 20}
            code0 {const char* text=gettext("Remove Current  Panel");}
            code1 {o->label(text);}
          }
        }
        Fl_Tabs {} {open
          xywh {0 35 285 380} box FLAT_BOX color 47
        } {
          Fl_Group apps_tab {
            label Apps open
            xywh {5 60 280 350} selection_color 45
            code0 {const char* text=gettext("Apps");o->label(text);}
          } {
            Fl_Button {} {
              label {-}
              callback {remove_app(app_browser);}
              xywh {50 380 30 30} box FLAT_BOX color 23 labelfont 1 labelsize 34
            }
            Fl_Browser app_browser {
              callback {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  //Do I really want to have clicking open the config?
 // config_Item(result);
}}
              xywh {5 65 270 310} type Hold box FLAT_BOX selection_color 72
              code1 {populateApps(o);}
            }
            Fl_Button {} {
              callback {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  config_Item(result);
}}
              image {custom_buttons/gear16.png} xywh {95 380 30 30} box FLAT_BOX color 23
            }
            Fl_Button choose_apps {
              label {@+}
              callback {add_to_panel()->show();}
              xywh {5 380 30 30} box FLAT_BOX color 23
            }
            Fl_Button {} {
              label {@+98>}
              callback {move_up()}
              xywh {185 380 40 30} box FLAT_BOX color 23 selection_color 40
            }
            Fl_Button {} {
              label {@+92>}
              callback {move_down()}
              xywh {235 380 40 30} box FLAT_BOX color 23 selection_color 40
            }
          }
          Fl_Group {} {
            label Appearance open
            xywh {0 60 275 335} selection_color 45 hide
            code0 {const char* text=gettext("Appearance");o->label(text);}
          } {
            Fl_Button menu_bg_color {
              label {Menu Background}
              callback {one_color(o,"MenuStyle");}
              xywh {10 102 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color = getBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_fg_color {
              label {Menu Selection}
              callback {one_color_active(o,"MenuStyle");}
              xywh {10 144 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color=getActiveBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_font_color {
              label {Menu Font Color}
              callback {one_color_Font(o,"MenuStyle");}
              xywh {10 187 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color = getFontColor(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Slider o_menu_slider {
              label {Opacity of Menu }
              callback {opacity(o_menu_slider_v,o,"MenuStyle");}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {10 227 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 6 step 0.02 value 1
              code0 {const char* text=gettext("Opacity of Menu");o->label(text);}
              code1 {float h=getOpacity("MenuStyle");}
              code2 {o->value(h);}
            }
            Fl_Value_Input o_menu_slider_v {
              label {%}
              callback {opacity(o,o_menu_slider,"MenuStyle");}
              xywh {225 227 40 25} box FLAT_BOX color 23 labelsize 10 align 8
              code0 {float v = o_menu_slider->value();}
              code1 {o->value(v*100.0f);}
            }
            Fl_Button b_color {
              label {Panel Color}
              callback {one_color(o, "TrayStyle");}
              xywh {10 272 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color = getBackground(c, "TrayStyle");}
              code2 {o->color(color);}
            }
            Fl_Button button_color {
              label {Panel Button Color}
              callback {if(!style_gone()){one_color(o,"TrayButtonStyle");}}
              xywh {10 315 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {if(style_gone()){o->hide();}}
              code2 {else{unsigned int color = getBackground(c,"TrayButtonStyle");o->color(color);}}
            }
            Fl_Slider o_slider {
              label {Opacity of Panel  }
              callback {opacity(o_slider_v,o_slider,"TrayStyle");}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {10 355 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 6 step 0.02 value 1
              code0 {const char* text=gettext("Opacity of Panel");o->label(text);}
              code1 {float h = getOpacity("TrayStyle");}
              code2 {o->value(h);}
            }
            Fl_Value_Input o_slider_v {
              label {%}
              callback {opacity(o_slider_v,o_slider,"TrayStyle");}
              xywh {225 355 40 25} box FLAT_BOX color 23 labelsize 10 align 8
              code0 {float v = o_slider->value();}
              code1 {o->value(v*100.0f);}
            }
            Fl_Button {} {
              label {Edit Menus}
              callback {panel_window->hide();
showMenu();}
              xywh {10 70 105 25} box FLAT_BOX color 23
              code0 {const char* text=gettext("Edit Menus");o->label(text);}
            }
          }
          Fl_Group {} {
            label {Size And Position} open
            xywh {5 65 280 350} selection_color 45 hide
            code0 {const char* text=gettext("Size And Position");o->label(text);}
          } {
            Fl_Menu_Button {} {
              label {Panel Position} open
              tooltip {Move the current panel to a new position} xywh {10 80 125 25} box FLAT_BOX color 23 selection_color 51
              code0 {const char* text=gettext("Panel Position");o->label(text);}
            } {
              MenuItem {} {
                label top
                callback {change_panel_position("top");}
                xywh {30 30 100 20}
                code0 {const char* text=gettext("top");o->label(text);}
              }
              MenuItem {} {
                label bottom
                callback {change_panel_position("bottom");}
                xywh {40 40 100 20}
                code0 {const char* text=gettext("bottom");o->label(text);}
              }
              MenuItem {} {
                label right
                callback {change_panel_position("right");}
                xywh {50 50 100 20}
                code0 {const char* text=gettext("right");o->label(text);}
              }
              MenuItem {} {
                label left
                callback {change_panel_position("left");}
                xywh {60 60 100 20}
                code0 {const char* text=gettext("left");o->label(text);}
              }
            }
            Fl_Check_Button autohide_check {
              label Autohide
              callback {int autohide=o->value();
std::string val = getAutoHide(autohide);
if(val.compare("off")==0){
  o->value(0);
  if(autohide!=0){errorOUT("Something went wrong with autohide");}
}
setElementAttribute(currentPanel(),"Tray","autohide",val);
autohide_position(val,autohide_pos);}
              tooltip {This will make the Panel hide when you aren't using it.} xywh {160 80 95 25} down_box GTK_DOWN_BOX selection_color 59 when 1
              code0 {const char* text=gettext("Autohide?");o->label(text);}
            }
            Fl_Slider w_slider {
              label {Width of Panel  }
              callback {width_height_border(o,width_input,"width");}
              tooltip {0 is Full Length} xywh {10 125 180 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 3 maximum 3000 step 1 value 32
              code0 {const char* text=gettext("Width of Panel");o->label(text);}
              code1 {int h = getWidth();}
              code2 {o->value(h);}
            }
            Fl_Value_Input width_input {
              label pixels
              callback {input_width_height_border(w_slider,o,"width");}
              tooltip {The  width  of  the tray. 0 indicates that the tray
should compute an optimal width depending  on  what
it  contains  and the layout. A negative value subtracts
from with screen width. 0 is the default.} xywh {200 125 40 25} box FLAT_BOX color 23 labelsize 10 align 8 maximum 3000
              code0 {int v = w_slider->value();}
              code1 {o->value(v);}
              code2 {const char* text=gettext("pixels");o->label(text);}
            }
            Fl_Slider h_slider {
              label {Height of Panel  }
              callback {width_height_border(o,height_input,"height");}
              tooltip {0 will base size from the current items in the panel} xywh {10 170 180 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 6 maximum 3000 step 1 value 32
              code0 {const char* text=gettext("Height of Panel");o->label(text);}
              code1 {int h = getHeight();}
              code2 {o->value(h);}
            }
            Fl_Value_Input height_input {
              label pixels
              callback {input_width_height_border(h_slider,o,"height");}
              tooltip {The height of the tray. 0 indicates that  the  tray
should  compute an optimal height depending on what
it contains and the layout. A negative  value  subtracts
from the screen height. 0 is the default.} xywh {200 170 40 25} box FLAT_BOX color 23 labelsize 10 align 8 maximum 3000
              code0 {int v = h_slider->value();}
              code1 {o->value(v);}
              code2 {const char* text=gettext("pixels");o->label(text);}
            }
            Fl_Box {} {
              label {Advanced Options}
              xywh {5 200 185 30} labelfont 1 labelsize 18
              code0 {const char* text=gettext("Advanced Options");o->label(text);}
            }
            Fl_Value_Input {} {
              label {X coordinate}
              callback {coordinate("x",o,2);}
              tooltip {The x-coordinate of the tray. This may be  negative
to indicate an offset from the right of the screen.} xywh {10 230 25 25} box FLAT_BOX color 23 align 8 minimum -100 maximum 2000
              code0 {coordinate("x",o,1);}
              code1 {const char* text=gettext("X position of panel");o->label(text);}
            }
            Fl_Value_Input {} {
              label {Y coordinate}
              callback {coordinate("y",o,2);}
              tooltip {The  y-coordinate of the tray. This may be negative
to indicate  an  offset  from  the  bottom  of  the
screen.} xywh {155 230 25 25} box FLAT_BOX color 23 align 8 minimum -100 maximum 2000
              code0 {coordinate("y",o,1);}
              code1 {const char* text=gettext("Y position of panel");o->label(text);}
            }
            Fl_Output halign {
              tooltip {The horizontal alignment of the Panel} xywh {155 295 60 25} box FLAT_BOX align 1
              code0 {std::string val=getElementAttribute(currentPanel(),"Tray","halign");}
              code1 {if(val.compare("")!=0){o->value(val.c_str());}}
            }
            Fl_Output valign {
              tooltip {The vertical alignment of the Panel} xywh {220 295 60 25} box FLAT_BOX align 1
              code0 {std::string val=getElementAttribute(currentPanel(),"Tray","valign");}
              code1 {if(val.compare("")!=0){o->value(val.c_str());}}
            }
            Fl_Slider border_slider {
              label {Width of Panel Border}
              callback {width_height_border(o,border_input,"border");}
              xywh {10 345 180 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 29 align 1 when 6 maximum 32 step 1
              code0 {const char* text=gettext("Width of Panel Border");o->label(text);}
              code1 {int border =getBorder();}
              code2 {o->value(border);}
            }
            Fl_Value_Input border_input {
              label pixels
              callback {input_width_height_border(border_slider,o,"border");}
              xywh {200 345 40 25} box FLAT_BOX color 23 labelsize 10 align 8 maximum 3000
              code0 {int v = border_slider->value();}
              code1 {o->value(v);}
              code2 {const char* text=gettext("pixels");o->label(text);}
            }
            Fl_Menu_Button choose_autohide {
              label {Autohide Position} open
              tooltip {Specifies  the  location  to hide the tray when not
activated. Default  is  "off"  to  disable  hiding.
Possible  values  are "left", "right", "top", "bottom", and "off".} xywh {10 380 150 25} box FLAT_BOX color 23 selection_color 23
              code0 {autohide(autohide_check,choose_autohide);}
              code1 {const char* text=gettext("Autohide Position");o->label(text);}
            } {
              MenuItem {} {
                label top
                callback {autohide_position("top",autohide_pos);}
                xywh {40 40 100 20}
                code0 {const char* text=gettext("top");o->label(text);}
              }
              MenuItem {} {
                label bottom
                callback {autohide_position("bottom",autohide_pos);}
                xywh {50 50 100 20}
                code0 {const char* text=gettext("bottom");o->label(text);}
              }
              MenuItem {} {
                label right
                callback {autohide_position("right",autohide_pos);}
                xywh {60 60 100 20}
                code0 {const char* text=gettext("right");o->label(text);}
              }
              MenuItem {} {
                label left
                callback {autohide_position("left",autohide_pos);}
                xywh {70 70 100 20}
                code0 {const char* text=gettext("left");o->label(text);}
              }
              MenuItem {} {
                label off
                callback {autohide_position("off",autohide_pos);}
                xywh {50 50 100 20}
                code0 {const char* text=gettext("off");o->label(text);}
              }
            }
            Fl_Output autohide_pos {
              tooltip {current autohide position (if any)} xywh {165 380 105 25} box FLAT_BOX
              code0 {std::string val=getElementAttribute(currentPanel(),"Tray","autohide");}
              code1 {if(val.compare("")!=0){o->value(val.c_str());}}
            }
            Fl_Menu_Button {} {
              label halign open
              tooltip {Use 'Panel Position' for easy configuration} xywh {155 260 60 25} box FLAT_BOX color 23
            } {
              MenuItem {} {
                label fixed
                callback {panel_h(1,halign);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label left
                callback {panel_h(2,halign);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label center
                callback {panel_h(3,halign);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label right
                callback {panel_h(4,halign);}
                xywh {0 0 100 20}
              }
            }
            Fl_Menu_Button {} {
              label valign open
              tooltip {Use 'Panel Position' for easy configuration} xywh {220 260 60 25} box FLAT_BOX color 23
            } {
              MenuItem {} {
                label fixed
                callback {panel_v(1,valign);}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label top
                callback {panel_v(2,valign);}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label center
                callback {panel_v(3,valign);}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label bottom
                callback {panel_v(4,valign);}
                xywh {10 10 100 20}
              }
            }
            Fl_Menu_Button {} {
              label layout open
              tooltip {Use 'Panel Position' for easy configuration} xywh {80 260 60 25} box FLAT_BOX color 23
            } {
              MenuItem {} {
                label horizontal
                callback {layout("horizontal",layOut);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label vertical
                callback {layout("vertical",layOut);}
                xywh {0 0 100 20}
              }
            }
            Fl_Output layOut {
              tooltip {The layout of the tray. The default is horizontal.} xywh {80 295 60 25} box FLAT_BOX align 1
              code0 {std::string val=getElementAttribute(currentPanel(),"Tray","layout");}
              code1 {if(val.compare("")!=0){o->value(val.c_str());}}
            }
            Fl_Menu_Button {} {
              label layer open
              tooltip {Use 'Panel Position' for easy configuration} xywh {10 260 60 25} box FLAT_BOX color 23
            } {
              MenuItem {} {
                label below
                callback {change_layer("below",layer);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label normal
                callback {change_layer("normal",layer);}
                xywh {0 0 100 20}
              }
              MenuItem {} {
                label above
                callback {change_layer("above",layer);}
                xywh {0 0 100 20}
              }
            }
            Fl_Output layer {
              tooltip {The layer of the tray. The default is above.} xywh {10 295 60 25} box FLAT_BOX align 1
              code0 {std::string val=getElementAttribute(currentPanel(),"Tray","layer");}
              code1 {if(val.compare("")!=0){o->value(val.c_str());}}
            }
          }
        }
        Fl_Button {} {
          label Cancel
          callback {cancel_button();}
          xywh {165 420 57 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
          code0 {const char* text=gettext("Cancel");o->label(text);}
        }
        Fl_Button save_button {
          label OK
          callback {ok();}
          tooltip {Write to configuration file} xywh {231 420 45 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
          code0 {const char* text=gettext("OK");o->label(text);}
        }
      }
    }
  }
  Function {add_indicator()} {open
  } {
    Fl_Window indicator_win {
      label {Add Indicator} open
      xywh {552 213 155 185} type Double hide
      code0 {startup(o,jsm_panel_xpm);}
    } {
      Fl_Button {} {
        label OK
        callback {indicator_win->hide();}
        xywh {105 140 45 30} box FLAT_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Button {} {
        label CLOSE
        callback {indicator_win->hide();}
        xywh {45 140 55 30} box FLAT_BOX color 80 selection_color 64 labelcolor 7
      }
      Fl_Browser add_indicator_browser {
        xywh {5 5 145 130} type Hold box FLAT_BOX selection_color 72
        code0 {listIndicators(o);}
      }
      Fl_Button {} {
        label {@+}
        callback {if(checkFlBrowserItem(add_indicator_browser)){
  const char* item=add_indicator_browser->text(add_indicator_browser->value());
  addIndicator(item);
  getIndicators(indicator_browser);
}}
        xywh {10 140 30 30} box FLAT_BOX color 23
      }
    }
  }
  Function {add_to_panel()} {open
  } {
    Fl_Window add_2_panel {
      label {Add to Panel} open
      xywh {281 231 175 265} type Double hide
      code0 {startup(o,jsm_panel_xpm);}
      code1 {const char* text=gettext("Add to Panel");o->label(text);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {saveChanges();
add_2_panel->hide();
refresh_app_browser(app_browser);}
        xywh {120 225 45 30} box FLAT_BOX color 62 selection_color 60 labelcolor 7
        code1 {const char* text=gettext("OK");o->label(text);}
      }
      Fl_Browser panel_items_browser {
        xywh {5 5 160 215} type Hold box FLAT_BOX selection_color 72
        code0 {new_panel_items(o);}
      }
      Fl_Button {} {
        label {@+}
        callback {add_item()}
        xywh {5 225 30 30} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label CLOSE
        callback {add_2_panel->hide();}
        xywh {55 225 60 30} box FLAT_BOX color 80 selection_color 64 labelcolor 7
      }
    }
  }
  Function {clock_window()} {open
  } {
    Fl_Window clock_config_window {
      label {Configure Clock} open
      xywh {749 116 460 540} type Double hide resizable
      code0 {startup(o,jsm_panel_xpm);}
      code1 {const char* text=gettext("Configure Clock");o->label(text);} xclass {jsm-panel}
    } {
      Fl_Scroll {} {open
        xywh {0 0 455 540}
      } {
        Fl_Button {} {
          label OK
          callback {save_user_clock();}
          xywh {380 505 75 30} box FLAT_BOX color 61 labelcolor 7 resizable
          code0 {const char* text=gettext("OK");o->label(text);}
        }
        Fl_Input clock_style {
          label style
          callback {const char* style = o->value();
std::string result = getClock(style);
clock_display->redraw_label();
clock_display->copy_label(result.c_str());
clock_display->redraw();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          xywh {45 505 290 30} box FLAT_BOX selection_color 72 when 3
          code0 {const char* text=gettext("style");o->label(text);}
        }
        Fl_Browser {} {
          callback {std::string item=o->text(o->value());
item= item.substr(0,2);
clock_style->insert(item.c_str());
//std::cerr<<"Click Clock: "<<item<<std::endl;}
          xywh {5 5 450 405} type Hold box FLAT_BOX selection_color 72
          code1 {populateClocks(o);}
        }
        Fl_Output clock_display {
          xywh {10 470 445 25} box FLAT_BOX labelfont 1 labelsize 18 align 1
        }
        Fl_Button {} {
          label Notes
          callback {clock_notes_window()->show();}
          xywh {5 415 75 30} box FLAT_BOX color 23
          code0 {const char* text=gettext("Notes");o->label(text);}
        }
        Fl_Button {} {
          label {Modifier Notes}
          callback {clock_info_window()->show();}
          xywh {90 415 110 30} box FLAT_BOX color 23
          code0 {const char* text=gettext("Modifier Notes");o->label(text);}
        }
      }
    }
  }
  Function {clock_notes_window()} {open
  } {
    Fl_Window clock_info {
      label Notes open
      xywh {691 194 350 435} type Double hide resizable
      code1 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Scroll {} {open
        xywh {5 5 345 400}
      } {
        Fl_Box {} {
          label {ISO 8601 week dates %G,  %g,  and  %V yield values calculated from the week-based year defined by the ISO 8601 standard.  In this system, weeks start  on a  Monday,  and are numbered from 01, for the first week, up to 52 or 53, for the last week.  Week 1 is the first week where four  or more  days fall within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday; or, the  week that  has 4 January in it).  When three of fewer days of the first calendar week of the new year fall within that year, then the  ISO 8601 week-based system counts those days as part of week 53 of the preceding year.  For example, 1 January 2010 is a Friday,  meaning that  just  three  days of that calendar week fall in 2010.  Thus, the ISO 8601 week-based system considers these days to be part  of week  53 (%V) of the year 2009 (%G); week 01 of ISO 8601 year 2010 starts on Monday, 4 January 2010.}
          xywh {5 5 335 390} box FLAT_BOX color 55 align 128
        }
      }
      Fl_Button {} {
        label CLOSE
        callback {clock_info->hide();}
        xywh {150 400 60 30} box FLAT_BOX color 80 selection_color 64 labelcolor 7
      }
    }
  }
  Function {clock_info_window()} {} {
    Fl_Window clock_modifier_notes {
      label {Modifier Notes} open
      xywh {81 107 350 400} type Double hide resizable
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Scroll {} {open
        xywh {5 5 350 395}
      } {
        Fl_Box {} {
          label {Some conversion specifications can be modified  by  preceding  the conversion  specifier character by the E or O modifier to indicate that an alternative format should be  used.   If  the  alternative format or specification does not exist for the current locale, the behavior will be as if  the  unmodified  conversion  specification were  used.  (SU) The Single UNIX Specification mentions %Ec, %EC, %Ex, %EX, %Ey, %EY, %Od, %Oe, %OH, %OI, %Om, %OM, %OS,  %Ou,  %OU, %OV,  %Ow,  %OW, %Oy, where the effect of the O modifier is to use alternative numeric symbols (say, roman numerals), and that of the E  modifier  is  to use a locale-dependent alternative representation.
The broken-down time structure tm is  defined  in  <time.h>.}
          xywh {5 5 340 350} box FLAT_BOX color 55 align 128
        }
        Fl_Button {} {
          label CLOSE
          callback {clock_modifier_notes->hide();}
          xywh {285 360 60 30} box FLAT_BOX color 80 selection_color 64 labelcolor 7
        }
      }
      Fl_Button {} {
        label {See also ctime}
        callback {int thissys = system("bash -c 'xterm -geometry 90x24 -fa default -fs 10 -T \\"ctime Manual\\" -e \\"man ctime\\" & '");
if(thissys !=0){std::cerr<< "command did not return 0"<<std::endl;}}
        xywh {5 360 130 30} box FLAT_BOX color 23 labelfont 1
      }
    }
  }
  Function {config_applist_window()} {open
  } {
    Fl_Window conf_applist_window {
      label {Running App List} open
      xywh {739 651 235 70} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {conf_applist_window->hide();}
        xywh {165 35 60 25} box FLAT_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Button task_bg_color {
        label {Open Apps}
        callback {one_color(o,"TaskListStyle");}
        xywh {95 35 60 25} box FLAT_BOX color 23 align 4
        code0 {getColorFromItem(true,"TaskListStyle","Background",o);}
      }
      Fl_Button task_fg_color {
        label {Current App}
        callback {one_color_active(o,"TaskListStyle");}
        xywh {95 5 60 25} box FLAT_BOX color 23 align 4
        code0 {getColorFromItem(true,"TaskListStyle","Foreground",o);}
      }
    }
  }
  Function {config_clock_window()} {} {
    Fl_Window conf_clock_window {
      label {Configure Clock} open
      xywh {720 88 305 70} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Menu_Button clock_menu {
        label {Clock Format} open
        xywh {5 5 130 25} box FLAT_BOX color 23 selection_color 23
      } {
        MenuItem {} {
          label {Day name Month Day 12 Hour}
          callback {changeClock("Day");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%a, %e %b %l:%M %p} xywh {35 35 100 20}
          code0 {const char* text=gettext("Day name Month Day 12 Hour");}
          code1 {o->label(text);}
        }
        MenuItem {} {
          label {24 Hour Clock}
          callback {changeClock("24");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%H:%M} xywh {35 35 100 20}
          code0 {const char* text=gettext("24 Hour Clock");}
          code1 {o->label(text);}
        }
        MenuItem {} {
          label {12 Hour Clock}
          callback {changeClock("12");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%l:%M %p} xywh {35 35 100 20}
          code0 {const char* text=gettext("12 Hour Clock");}
          code1 {o->label(text);}
        }
        MenuItem {} {
          label {Year Month Day 24 Hour clock}
          callback {changeClock("Year");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();}
          tooltip {%F %H:%M %p} xywh {35 35 100 20}
          code0 {const char* text=gettext("Year Month Day 24 Hour clock");}
          code1 {o->label(text);}
        }
        MenuItem {} {
          label {(Advanced) User Defined}
          callback {clock_window()->show();}
          tooltip {Use this to add a custom Unix time} xywh {45 45 100 20}
          code0 {const char* text=gettext("(Advanced) User Defined");}
          code1 {o->label(text);}
        }
      }
      Fl_Button {} {
        label OK
        callback {conf_clock_window->hide();}
        xywh {235 35 60 30} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Output clock_displayer {
        xywh {140 30 160 30} box NO_BOX align 1
        code1 {std::string clock_text = getClock();}
        code2 {o->copy_label(clock_text.c_str());}
        code3 {o->redraw_label();}
      }
      Fl_Input {} {
        label {Program to Launch}
        tooltip {Usually used for a calendar or analog clock} xywh {155 55 185 25} box FLAT_BOX color 23 selection_color 72 hide deactivate
        code0 {o->value("xclock");}
      }
    }
  }
  Function {config_indicator_window()} {open
  } {
    Fl_Window conf_indicator_window {
      label {Configure Indicators} open
      xywh {743 256 260 215} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {conf_indicator_window->hide();}
        xywh {195 180 60 30} box FLAT_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Browser indicator_browser {
        xywh {5 5 250 170} type Hold box FLAT_BOX selection_color 80
        code1 {getIndicators(o);}
      }
      Fl_Button {} {
        label {-}
        callback {removeIndicator(indicator_browser);}
        xywh {50 180 30 30} box FLAT_BOX color 23 labelfont 1 labelsize 34
      }
      Fl_Button {} {
        label {@+}
        callback {add_indicator()->show();}
        xywh {5 180 30 30} box FLAT_BOX color 23
      }
    }
  }
  Function {configure_manually_window(std::string icon)} {} {
    Fl_Window conf_manual_window {
      label {Manual Editing} open
      xywh {276 259 360 195} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Input manually_in {
        xywh {10 10 340 30} box FLAT_BOX
        code0 {o->value();}
      }
      Fl_Button {} {
        label OK
        callback {std::string input;
const char* temp1 = manually_in->value();
if(temp1!=NULL)input=temp1;
std::string item;
const char* temp2 = hid_in->value();
if(temp2!=NULL)item=temp2;
change_manual_item(input, item);
conf_manual_window->hide();}
        xywh {300 165 50 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Input label_input {
        label Label
        tooltip {The text that pops up when you hover} xywh {105 90 245 30} box FLAT_BOX selection_color 80
      }
      Fl_Button {} {
        callback {std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0){
  makeWidgetIcon(iconFILE,o,48);
  icon_file->value(iconFILE.c_str());
}}
        xywh {10 45 50 50} box FLAT_BOX color 23
        code0 {if(icon.compare("")!=0)makeWidgetIcon(icon,o,48);}
      }
      Fl_Input hid_in {
        xywh {10 10 340 30} box FLAT_BOX hide
      }
      Fl_Input icon_file {
        label Icon
        xywh {105 50 245 30} box FLAT_BOX
      }
      Fl_Input tooltip_label {
        label Tooltip
        tooltip {The text that pops up when you hover} xywh {105 130 245 30} box FLAT_BOX selection_color 80
      }
    }
  }
  Function {config_menu_window(std::string file)} {open
  } {
    Fl_Window conf_menu_window {
      label {Configure Menu} open
      xywh {810 232 285 150} type Double labelfont 14 hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {const char* testNum = tester->value();
if(testNum ==NULL){return;}
const char* icon = hidden_icon_name->value();
if(icon ==NULL){icon="application-default";}
const char* newLabel = app_menu->value();
if(newLabel==NULL){newLabel=gettext("Menu");}
labelMenu(testNum,newLabel);
setImageMenu(testNum,icon);
conf_menu_window->hide();}
        xywh {220 120 60 25} box FLAT_BOX color 69 labelfont 1 labelcolor 7
      }
      Fl_Input app_menu {
        label Label
        tooltip {Text for the Button that shows the menu} xywh {45 5 155 25} box FLAT_BOX color 55 selection_color 72 when 1
      }
      Fl_Button icon_view {
        callback {std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0)makeWidgetIcon(iconFILE,o,48);}
        tooltip {Choose an Icon} xywh {210 10 50 50} box FLAT_BOX color 23 align 644
        code2 {if(file.compare("")!=0)makeWidgetIcon(file,o,48);}
      }
      Fl_Input hidden_icon_name {
        label Icon
        tooltip {The icon file name} xywh {45 35 155 25} box FLAT_BOX color 23
      }
      Fl_Output tester {
        label Menu
        tooltip {The root menu the button is tied to} xywh {45 70 25 25} box FLAT_BOX color 55
      }
      Fl_Button {} {
        callback {const char* tmpTST =tester->value();
if(tmpTST!=NULL){showMenu(tmpTST);}
else{showMenu();}}
        tooltip {Configure the menu items} image {custom_buttons/gear16.png} xywh {75 65 30 30} box FLAT_BOX color 23
      }
    }
  }
  Function {config_swallow_window()} {open
  } {
    Fl_Window conf_swallow_window {
      label {Configure Swallowed Application} open
      xywh {68 244 465 70} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {conf_swallow_window->hide();}
        xywh {395 40 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Input swallow_name {
        label {App Name}
        callback {const char* name = o->value();
if(name==NULL){return;}
setElementAttribute(currentPanel(),"Tray","Swallow","name",name);}
        tooltip {This MUST be the same as the executable's name} xywh {85 40 155 25} box FLAT_BOX color 53 selection_color 72 when 1
        code1 {std::string name = getElementAttribute(currentPanel(),"Tray","Swallow","name");}
        code2 {o->value(name.c_str());}
      }
      Fl_Input swallow_config {
        label Configure
        callback {const char* name = o->value();
if(name==NULL){return;}
setElementText(currentPanel(),"Tray","Swallow",name)}
        xywh {85 10 370 25} box FLAT_BOX color 53 selection_color 72 when 1
        code1 {std::string name=getElementText(currentPanel(),"Tray","Swallow");}
        code2 {o->value(name.c_str());}
      }
      Fl_Value_Input {} {
        label Width
        tooltip {The  width of the swallowed program. 0 indicates
that the width  should  be  determined
from  the  tray  and size requested from the
program. 0 is the default.} xywh {285 40 25 25} box FLAT_BOX selection_color 72 deactivate
      }
      Fl_Value_Input {} {
        label Height
        tooltip {The  height of the swallowed program. 0 indicates
that the height  should  be  determined
from  the  tray  and size requested from the
program. 0 is the default.} xywh {365 40 25 25} box FLAT_BOX selection_color 72 deactivate
      }
    }
  }
  Function {config_switcher_window()} {} {
    Fl_Window conf_switcher {
      label {Configure Switcher} open
      xywh {813 265 215 200} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label OK
        callback {conf_switcher->hide();}
        xywh {150 165 60 30} box FLAT_BOX color 61 selection_color 59 labelcolor 7
      }
      Fl_Box {} {
        label Foreground
        xywh {85 50 90 30} box FLAT_BOX
        code0 {if(style_gone()){o->hide();}}
      }
      Fl_Box {} {
        label Background
        xywh {90 100 90 30} box FLAT_BOX
        code0 {if(style_gone()){o->hide();}}
      }
      Fl_Button {} {
        label Active
        callback {one_color_Font(o,"PagerStyle");}
        xywh {55 75 75 30} box FLAT_BOX color 23 align 4
        code1 {if(style_gone()){o->hide();}}
        code2 {else{getColorFromItem(true,"PagerStyle","Foreground",o);}}
      }
      Fl_Button {} {
        label Active
        callback {one_color_active(o,"PagerStyle");}
        xywh {55 125 75 30} box FLAT_BOX color 23 align 4
        code1 {if(style_gone()){o->hide();}}
        code2 {else{getColorFromItem(true,"PagerStyle","Background",o);}}
      }
      Fl_Button {} {
        callback {one_color_Font(o,"PagerStyle");}
        xywh {135 75 75 30} box FLAT_BOX color 23
        code1 {if(style_gone()){o->hide();}}
        code2 {else{getColorFromItem(false,"PagerStyle","Foreground",o);}}
      }
      Fl_Button {} {
        callback {one_color(o,"PagerStyle");}
        xywh {135 125 75 30} box FLAT_BOX color 23
        code1 {if(style_gone()){o->hide();}}
        code2 {else{getColorFromItem(false,"PagerStyle","Background",o);}}
      }
      Fl_Value_Input num_desktop_w {
        label {Number of Desktops Wide}
        callback {int width = int((o->value()));
num_desktop_wh_CB("width",width,num_desktop_w,num_desktop_h);}
        xywh {190 1 20 24} box FLAT_BOX color 53
        code1 {int width = getIntAttribute("Desktops","width");}
        code2 {o->value(width);}
      }
      Fl_Value_Input num_desktop_h {
        label {Number of Desktops High }
        callback {int height = int((o->value()));
num_desktop_wh_CB("height",height,num_desktop_w,num_desktop_h);}
        xywh {190 30 20 25} box FLAT_BOX color 53
        code1 {int height = getIntAttribute("Desktops","height");}
        code2 {o->value(height);}
      }
    }
  }
  Function {make_shortcut_window()} {open
  } {
    Fl_Window shortcut_window {
      label {Choose an application to add} open
      xywh {682 72 305 335} type Double hide resizable
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Button {} {
        label Application
        callback {icon_for_desktop(shortcut_browser,app_command,icon_name,tooltip,app_icon_box);}
        xywh {5 5 105 25} box FLAT_BOX color 23 selection_color 40
      }
      Fl_Input app_command {
        callback {app_command_CB(o,app_command);}
        tooltip {You can add arguments here} xywh {115 5 185 25} box FLAT_BOX selection_color 80 align 8 when 8
      }
      Fl_Input tooltip {
        label {Tooltip Label}
        xywh {115 35 185 25} box FLAT_BOX selection_color 80
      }
      Fl_Button {} {
        label {@+}
        callback {if(add_new_shortcut(shortcut_browser,app_command,tooltip,icon_name,shortcut_border->value())){
  app_command->value("");
  app_command->redraw();
  icon_name->copy_label("");
  tooltip->value("");
  tooltip->redraw();
}}
        xywh {5 300 30 30} box FLAT_BOX color 23 selection_color 40
      }
      Fl_Button ok_button {
        label SAVE
        callback {if(add_new_shortcut(shortcut_browser,app_command,tooltip,icon_name,shortcut_border->value())){
  debug_out("added current item to shortcuts");
}
saveChanges();
shortcut_window->hide();
refresh_app_browser(app_browser);}
        tooltip {Write to configuration file} xywh {250 300 50 30} box FLAT_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Check_Button shortcut_border {
        label {Show a Border around the Button?}
        tooltip {The button you are adding can be borderless, if you like} xywh {10 355 265 25} box FLAT_BOX down_box GTK_DOWN_BOX selection_color 60 hide deactivate
      }
      Fl_Browser shortcut_browser {
        label {Current Panel Buttons}
        xywh {5 115 295 180} type Hold box FLAT_BOX align 9 when 2
        code0 {getShortcuts(o);}
      }
      Fl_Button {} {
        label {-}
        callback {int whichLine = shortcut_browser->value();
const char* lineIS = shortcut_browser->text(whichLine);
if (lineIS == NULL){return;}
std::string prog =lineIS;
if (prog.find("exec:")<prog.length()){
  deleteShortcut(prog);
  getShortcuts(shortcut_browser);
}}
        tooltip {Remove application launcher} xywh {40 300 30 30} box FLAT_BOX color 23 selection_color 40 labelfont 1 labelsize 45
      }
      Fl_Box icon_name {
        label {Icon File Name}
        xywh {115 65 185 25} box FLAT_BOX color 7
      }
      Fl_Button app_icon_box {
        callback {std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0){
  makeWidgetIcon(iconFILE,o,48);
  icon_name->copy_label(iconFILE.c_str());
}}
        xywh {5 55 55 55} box FLAT_BOX color 23 selection_color 41
      }
      Fl_Button {} {
        label CLOSE
        callback {shortcut_window->hide();}
        xywh {185 300 60 30} box FLAT_BOX color 80 selection_color 64 labelcolor 7
      }
    }
  }
  Function {new_panel_window()} {open
  } {
    Fl_Window new_panel {
      label {Add a Panel} open
      xywh {738 525 235 85} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Box {} {
        label {Only Four Panels are supported}
        xywh {0 0 240 50} align 128
      }
      Fl_Button {} {
        label OK
        callback {new_panel->hide();}
        xywh {85 45 55 30} box FLAT_BOX color 62 selection_color 58 labelcolor 7
      }
    }
  }
  Function {no_config()} {} {
    Fl_Window {} {
      label {Nothing to Configure} open
      xywh {872 569 190 35} type Double hide
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel}
    } {
      Fl_Box {} {
        label {Nothing to Configure}
        xywh {5 5 175 20}
      }
    }
  }
  Function {add_item()} {open
  } {
    code {unsigned int line = panel_items_browser->value();
switch (line){
  case 1:
    //Menu
    add_new_menu();
    break;
  case 2:
    //Clock
    addClock();
    config_clock_window()->show();
    break;
  case 3:
    //Desktop Switcher
    addPager();
    config_switcher_window()->show();
    break;
  case 4:
    //Indicators
    config_indicator_window()->show();
    add_indicator()->show();
    break;
  case 5:
    //Running App List
    addTaskList();
    config_applist_window()->show();
    break;
  case 6:
    //Launcher
    make_shortcut_window()->show();
    break;
  case 7:
    //Swallow
    //app.
    std::cout<<"swallow"<<std::endl;
    break;
}
populateApps(app_browser);} {}
  }
  Function {cancel_button()} {open
  } {
    code {setJSMItem("panel","1");
cancel();
panel_window->hide();
//UI ux;ux.showSettings();} {}
  }
  Function {change_manual_item(std::string input, std::string old_input)} {open
  } {
    code {std::string tooltip;
const char* TT=tooltip_label->value();
if(TT!=NULL)tooltip=TT;
std::string icon;
const char* IC = icon_file->value();
if(IC!=NULL)icon=IC;
std::string label;
const char* LBL=label_input->value();
if(LBL!=NULL)label=LBL;
switchButton(old_input,input,tooltip,icon,label);} {}
  }
  Function {coordinate(const char* xy, Fl_Value_Input *o, int get1_set2)} {open
  } {
    code {if(get1_set2 == 1){
  int x = getCoordinate(xy);
  o->value(x);
}
else if (get1_set2 == 2){
  int value=o->value();
  setCoordinate(xy,value);
}
else{
std::cerr<<"coordinate() function called incorrectly"<<std::endl;
}} {}
  }
  Function {config_Item(std::string whichItem)} {open
  } {
    code {std::string RUNNINGAPPLIST=gettext("Running App List");
std::string INDICATORS=gettext("Indicators");
std::string CLOCK=gettext("Clock");
std::string SWALLOW=gettext("Swallow");
std::string MENU=gettext("Menu");
std::string DESKSWITCH=gettext("Desktop Switcher");
std::string LAUNCHER=gettext("Launcher");
std::string rootMenu="root:";
int vernum=JWMversion();
int whatone=app_browser->value();
unsigned found = whichItem.find(MENU);
if(found<whichItem.length()){
  if(vernum<230){
    std::string temp=whichItem;
    if(temp.length()>MENU.length()+1){temp=temp.erase(0,MENU.length()+1);}
    std::string icon = getImageMenu(temp);
    config_menu_window(icon)->show();
    std::string temptest=temp;
    if(temptest.length()>rootMenu.length()){temptest=temptest.erase(0,rootMenu.length());}
    tester->value(temptest.c_str());
    std::string l= getLabelMenu(temp);
    hidden_icon_name->value(icon.c_str());
    app_menu->value(l.c_str());
  }
  else{
    config_button_window(whatone)->show();
  }
}
else{
  if(whichItem.compare(DESKSWITCH)==0){config_switcher_window()->show();}
  else if(whichItem.compare(RUNNINGAPPLIST)==0){
    if(!style_gone()){config_applist_window()->show();}
    else{no_config()->show();}
  }
  else if(whichItem.compare(INDICATORS)==0){config_indicator_window()->show();}
  else if(whichItem.compare(CLOCK)==0){config_clock_window()->show();}
  else if(whichItem.find(LAUNCHER)<whichItem.length()){
    if(vernum<230){
      std::string temp=whichItem;
      if(temp.length()>LAUNCHER.length()+1){temp=temp.erase(0,LAUNCHER.length()+1);}
      std::string icon = getImageMenu(temp);
      configure_manually_window(icon)->show();
      icon_file->value(icon.c_str());
      std::string l= getLabelMenu(temp);
      manually_in->value(temp.c_str());
    }
    else{
      config_button_window(whatone)->show();
    }
  }
  else if(whichItem.compare("")==0){no_config()->show();}
  else if(whichItem.find(SWALLOW)<whichItem.length()){config_swallow_window()->show();}
  else{
    configure_manually_window("")->show();
    manually_in->value(whichItem.c_str());
   }
}} {}
  }
  Function {displayAPPicon(std::string filename,Fl_Widget* widget)} {} {
    code {makeWidgetIcon(filename,widget,48);
//widget->redraw();} {}
  }
  Function {Menu_CB(int num)} {open
  } {
    code {std::string LABEL = Menu_Label(num);
panel_chooser->copy_label(LABEL.c_str());
panel_chooser->redraw();
populateApps(app_browser);
//panel_window->hide();} {}
  }
  Function {move_up()} {open
  } {
    code {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  moveUp(appLine);
  populateApps(app_browser);
}
if(appLine-1 != 0 )app_browser->select(appLine-1);
else app_browser->select(1);} {}
  }
  Function {move_down()} {open
  } {
    code {unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  moveDown(appLine);
  populateApps(app_browser);
}
size =app_browser->size();
if(appLine+1 < size )app_browser->select(appLine+1);
else app_browser->select(size);} {}
  }
  Function {ok()} {open
  } {
    code {saveChanges();
exit(0);
/*panel_window->hide();
UI ux;ux.showSettings();*/} {}
  }
  Function {remove_indicator()} {open
  } {
    code {unsigned int line_item = indicator_browser->value();
std::string item = indicator_browser->text(line_item);
//std::cout<<item<<std::endl;
if(item.compare("Network")==0){deleteNetworkMonitor();}
else if(item.compare("Battery")==0){deleteBattery();}
else if(item.compare("Volume")==0){deleteVolume();}} {}
  }
  Function {save_user_clock()} {} {
    code {const char* result = clock_style->value();
if(result==NULL){return;}
changeClock(result);
clock_config_window->hide();} {}
  }
  Function {change_panel_position(std::string position)} {open
  } {
    code {panel_position(position);
std::string vval=getElementAttribute(currentPanel(),"Tray","valign");
if(vval.compare("")!=0){
  valign->value(vval.c_str());
  halign->redraw();
}
std::string hval=getElementAttribute(currentPanel(),"Tray","halign");
if(hval.compare("")!=0){
  halign->value(hval.c_str());
  halign->redraw();
}} {}
  }
  Function {config_button_window(int input_num)} {open
  } {
    code {int BUTTON_NUM=input_num;} {}
    Fl_Window conf_button_window {
      label {Configure Button} open
      xywh {744 92 285 150} type Double labelfont 14
      code0 {startup(o,jsm_panel_xpm);} xclass {jsm-panel} visible
    } {
      Fl_Input button_label {
        label Label
        tooltip {Text for the Panel Button} xywh {70 0 155 25} box FLAT_BOX color 55 selection_color 72 when 1
        code0 {get_tray_element_attrib(o,"label",BUTTON_NUM);}
      }
      Fl_Input button_icon_name {
        label Icon
        tooltip {The icon file name} xywh {70 30 155 25} box FLAT_BOX color 23 selection_color 80
        code0 {get_tray_element_attrib(o,"icon",BUTTON_NUM);}
      }
      Fl_Button button_icon_view {
        callback {std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0)makeWidgetIcon(iconFILE,o,48);}
        tooltip {Choose an Icon} xywh {230 5 50 50} box FLAT_BOX color 23 align 644
        code1 {const char *file=button_icon_name->value();}
        code2 {if(file!=NULL)makeWidgetIcon(file,o,48);}
      }
      Fl_Menu_Button {} {
        label {Mouse Button}
        xywh {70 60 125 25} box FLAT_BOX color 23 selection_color 80
      } {
        MenuItem {} {
          label 1
          callback {get_button_stuff(1);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label 2
          callback {get_button_stuff(2);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label 3
          callback {get_button_stuff(3);}
          xywh {0 0 100 20}
        }
      }
      Fl_Value_Output button_val {
        xywh {205 60 40 25} box FLAT_BOX color 23 selection_color 80
      }
      Fl_Input button_prog {
        label Program
        tooltip {Text for the Panel Button} xywh {70 90 155 25} box FLAT_BOX color 55 selection_color 72 when 1 deactivate
      }
      Fl_Button prog_conf_gear {
        callback {std::string program=choose_a_program();
if(program.compare("")==0){
  button_prog->activate();
  std::string result="exec:"+program;
  button_prog->value(result.c_str());
  button_prog->redraw();
}}
        tooltip {Configure the program} image {custom_buttons/gear16.png} xywh {230 90 25 25} box FLAT_BOX color 23
      }
      Fl_Output button_menu {
        label Menu
        tooltip {The root menu the button is tied to} xywh {70 120 25 25} box FLAT_BOX color 55 deactivate
      }
      Fl_Button menu_conf_gear {
        callback {const char* tmpTST =button_menu->value();
button_menu->activate();
if(tmpTST!=NULL){showMenu(tmpTST);}
else{showMenu();}} selected
        tooltip {Configure the menu} image {custom_buttons/gear16.png} xywh {100 120 25 25} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label OK
        callback {save_traybutton();}
        xywh {220 120 60 25} box FLAT_BOX color 69 labelfont 1 labelcolor 7
      }
    }
  }
  Function {get_button_stuff(int button)} {open
  } {
    code {std::string num;
button_val->value(button);
switch(button){
 case 1:
   num="1";break;
 case 2:
   num="2";break;
 case 3:
   num="3";break;
 default:return;
}
int whichbutton=app_browser->value();
std::string text = menuButtonText(getMenuButtonByMask(num,whichbutton));
if(text.compare("")==0)return;
Fl_Input *o=NULL;
if(text.find("exec:")==0){
  o=button_prog;
  button_menu->deactivate();
}
if(text.find("root:")==0){
  o=button_menu;
  button_prog->deactivate();
  text=text.substr(5,std::string::npos);
}

if(o!=NULL){
  o->value(text.c_str());
  o->activate();
}} {}
  }
  Function {get_tray_element_attrib(Fl_Input *o, std::string attribute,int num)} {open
  } {
    code {std::string val=getAttribute(getTraySubElement(num),attribute);
o->value(val.c_str());
o->redraw();} {}
  }
  Function {save_traybutton()} {open
  } {
    code {std::string MENU,PROG,ICON,LABEL,MASK;
const char* testMenu = button_menu->value();
if(testMenu!=NULL){MENU=testMenu;}
const char* testProg = button_prog->value();
if(testProg!=NULL){PROG=testProg;}
const char* icon = button_icon_name->value();
if(icon!=NULL){ICON=icon;}
const char* newLabel = button_label->value();
if(newLabel!=NULL){LABEL=newLabel;}
int masker=button_val->value();
if(masker>0){MASK=linuxcommon::convert_num_to_string(masker);}
int whichbutton=app_browser->value();
editButton(whichbutton,MENU,PROG,ICON,LABEL,MASK);} {}
  }
} 
