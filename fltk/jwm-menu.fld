# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.hpp"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../include/ui.hpp"} {selected public global
} 

decl {\#include "../include/menu.hpp"} {public global
} 

class MenuUI {open : {public JSM_Menu}
} {
  decl {int menuItemLineNumber; int JWMVERSION;int ROOTMENU;bool SUBMENU;int SUBSUB;} {public local
  }
  Function {add_a_menu()} {open
  } {
    Fl_Window {} {
      label {Add a Menu}
      xywh {132 177 305 110} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Browser list_browser {
        tooltip {Determine which buttons on the root window activate the menu. This is a list of integers specifying buttons. The default is 123. Multiple root menus may be used by specifying different buttons to activate them. Valid values in this list are 0 to 9 and a to z. The usual mouse buttons are 1 for the left button, 2 for the middle button, 3 for the right button, and 4 and 5 for the scroll wheel. Therefore, accessing root menus that are assigned to buttons 0, 6, 7, 8, 9, or a letter will typically require the use of a tray button or key binding.} xywh {5 5 95 100} type Hold box FLAT_BOX selection_color 80 align 130
        code1 {listMenus(o);}
      }
      Fl_Input new_menu_label {
        label Label
        tooltip {The label to display at the top of the menu, normally this is NOT shown} xywh {130 5 120 25} box FLAT_BOX align 8
      }
      Fl_Slider menu_height {
        label Height
        callback {double val=o->value();
height_input->value(val);}
        tooltip {The height of each menu item in pixels 0 indicates that the height of the font will determine the height. The default is 0.} xywh {130 40 120 25} type Horizontal box GTK_DOWN_BOX color 41 align 8 maximum 45
      }
      Fl_Check_Button islabeled_button {
        tooltip {Determines if a label appears at the top of the menu, this will have no effect if the label is not set} xywh {105 5 20 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button {} {
        label OK
        callback {if(!checkFlBrowserItem(list_browser)){return;}
unsigned int line = list_browser->value();
const char* val = list_browser->text(line);
if (val==NULL){return;}
std::string menu = val;
addRoot(menu);
const char* menuLabel = new_menu_label->value();
if (menuLabel!=NULL){
  unsigned int islabeled = islabeled_button->value();
  //change label
  setRootMenuAttribute(val,"label",menuLabel);
  if(islabeled==0){setRootMenuAttribute(val,"labeled","true");}
  else{setRootMenuAttribute(val,"labeled","true");}
}
int height = menu_height->value();
setRootMenuHeight(val,height);}
        xywh {240 75 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Value_Input height_input {
        callback {double val=o->value();
menu_height->value(val);}
        xywh {105 40 20 25} box FLAT_BOX
      }
    }
  }
  Function {add_window()} {open
  } {
    Fl_Window adding_win {
      label {Add an Item} open
      xywh {971 380 295 185} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Menu_Button {} {
        label {Item to add}
        xywh {5 5 115 25} box FLAT_BOX color 23
      } {
        MenuItem {} {
          label Program
          callback {add_cb(0);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Restart
          callback {add_cb(1);}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label Exit
          callback {add_cb(2);}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label Separator
          callback {add_cb(3);}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label Include
          callback {add_cb(4);}
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label Desktops
          callback {add_cb(5);}
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label SendTo
          callback {add_cb(6);}
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label Stick
          callback {add_cb(7);}
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label Maximize
          callback {add_cb(8);}
          xywh {80 80 100 20}
        }
        MenuItem {} {
          label Minimize
          callback {add_cb(9);}
          xywh {90 90 100 20}
        }
        MenuItem {} {
          label Shade
          callback {add_cb(10);}
          xywh {100 100 100 20}
        }
        MenuItem {} {
          label Move
          callback {add_cb(11);}
          xywh {110 110 100 20}
        }
        MenuItem {} {
          label Resize
          callback {add_cb(12);}
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label Kill
          callback {add_cb(13);}
          xywh {130 130 100 20}
        }
        MenuItem {} {
          label Close
          callback {add_cb(14);}
          xywh {140 140 100 20}
        }
        MenuItem {} {
          label Menu
          callback {add_cb(15);}
          xywh {150 150 100 20}
        }
        MenuItem {} {
          label Dynamic
          callback {add_cb(16);}
          xywh {0 0 100 20}
          code0 {if(JWMVERSION<231){o->hide();}}
        }
      }
      Fl_Output item_display {
        tooltip {The JWM Menu item to add} xywh {130 5 160 25} box FLAT_BOX
      }
      Fl_Input add_icon {
        label Icon
        tooltip {The icon to display for this item} xywh {130 35 160 25} box FLAT_BOX
      }
      Fl_Input add_label {
        label Label
        tooltip {The label to display for this item} xywh {130 65 160 25} box FLAT_BOX
      }
      Fl_Input add_input {
        label Program
        tooltip {The program to run} xywh {130 95 160 25} box FLAT_BOX
      }
      Fl_Input add_tooltip {
        label Tooltip
        tooltip {The popup tooltip} xywh {130 125 160 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {int resultant = save_cb();
if(resultant == 0){adding_win->hide();}}
        xywh {225 155 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Button add_icon_button {
        callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  add_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
}}
        tooltip {Choose an icon} xywh {5 35 50 50} box FLAT_BOX color 23
      }
      Fl_Button add_prog_button {
        callback {std::string result =choose_a_program();
if(result.compare("")!=0){add_input->value(result.c_str());}}
        tooltip {Choose a program} image {custom_buttons/gear16.png} xywh {5 90 30 30} box FLAT_BOX color 23
      }
      Fl_Check_Button add_button {
        label Confirm
        xywh {5 155 90 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
    }
  }
  Function {conf_item_window()} {} {
    Fl_Window config_item_win {
      label {Configure the Item} open
      xywh {750 200 280 125} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Input item_prog_icon {
        label Icon
        xywh {110 5 160 25} box FLAT_BOX
      }
      Fl_Input item_prog_label {
        label Label
        xywh {110 35 160 25} box FLAT_BOX
      }
      Fl_Input item_prog_input {
        label Program
        xywh {110 65 160 25} box FLAT_BOX
      }
      Fl_Check_Button item_conf_button {
        label Confirm
        xywh {5 95 90 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button item_prog_button {
        callback {std::string result =choose_a_program();
if(result.compare("")!=0){
  item_prog_input->value(result.c_str());
  item_prog_input->redraw();
}}
        image {custom_buttons/gear16.png} xywh {5 60 30 30} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label OK
        callback {if(!SUBMENU){configure_item();}
else{configure_submenu_item();}
config_item_win->hide();}
        xywh {210 95 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Button item_icon_button {
        callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  item_prog_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
}}
        xywh {5 5 50 50} box FLAT_BOX color 23
      }
    }
  }
  Function {conf_window()} {} {
    Fl_Window config_flwin {
      label {Configure the Item} open
      xywh {513 488 310 130} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Input prog_label {
        label Label
        xywh {55 5 160 25} box FLAT_BOX
        code0 {get_root_attrib(o,"label");}
      }
      Fl_Button {} {
        label OK
        callback {if(!SUBMENU){configure_item();}
else{configure_submenu_item();}
config_flwin->hide();}
        xywh {205 100 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Input prog_root {
        label Root
        xywh {55 35 40 25} box FLAT_BOX
        code0 {get_root_attrib(o,"onroot");}
      }
      Fl_Check_Button menu_root_labeled {
        label {Labeled?}
        tooltip {Display the Label in the Menu} xywh {220 5 25 25} down_box GTK_DOWN_BOX color 7 selection_color 2
      }
      Fl_Slider menu_height_slider {
        callback {menu_height_input->value(o->value());}
        xywh {90 65 120 25} type Horizontal box GTK_DOWN_BOX color 41 when 3 maximum 256 step 1
        code0 {get_root_height(o);}
      }
      Fl_Value_Input menu_height_input {
        label Height
        callback {menu_height_slider->value(o->value());}
        xywh {55 65 30 25} box FLAT_BOX when 3 maximum 256 step 1
        code0 {get_root_height(o);}
      }
    }
  }
  Function {configure_include()} {} {
    Fl_Window include_win {
      label {Edit Include Item} open
      xywh {666 457 390 45} type Double hide
      code0 {startup(o);}
    } {
      Fl_Input include_input {
        label Include
        xywh {70 5 245 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {include_win->hide();
change_include();}
        xywh {320 5 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Input old_include_input {
        xywh {70 5 245 25} box FLAT_BOX hide
      }
      Fl_Input include_input_menu {
        xywh {0 5 40 25} box FLAT_BOX hide
      }
    }
  }
  Function {make_window(std::string INPUTmenu)} {open
  } {
    code {load();
JWMVERSION=JWMversion();} {}
    Fl_Window menu_window {
      label {Menu properties} open
      xywh {823 374 440 230} type Double color 31 hide resizable
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Scroll {} {open
        xywh {0 0 435 230} color 31
      } {
        Fl_Tabs {} {open
          xywh {0 0 435 195} box FLAT_BOX selection_color 23
        } {
          Fl_Group {} {
            label Menus open
            xywh {0 25 435 170} box FLAT_BOX color 50 selection_color 45
          } {
            Fl_Button {} {
              label {@+}
              callback {add_a_menu()->show();}
              tooltip {Add a menu} xywh {5 160 30 30} box FLAT_BOX color 23 selection_color 47
            }
            Fl_Button minus_root {
              callback {remove_a_menu();}
              tooltip {remove a menu} image {custom_buttons/minus} xywh {40 160 30 30} box FLAT_BOX color 23 align 256
            }
            Fl_Browser menuElement {
              callback {menuElementText->select(o->value());}
              tooltip {Options: Menu, Dynamic, Include, Program, Separator, Desktops, SendTo, Stick, Maximize, Minimize, Shade, Move, Resize, Kill, Close, Restart, Exit} xywh {80 50 90 105} type Hold box FLAT_BOX selection_color 80
            }
            Fl_Button {} {
              label {@+}
              callback {add_an_item();}
              tooltip {Add a menu item} xywh {80 160 30 30} box FLAT_BOX color 23 selection_color 47
            }
            Fl_Button minus_element {
              callback {if(checkFlBrowserItem(root_menu)){remove_an_item();}}
              tooltip {remove a menu item} image {custom_buttons/minus} xywh {115 160 30 30} box FLAT_BOX color 23 align 256
            }
            Fl_Browser menuElementText {
              callback {int linenum = o->value();
menuElement->select(linenum);}
              tooltip {These options correspond to specific Root Menu items} xywh {175 50 255 105} type Hold box FLAT_BOX selection_color 80 labeltype NO_LABEL align 1
            }
            Fl_Browser root_menu {
              label { }
              callback {int line = o->value();
ROOTMENU=line;
const char* menu = o->text(line);
if(menu != NULL){
  std::string MENU=menu;
  menuElement->clear();
  menuElementText->clear();
  choose_menu(MENU);
}
else{std::cerr<<"Problem getting this menu"<<std::endl;}
menuElement->deselect();
menuElementText->deselect();}
              tooltip {The range of possible values is 0 to 9 inclusive as  well as  a to z inclusive, providing for up to 36 menus.  Note that only the numeric values map to mouse buttons.} xywh {5 50 65 105} type Hold box FLAT_BOX selection_color 80
              code1 {getMenus(o);}
              code2 {if(INPUTmenu.compare("")!=0){select_sent_in(INPUTmenu);}}
            }
            Fl_Button config_something {
              callback {if(checkFlBrowserItem(menuElement)){edit_an_item();}
else if(checkFlBrowserItem(root_menu)){edit_a_menu();}}
              tooltip Configure image {custom_buttons/gear16.png} xywh {175 160 30 30} box FLAT_BOX color 23 labelfont 1 align 128
            }
          }
          Fl_Group {} {
            label Appearance
            xywh {0 25 435 160} color 50 selection_color 45 hide
          } {
            Fl_Box {} {
              label Active
              xywh {10 55 135 35} box FLAT_BOX color 53 selection_color 39 align 1
            }
            Fl_Box {} {
              label Inactive
              xywh {10 105 135 35} box FLAT_BOX color 43 selection_color 39 align 1
            }
            Fl_Button menu_bg_color {
              callback {one_color(o,"MenuStyle");}
              tooltip {Menu Inactive Background Color} xywh {80 110 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color = getBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_bg_color_a {
              callback {one_color_active(o,"MenuStyle");}
              tooltip {Menu Active Background Color} xywh {80 60 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color=getActiveBackground(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Button menu_font_color {
              callback {one_color_Font(o,"MenuStyle");}
              tooltip {Menu Inactive Text Color} xywh {15 110 60 25} box FLAT_BOX color 23 align 8
              code0 {unsigned int c=0;}
              code1 {unsigned int color = getFontColor(c,"MenuStyle");}
              code2 {o->color(color);}
            }
            Fl_Slider o_menu_slider {
              label {Opacity of Menu}
              callback {opacity(o_menu_slider_v,o,"MenuStyle");}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {15 150 90 25} type Horizontal box GTK_DOWN_BOX color 42 selection_color 50 align 8 when 6 step 0.02 value 1
              code0 {const char* text=gettext("Opacity of Menu");o->label(text);}
              code1 {float h=getOpacity("MenuStyle");}
              code2 {o->value(h);}
            }
            Fl_Value_Input o_menu_slider_v {
              label {%}
              callback {opacity(o,o_menu_slider,"MenuStyle");}
              xywh {230 150 40 25} box FLAT_BOX color 23 labelsize 10 align 8
              code0 {float v = o_menu_slider->value();}
              code1 {o->value(v*100.0f);}
            }
            Fl_Button menu_font_a {
              callback {one_color_Font_active(o,"MenuStyle");}
              tooltip {Menu Active Text Color} xywh {15 60 60 25} box FLAT_BOX color 23 align 1
              code0 {unsigned int c=0;}
              code2 {unsigned int color = getActiveForeground(c,"MenuStyle");o->color(color);}
            }
            Fl_Menu_Button {} {
              label decorations open
              tooltip {Flat or Motif style decorations} xywh {160 55 110 25} box FLAT_BOX color 23
              code0 {if(JWMVERSION<232){o->hide();}}
            } {
              MenuItem {} {
                label flat
                callback {setDecorations(menu_deco,"MenuStyle","flat");}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label motif
                callback {setDecorations(menu_deco,"MenuStyle","motif");}
                xywh {10 10 100 20}
              }
            }
            Fl_Button menu_outline {
              label Outline
              callback {outline_color(o,"MenuStyle");}
              xywh {175 110 60 25} box FLAT_BOX color 23 align 1 deactivate
            }
            Fl_Output menu_deco {
              tooltip {Flat or Motif style decorations (flat is default)} xywh {280 55 110 25} box FLAT_BOX selection_color 80
              code1 {getDecorations(o,"MenuStyle");}
            }
          }
        }
      }
      Fl_Button {} {
        label Cancel
        callback {cancel();}
        xywh {315 200 57 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button save_button {
        label OK
        callback {saveChangesMenu();}
        tooltip {Write to configuration file} xywh {381 200 49 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {nada_window()} {} {
    Fl_Window nada_win {
      label {Nothing to Configure}
      callback {o->hide();} open
      xywh {265 326 220 50} type Double when 1 hide
    } {
      Fl_Button {} {
        label {Nothing to Configure}
        callback {nada_win->hide();}
        xywh {5 10 210 30} box FLAT_BOX color 80 labelcolor 55
      }
    }
  }
  Function {submenu_window()} {open
  } {
    Fl_Window subwin {
      label Submenu open
      xywh {743 211 405 205} type Double hide
      code0 {startup(o);}
      code1 {SUBMENU=true;}
    } {
      Fl_Browser submenu_items_browser {
        callback {submenu_items_value->select(o->value());}
        xywh {10 5 90 160} type Hold box FLAT_BOX selection_color 80
      }
      Fl_Browser submenu_items_value {
        callback {submenu_items_browser->select(o->value());}
        xywh {110 5 275 160} type Hold box FLAT_BOX selection_color 80
        code0 {getSubMenu(submenu_items_browser,o,ROOTMENU,menuItemLineNumber);}
      }
      Fl_Button config_sub {
        callback {if(checkFlBrowserItem(submenu_items_value)){
  if(!edit_a_submenu_item()){
    debug_out("Couldn't edit submenu item");
  }

}
subwin->hide();}
        tooltip {Configure Item} image {custom_buttons/gear16.png} xywh {110 170 30 30} box FLAT_BOX color 23 labelfont 1 align 128
      }
      Fl_Button {} {
        label OK
        callback {subwin->hide();
saveChangesMenu();
SUBMENU=false;
SUBSUB=0;}
        tooltip {Write to configuration file} xywh {326 170 49 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button {} {
        label {@+}
        callback {add_window()->show();}
        tooltip {Add an Item} xywh {10 170 30 30} box FLAT_BOX color 23 selection_color 47
      }
      Fl_Button {} {
        callback {if(checkFlBrowserItem(submenu_items_browser)){
  SUBSUB=submenu_items_value->value();
  remove_an_item();
}}
        tooltip {Remove an Item} image {custom_buttons/minus} xywh {45 170 30 30} box FLAT_BOX color 23 align 256
      }
    }
  }
  Function {add_an_item()} {open
  } {
    code {if(!checkFlBrowserItem(root_menu)){return;}
add_window()->show();} {}
  }
  Function {add_cb(int whichOne)} {open
  } {
    code {//Program 0
//Restart 1
//Exit 2
//Separator 3
//Include 4
//Desktops 5
//SendTo 6
//Stick 7
//Maximize 8
//Minimize 9
//Shade 10
//Move 11
//Resize 12
//Kill 13
//Close 14
//Menu (height,label,icon,labeled)
add_prog_button->hide();
add_input->hide();
add_button->hide();
add_label->show();
add_icon->show();
add_icon_button->show();
std::string result;
std::string CONFIRM=gettext("Confirm");
std::string LABELED=gettext("Labeled");
std::string LBL_TT=gettext("Determines  if a label appears at the top of the menu. Default is false.");
std::string CONF_TT=gettext("Determine if a confirm dialog appears before exiting. Default is true.");
switch (whichOne){
  case 0:
    result="Program";
    add_prog_button->show();
    add_input->show();
    break;
  case 1:
    result="Restart";
    break;
  case 2:
    result="Exit";
    add_button->show();
    add_button->tooltip(CONF_TT.c_str());
    add_button->copy_label(CONFIRM.c_str());
    break;
  case 3:
    result="Separator";
    add_label->hide();
    add_icon->hide();
    add_icon_button->hide();
    break;
  case 4:
    result="Include";
    add_input->show();
    add_label->hide();
    add_icon->hide();
    add_icon_button->hide();
    break;
  case 5:
    result="Desktops";
    break;
  case 6:
    result="SendTo";
    break;
  case 7:
    result="Stick";
    break;
  case 8:
    result="Maximize";
    break;
  case 9:
    result="Minimize";
    break;
  case 10:
    result="Shade";
    break;
  case 11:
    result="Move";
    break;
  case 12:
    result="Resize";
    break;
  case 13:
    result="Kill";
    break;
  case 14:
    result="Close";
    break;
  case 15:
    result="Menu";
    add_button->show();
    add_button->tooltip(LBL_TT.c_str());
    add_button->copy_label(LABELED.c_str());
    break;
  case 16:
    result="Dynamic";
    add_input->show();
    add_button->show();
    add_button->tooltip(LBL_TT.c_str());
    add_button->copy_label(LABELED.c_str());
    break;
  default: 
    return;
}
item_display->value(result.c_str());} {}
  }
  Function {change_include()} {open
  } {
    code {const char* old = old_include_input->value();
if(old==NULL){return;}
const char* new_include = include_input->value();
if(new_include==NULL){return;}
std::string newInclude=new_include;
if(newInclude.compare(old)==0){return;}
const char* menu = include_input_menu->value();
if(menu==NULL){return;}
std::string MENU = menu;
std::cout<<"MENU: "<<MENU<<std::endl;
changeMenuInclude(newInclude,old,MENU);
if(getMenuItems(menuElement,menu,menuElementText)){
  menuElementText->copy_label(menu);
}} {}
  }
  Function {choose_menu(std::string menu)} {} {
    code {if(getMenuItems(menuElement,menu,menuElementText)){
 debug_out("Got menu: "+menu);
}} {}
  }
  Function {configure_item()} {open
  } {
    code {if(!checkFlBrowserItem(root_menu)){
  errorOUT("No root menu is still selected");
  return;
}
if(!checkFlBrowserItem(menuElement)){
  errorOUT("No menu item is still selected");
  return;
}
const char* MENU=root_menu->text(ROOTMENU);
if(ConfigMenuItem(ROOTMENU,menuItemLineNumber,item_prog_label,item_prog_icon,item_prog_input,item_conf_button)){
  menuElement->clear();
  menuElementText->clear();
  if(MENU!=NULL)choose_menu(MENU);
}
//config_flwin->hide();} {}
  }
  Function {configure_submenu_item()} {open
  } {
    code {if(!checkFlBrowserItem(submenu_items_browser)){
  errorOUT("No menu item selected");
  return;
}
if(!checkFlBrowserItem(submenu_items_value)){
  errorOUT("No menu item selected");
  return;
}
const char* MENU=root_menu->text(ROOTMENU);
if(ConfigSubMenuItem(ROOTMENU,menuItemLineNumber,SUBSUB,item_prog_label,item_prog_icon,item_prog_input,item_conf_button)){
//TODO...
}
//config_flwin->hide();} {}
  }
  Function {edit_a_menu()} {open
  } {
    code {if(checkFlBrowserItem(root_menu)){
  SUBMENU=false;
  conf_window()->show();
}} {}
  }
  Function {edit_a_submenu_item()} {open return_type bool
  } {
    code {if(!checkFlBrowserItem(submenu_items_value)){return false;}
if(!checkFlBrowserItem(submenu_items_browser)){return false;}
int menuNum = ROOTMENU;
int line = submenu_items_browser->value();
SUBSUB=line;
const char* text = submenu_items_browser->text(line);
const char* text2 = submenu_items_value->text(line);
if(text2==NULL)return false;
if(text==NULL)return false;
const char* menu = root_menu->text(menuNum);
std::string LABELED=gettext("Labeled");
std::string EXIT="Exit";
std::string RESTART="Restart";
std::string iconattrib = "icon"; 
std::string labelattrib = "label";
std::string labeledattrib = "labeled";
std::string confirmattrib = "confirm";
std::string ITEM = text;
debug_out("edit SUBMENU Item: "+ITEM);
std::string ICON,LABEL,PROG;
SUBMENU=true;
ICON = getItemIcon(menuNum,menuItemLineNumber,SUBSUB);
LABEL= getItemLabel(menuNum,menuItemLineNumber,SUBSUB);
if(ITEM.compare("Separator")==0){
  nada_window()->show();
  return true;
}
if(ITEM.compare("Include")==0){
  std::string exec ="exec:";
  unsigned int exec_len = exec.length();
  std::string INCLUDE;
  if(text2!=NULL)
    INCLUDE = text2;
  else return false;
  configure_include()->show();
  unsigned int found = INCLUDE.find(exec);
  if(found<INCLUDE.length()){
    INCLUDE=INCLUDE.erase(0,exec_len);
  }
  include_input->value(INCLUDE.c_str());
  include_input_menu->value(menu);
  old_include_input->value(INCLUDE.c_str());
  return true;
}
else if(ITEM.compare("Menu")==0){
   nada_window()->show();//submenu_window()->show();
  return true;
}
//Show the configure item window
conf_item_window()->show();
if(ITEM.compare("Dynamic")==0){
  item_prog_input->value(text2);
  debug_out("Dynamic");
  item_conf_button->copy_label(LABELED.c_str());
  std::string confirm = getItemAttribute(menuNum,line,ITEM,labeledattrib); 
  if(confirm.compare("true")){item_conf_button->value(0);}
  else{item_conf_button->value(1);}
}
if(ITEM.compare("Program")==0){
  item_prog_input->value(text2);
  item_conf_button->hide();
}
else if(ITEM.compare(EXIT)==0){
  item_prog_input->hide();
  item_prog_button->hide();
  std::string confirm = getItemAttribute(menuNum,line,ITEM,confirmattrib); 
  if(confirm.compare("true")){item_conf_button->value(0);}
  else{item_conf_button->value(1);}
}
else if(ITEM.compare(RESTART)==0){
  item_prog_input->hide();
  item_prog_button->hide();
  item_conf_button->hide();
}
if(ICON.compare("")!=0){
  item_prog_icon->value(ICON.c_str());
  makeWidgetIcon(ICON,item_icon_button,48);
}
if(LABEL.compare("")!=0){
  item_prog_label->value(LABEL.c_str());
  item_prog_label->redraw();
}
return true;} {}
  }
  Function {edit_an_item()} {open
  } {
    code {if(!checkFlBrowserItem(menuElement)){return;}
if(!checkFlBrowserItem(root_menu)){return;}
if(!checkFlBrowserItem(menuElementText)){return;}
SUBMENU=false;
int line = menuElement->value();
const char* text = menuElement->text(line);
int menuNum = root_menu->value();
const char* menu = root_menu->text(menuNum);
menuItemLineNumber=line;
ROOTMENU=menuNum;
std::string LABELED=gettext("Labeled");
std::string EXIT="Exit";
std::string RESTART="Restart";
std::string iconattrib = "icon"; 
std::string labelattrib = "label";
std::string labeledattrib = "labeled";
std::string confirmattrib = "confirm";
std::string ITEM = text;
debug_out("edit Item: "+ITEM);
int line2 = menuElementText->value();
const char* text2 = menuElementText->text(line2);
std::string ICON,LABEL,PROG;
ICON = getItemIcon(menuNum,line,ITEM);
LABEL= getItemLabel(menuNum,line,ITEM);
if(ITEM.compare("Separator")==0){
  nada_window()->show();
  return;
}
if(ITEM.compare("Include")==0){
  std::string exec ="exec:";
  unsigned int exec_len = exec.length();
  std::string INCLUDE;
  if(text2!=NULL)
    INCLUDE = text2;
  else return;
  configure_include()->show();
  unsigned int found = INCLUDE.find(exec);
  if(found<INCLUDE.length()){
    INCLUDE=INCLUDE.erase(0,exec_len);
  }
  include_input->value(INCLUDE.c_str());
  include_input_menu->value(menu);
  old_include_input->value(INCLUDE.c_str());
  return;
}
else if(ITEM.compare("Menu")==0){
  submenu_window()->show();
  return;
}
//Show the configure item window
conf_item_window()->show();
if(ITEM.compare("Dynamic")==0){
  item_prog_input->value(text2);
  debug_out("Dynamic");
  item_conf_button->copy_label(LABELED.c_str());
  std::string confirm = getItemAttribute(menuNum,line,ITEM,labeledattrib); 
  if(confirm.compare("true")){item_conf_button->value(0);}
  else{item_conf_button->value(1);}
}
if(ITEM.compare("Program")==0){
  item_prog_input->value(text2);
  item_conf_button->hide();
}
else if(ITEM.compare(EXIT)==0){
  item_prog_input->hide();
  item_prog_button->hide();
  std::string confirm = getItemAttribute(menuNum,line,ITEM,confirmattrib); 
  if(confirm.compare("true")){item_conf_button->value(0);}
  else{item_conf_button->value(1);}
}
else if(ITEM.compare(RESTART)==0){
  item_prog_input->hide();
  item_prog_button->hide();
  item_conf_button->hide();
}

if(ICON.compare("")!=0){
  item_prog_icon->value(ICON.c_str());
  makeWidgetIcon(ICON,item_icon_button,48);
}
if(LABEL.compare("")!=0){
  item_prog_label->value(LABEL.c_str());
  item_prog_label->redraw();
}} {}
  }
  Function {remove_an_item()} {open
  } {
    code {std::cout<<"Remove"<<std::endl;
int retval=0;
if(SUBMENU){
  retval=removeMenuItem(ROOTMENU,menuItemLineNumber,SUBSUB);
  getSubMenu(submenu_items_browser,submenu_items_value,ROOTMENU,menuItemLineNumber);
}
else{
  menuElement->clear();
  menuElementText->clear();
  menuElement->deselect();
  menuElementText->deselect();
  retval=removeMenuItem(ROOTMENU,menuItemLineNumber,0);
}} {}
  }
  Function {remove_a_menu()} {open
  } {
    code {if(!checkFlBrowserItem(root_menu)){return;}
int line = root_menu->value();
const char* value = root_menu->text(line);
removeMenu(value);
getMenus(root_menu);
menuElement->clear();
menuElementText->clear();} {}
  }
  Function {save_cb()} {open return_type int
  } {
    code {//save
const char* result = item_display->value();
int retval=0;
if(result ==NULL){return 42;}
if(SUBMENU){
  retval=addMenuItem(ROOTMENU,menuItemLineNumber, add_label, add_icon, add_input, add_tooltip, add_button, result);
  getSubMenu(submenu_items_browser,submenu_items_value,ROOTMENU,menuItemLineNumber);
}
else{
  retval=addMenuItem(root_menu, add_label, add_icon, add_input, add_tooltip, add_button, result);
  menuElement->clear();
  menuElementText->clear();
  menuElement->deselect();
  menuElementText->deselect();
}
return retval;} {}
  }
  Function {select_sent_in(std::string thatMenu)} {} {
    code {if(thatMenu.compare("")==0)return;
choose_menu(thatMenu);
int tot=root_menu->size();
if(tot>0){
  for (int i=0;i!=tot;i++){
    const char* txt=root_menu->text(i);
    if((txt!=NULL)&&(thatMenu.compare(txt)==0)){root_menu->select(i);}
  }
}} {}
  }
  Function {get_root_attrib(Fl_Input *o,std::string attribute)} {open
  } {
    code {std::string val=getRootMenuAttribute(ROOTMENU,attribute);
if(val.compare("")!=0){
  o->value(val.c_str());
  o->redraw();
}} {}
  }
  Function {get_root_height(Fl_Valuator *o)} {} {
    code {std::string val=getRootMenuAttribute(ROOTMENU,"height");
if(val.compare("")!=0){
  double num = linuxcommon::convert_string_to_double(val);
  o->value(num);
  o->redraw();
}} {}
  }
  Function {mod_root_menu()} {open
  } {
    code {const char* lbl=prog_label->value();
if(lbl!=NULL){setRootMenuAttribute(ROOTMENU,"label",lbl);}
const char* root=prog_root->value();
if(root!=NULL){setRootMenuAttribute(ROOTMENU,"onroot",root);}
double height=menu_height_input->value();
const char* tmp=linuxcommon::convert_num_to_string(height);
if(tmp!=NULL){setRootMenuAttribute(ROOTMENU,"height",tmp);}
int lbled=menu_root_labeled->value();
std::string TMP="false";
if(lbled!=0)TMP="true";
setRootMenuAttribute(ROOTMENU,"labeled",TMP);} {}
  }
} 
