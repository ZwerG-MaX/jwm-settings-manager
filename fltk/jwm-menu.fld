# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include "../include/menu.hpp"} {public global
} 

class MenuUI {open
} {
  decl {int menuItemLineNumber;} {public local
  }
  Function {add_a_menu()} {open
  } {
    Fl_Window {} {
      label {Add a Menu} open
      xywh {132 177 305 110} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Browser list_browser {
        tooltip {Determine which buttons on the root window activate the menu. This is a list of integers specifying buttons. The default is 123. Multiple root menus may be used by specifying different buttons to activate them. Valid values in this list are 0 to 9 and a to z. The usual mouse buttons are 1 for the left button, 2 for the middle button, 3 for the right button, and 4 and 5 for the scroll wheel. Therefore, accessing root menus that are assigned to buttons 0, 6, 7, 8, 9, or a letter will typically require the use of a tray button or key binding.} xywh {5 5 95 100} type Hold box FLAT_BOX selection_color 80 align 130
        code1 {listMenus(o);}
      }
      Fl_Input new_menu_label {
        label Label
        tooltip {The label to display at the top of the menu, normally this is NOT shown} xywh {130 5 120 25} box FLAT_BOX align 8
      }
      Fl_Slider menu_height {
        label Height
        callback {double val=o->value();
height_input->value(val);}
        tooltip {The height of each menu item in pixels 0 indicates that the height of the font will determine the height. The default is 0.} xywh {130 40 120 25} type Horizontal box GTK_DOWN_BOX color 41 align 8 maximum 45
      }
      Fl_Check_Button islabeled_button {
        tooltip {Determines if a label appears at the top of the menu, this will have no effect if the label is not set} xywh {105 5 20 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button {} {
        label OK
        callback {if(!checkFlBrowserItem(list_browser)){return;}
unsigned int line = list_browser->value();
const char* val = list_browser->text(line);
if (val==NULL){return;}
std::string menu = val;
addRoot(menu);
const char* menuLabel = new_menu_label->value();
if (menuLabel!=NULL){
  unsigned int islabeled = islabeled_button->value();
  //change label
  setRootMenuAttribute(val,"label",menuLabel);
  if(islabeled==0){setRootMenuAttribute(val,"labeled","true");}
  else{setRootMenuAttribute(val,"labeled","true");}
}
int height = menu_height->value();
setRootMenuHeight(val,height);} selected
        xywh {240 75 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Value_Input height_input {
        callback {double val=o->value();
menu_height->value(val);}
        xywh {105 40 20 25} box FLAT_BOX
      }
    }
  }
  Function {add_window()} {} {
    Fl_Window adding_win {
      label {Add an Item} open
      xywh {781 552 295 160} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Input add_label {
        label Label
        xywh {130 65 160 25} box FLAT_BOX
      }
      Fl_Input add_icon {
        label Icon
        xywh {130 35 160 25} box FLAT_BOX
      }
      Fl_Input add_input {
        label Program
        xywh {130 95 160 25} box FLAT_BOX
      }
      Fl_Check_Button add_button {
        label Confirm
        xywh {5 125 90 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button add_prog_button {
        callback {std::string result =choose_a_program();
if(result.compare("")!=0){add_input->value(result.c_str());}}
        image {custom_buttons/gear16.png} xywh {5 90 30 30} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label OK
        callback {int resultant = save_cb();
if(resultant == 0){adding_win->hide();}}
        xywh {230 130 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Button add_icon_button {
        callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  add_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
}}
        xywh {5 35 50 50} box FLAT_BOX color 23
      }
      Fl_Menu_Button {} {
        label {Item to add}
        xywh {5 5 115 25} box FLAT_BOX color 23
      } {
        MenuItem {} {
          label Program
          callback {add_cb(0);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Restart
          callback {add_cb(1);}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label Exit
          callback {add_cb(2);}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label Separator
          callback {add_cb(3);}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label Include
          callback {add_cb(4);}
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label Desktops
          callback {add_cb(5);}
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label SendTo
          callback {add_cb(6);}
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label Stick
          callback {add_cb(7);}
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label Maximize
          callback {add_cb(8);}
          xywh {80 80 100 20}
        }
        MenuItem {} {
          label Minimize
          callback {add_cb(9);}
          xywh {90 90 100 20}
        }
        MenuItem {} {
          label Shade
          callback {add_cb(10);}
          xywh {100 100 100 20}
        }
        MenuItem {} {
          label Move
          callback {add_cb(11);}
          xywh {110 110 100 20}
        }
        MenuItem {} {
          label Resize
          callback {add_cb(12);}
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label Kill
          callback {add_cb(13);}
          xywh {130 130 100 20}
        }
        MenuItem {} {
          label Close
          callback {add_cb(14);}
          xywh {140 140 100 20}
        }
        MenuItem {} {
          label Menu
          callback {add_cb(15);}
          xywh {150 150 100 20}
        }
      }
      Fl_Output item_display {
        xywh {130 5 160 25} box FLAT_BOX
      }
    }
  }
  Function {conf_item_window()} {open
  } {
    Fl_Window config_item_win {
      label {Configure the Item} open
      xywh {706 308 280 125} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Input item_prog_icon {
        label Icon
        xywh {110 5 160 25} box FLAT_BOX
      }
      Fl_Input item_prog_label {
        label Label
        xywh {110 35 160 25} box FLAT_BOX
      }
      Fl_Input item_prog_input {
        label Program
        xywh {110 65 160 25} box FLAT_BOX
      }
      Fl_Check_Button item_conf_button {
        label Confirm
        xywh {5 95 90 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button item_prog_button {
        callback {std::string result =choose_a_program();
if(result.compare("")!=0){
  item_prog_input->value(result.c_str());
  item_prog_input->redraw();
}}
        image {custom_buttons/gear16.png} xywh {5 60 30 30} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label OK
        callback {configure_item();
config_flwin->hide();}
        xywh {210 95 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Button item_icon_button {
        callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  item_prog_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
}}
        xywh {5 5 50 50} box FLAT_BOX color 23
      }
    }
  }
  Function {conf_window()} {open
  } {
    Fl_Window config_flwin {
      label {Configure the Item} open
      xywh {738 156 275 130} type Double hide
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Input prog_icon {
        label Icon
        xywh {105 5 160 25} box FLAT_BOX
      }
      Fl_Input prog_label {
        label Label
        xywh {105 35 160 25} box FLAT_BOX
      }
      Fl_Input prog_input {
        label Program
        xywh {105 65 160 25} box FLAT_BOX
      }
      Fl_Check_Button conf_button {
        label Confirm
        xywh {5 95 90 25} box FLAT_BOX down_box GTK_DOWN_BOX
      }
      Fl_Button prog_button {
        callback {std::string result =choose_a_program();
if(result.compare("")!=0){
  prog_input->value(result.c_str());
  prog_input->redraw();
}}
        image {custom_buttons/gear16.png} xywh {5 60 30 30} box FLAT_BOX color 23
      }
      Fl_Button {} {
        label OK
        callback {configure_item();
config_flwin->hide();}
        xywh {205 100 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Button icon_button {
        callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  item_prog_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
}}
        xywh {5 5 50 50} box FLAT_BOX color 23
      }
    }
  }
  Function {configure_include()} {open
  } {
    Fl_Window include_win {
      label {Edit Include Item} open
      xywh {666 457 390 45} type Double hide
      code0 {startup(o);}
    } {
      Fl_Input include_input {
        label Include
        xywh {70 5 245 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {include_win->hide();
change_include();}
        xywh {320 5 60 25} box FLAT_BOX color 61 labelcolor 7
      }
      Fl_Input old_include_input {
        xywh {70 5 245 25} box FLAT_BOX hide
      }
      Fl_Input include_input_menu {
        xywh {0 5 40 25} box FLAT_BOX hide
      }
    }
  }
  Function {make_window(std::string INPUTmenu)} {open
  } {
    code {load();} {}
    Fl_Window menu_window {
      label {Menu properties} open
      xywh {197 461 435 150} type Double color 31 hide resizable
      code0 {startup(o);} xclass {jsm-panel}
    } {
      Fl_Scroll {} {open
        xywh {0 -330 1015 580} color 31
      } {
        Fl_Button {} {
          label {@+}
          callback {add_a_menu()->show();}
          tooltip {Add a menu} xywh {5 115 30 30} box FLAT_BOX color 23 selection_color 47
        }
        Fl_Button {} {
          callback {remove_a_menu();}
          tooltip {remove a menu} image {custom_buttons/minus} xywh {40 115 30 30} box FLAT_BOX color 23 align 256
        }
        Fl_Browser menuElement {
          callback {int linenum = o->value();
menuElementText->select(linenum);}
          tooltip {Options: Menu, Dynamic, Include, Program, Separator, Desktops, SendTo, Stick, Maximize, Minimize, Shade, Move, Resize, Kill, Close, Restart, Exit} xywh {80 5 90 105} type Hold box FLAT_BOX selection_color 80
        }
        Fl_Button {} {
          label {@+}
          callback {add_an_item();}
          tooltip {Add a menu item} xywh {80 115 30 30} box FLAT_BOX color 23 selection_color 47
        }
        Fl_Button {} {
          callback {remove_an_item();}
          tooltip {remove a menu item} image {custom_buttons/minus} xywh {115 115 30 30} box FLAT_BOX color 23 align 256
        }
        Fl_Browser menuElementText {
          callback {int linenum = o->value();
menuElement->select(linenum);}
          tooltip {These options correspond to specific Root Menu items} xywh {175 5 255 105} type Hold box FLAT_BOX selection_color 80 labeltype NO_LABEL align 1
        }
        Fl_Button {} {
          callback {if(checkFlBrowserItem(menuElementText)){edit_an_item();}
else{
  if(checkFlBrowserItem(menuElement)){edit_a_menu();}
  else if(checkFlBrowserItem(root_menu)){submenu_window()->show();}
}}
          tooltip Configure image {custom_buttons/gear16.png} xywh {175 115 30 30} box FLAT_BOX color 23 labelfont 1 align 128
        }
        Fl_Button {} {
          label Cancel
          callback {cancel();}
          xywh {315 120 57 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {saveChanges();
//showSettings();}
          tooltip {Write to configuration file} xywh {381 120 49 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Browser root_menu {
          label { }
          callback {int line = o->value();
const char* menu = o->text(line);
if(menu != NULL){
  std::string MENU=menu;
  choose_menu(MENU);
}
else{std::cerr<<"Problem getting this menu"<<std::endl;}}
          tooltip {The range of possible values is 0 to 9 inclusive as  well
                     as  a to z inclusive, providing for up to 36 menus.  Note
                     that only the numeric values map to mouse buttons.} xywh {5 5 65 105} type Hold box FLAT_BOX selection_color 80
          code1 {getMenus(o);}
          code2 {if(INPUTmenu.compare("")!=0){select_sent_in(INPUTmenu);}}
        }
      }
    }
  }
  Function {nada_window()} {} {
    Fl_Window nada_win {
      label {Nothing to Configure}
      callback {o->hide();} open
      xywh {265 326 220 50} type Double when 1 hide
    } {
      Fl_Button {} {
        label {Nothing to Configure}
        callback {nada_win->hide();}
        xywh {5 10 210 30} box FLAT_BOX color 80 labelcolor 55
      }
    }
  }
  Function {submenu_window()} {} {
    Fl_Window {} {
      label Submenu open
      xywh {790 291 255 200} type Double hide
      code0 {startup(o);}
    } {
      Fl_Browser submenu_items_browser {
        xywh {5 5 245 160} type Hold box FLAT_BOX
      }
      Fl_Output submenu_menu {
        xywh {10 170 25 25} hide
      }
      Fl_Input {} {
        xywh {115 170 135 25} box FLAT_BOX
      }
    }
  }
  Function {add_an_item()} {open
  } {
    code {if(!checkFlBrowserItem(root_menu)){return;}
add_window()->show();} {}
  }
  Function {add_cb(int whichOne)} {open
  } {
    code {//Program 0
//Restart 1
//Exit 2
//Separator 3
//Include 4
//Desktops 5
//SendTo 6
//Stick 7
//Maximize 8
//Minimize 9
//Shade 10
//Move 11
//Resize 12
//Kill 13
//Close 14
//Menu (height,label,icon,labeled)
add_prog_button->hide();
add_input->hide();
add_button->hide();
add_label->show();
add_icon->show();
add_icon_button->show();
std::string result;
switch (whichOne){
  case 0:
    result="Program";
    add_prog_button->show();
    add_input->show();
    break;
  case 1:
    result="Restart";
    break;
  case 2:
    result="Exit";
    add_button->show();
    add_button->copy_label("Confirm");
    break;
  case 3:
    result="Separator";
    add_label->hide();
    add_icon->hide();
    add_icon_button->hide();
    break;
  case 4:
    result="Include";
    add_input->show();
    add_label->hide();
    add_icon->hide();
    add_icon_button->hide();
    break;
  case 5:
    result="Desktops";
    break;
  case 6:
    result="SendTo";
    break;
  case 7:
    result="Stick";
    break;
  case 8:
    result="Maximize";
    break;
  case 9:
    result="Minimize";
    break;
  case 10:
    result="Shade";
    break;
  case 11:
    result="Move";
    break;
  case 12:
    result="Resize";
    break;
  case 13:
    result="Kill";
    break;
  case 14:
    result="Close";
    break;
  case 15:
    result="Menu";
    add_button->show();
    add_button->copy_label("Labeled");
    break;
}
item_display->value(result.c_str());} {}
  }
  Function {change_include()} {} {
    code {const char* old = old_include_input->value();
if(old==NULL){return;}
const char* new_include = include_input->value();
if(new_include==NULL){return;}
std::string newInclude=new_include;
if(newInclude.compare(old)==0){return;}
const char* menu = include_input_menu->value();
if(menu==NULL){return;}
std::string MENU = menu;
std::cout<<"MENU: "<<MENU<<std::endl;
changeMenuInclude(newInclude,old,MENU);
if(getMenuItems(menuElement,menu,menuElementText)){
  menuElementText->copy_label(menu);
}} {}
  }
  Function {choose_menu(std::string menu)} {open
  } {
    code {if(getMenuItems(menuElement,menu,menuElementText)){
 debug_out("Got menu: "+menu);
}} {}
  }
  Function {configure_item()} {open
  } {
    code {if(!checkFlBrowserItem(menuElementText)){return;}
const char* menu = menuElementText->label();
if(ConfigMenuItem(menuElement,menuElementText,prog_label,prog_icon,prog_input,conf_button)){
  choose_menu(menu);
}} {}
  }
  Function {confirm_check()} {open
  } {
    code {if(!checkFlBrowserItem(menuElement)){return;}
int LINEposition = menuElement->value();
std::string NAME = menuElement->text(LINEposition);
if(NAME.compare("Exit")!=0){conf_button->hide();}} {}
  }
  Function {edit_a_menu()} {open
  } {
    code {if(checkFlBrowserItem(root_menu)){
  int line = root_menu->value();
  const char* menu = root_menu->text(line);
  std::string MENU=menu;
  conf_window()->show();
  std::string result = getLabel(MENU);
  prog_label->value(result.c_str());
}} {}
  }
  Function {edit_an_item()} {open
  } {
    code {if(!checkFlBrowserItem(menuElement)){return;}
if(!checkFlBrowserItem(root_menu)){return;}
if(!checkFlBrowserItem(menuElementText)){return;}
int line = menuElement->value();
const char* text = menuElement->text(line);
int menuNum = root_menu->value();
const char* menu = root_menu->text(menuNum);
std::string EXIT="Exit";
std::string RESTART="Restart";
std::string iconattrib = "icon"; 
std::string labelattrib = "label";
std::string confirmattrib = "confirm";
std::string ITEM = text;
debug_out("edit Item: "+ITEM);
int line2 = menuElementText->value();
const char* text2 = menuElementText->text(line2);
std::string ICON,LABEL;
if(ITEM.compare("Program")==0){
  conf_item_window()->show();
  item_prog_input->value(text2);
  item_conf_button->hide();
  ICON = getItemIcon(text2,menu);
  LABEL = getItemLabel(text2,menu);
}
else if(ITEM.compare("Include")==0){
  std::string exec ="exec:";
  unsigned int exec_len = exec.length();
  std::string INCLUDE = text2;
  unsigned int found = INCLUDE.find(exec);
  if(found<INCLUDE.length()){
    INCLUDE=INCLUDE.erase(0,exec_len);
    std::cout<<"Include: "<<INCLUDE<<std::endl;
    configure_include()->show();
    include_input->value(INCLUDE.c_str());
    include_input_menu->value(menu);
    old_include_input->value(INCLUDE.c_str());
    
  }
}
else if(ITEM.compare("Menu")==0){
  submenu_window()->show();
  submenu_menu->value(menu);
}
else if(ITEM.compare("Dynamic")==0){
  debug_out("Dyanmic Menu!");
}
else if(ITEM.compare(EXIT)==0){
  conf_item_window()->show();
  item_prog_input->hide();
  item_prog_button->hide();
  ICON = getItemAttribute(EXIT,menu,iconattrib);
  LABEL = getItemAttribute(EXIT,menu,labelattrib);
  std::string confirm = getItemAttribute(EXIT,menu,confirmattrib); 
  if(confirm.compare("true")){item_conf_button->value(0);}
  else{item_conf_button->value(1);}
}
else if(ITEM.compare(RESTART)==0){
  conf_item_window()->show();
  item_prog_input->hide();
  item_prog_button->hide();
  ICON = getItemAttribute(RESTART,menu,iconattrib);
  LABEL = getItemAttribute(RESTART,menu,labelattrib);
  item_conf_button->hide();
}
else{
  nada_window()->show();
}
if(ICON.compare("")!=0){
  item_prog_icon->value(ICON.c_str());
  makeWidgetIcon(ICON,item_icon_button,48);
}
if(LABEL.compare("")!=0){item_prog_label->value(LABEL.c_str());}} {}
  }
  Function {program_check()} {open
  } {
    code {if(!checkFlBrowserItem(menuElement)){return;}
int LINEposition = menuElement->value();
const char* nombre = menuElement->text(LINEposition);
std::string NAME=nombre;
if(NAME.compare("Program")!=0){
  prog_button->hide();
  prog_input->hide();
}
else{
  std::string TEXT = menuElementText->text(LINEposition);
  //prog_input->value(TEXT.c_str());
  //how do I do that??
}} {}
  }
  Function {remove_an_item()} {open
  } {
    code {std::cout<<"Remove"<<std::endl;} {}
  }
  Function {remove_a_menu()} {open
  } {
    code {if(!checkFlBrowserItem(root_menu)){return;}
int line = root_menu->value();
const char* value = root_menu->text(line);
removeMenu(value);
getMenus(root_menu);
menuElement->clear();
menuElementText->clear();} {}
  }
  Function {save_cb()} {open return_type int
  } {
    code {//save
const char* label = add_label->value();
if(label ==NULL){return 42;}
const char* icon = add_icon->value();
if(icon ==NULL){return 42;}
const char* input = add_input->value();
if(input ==NULL){return 42;}
const char* result = item_display->value();
if(result ==NULL){return 42;}
std::cout<<"everything exists??"<<std::endl;
return addMenuItem(menuElement, menuElementText, add_label, add_icon, add_input, add_button, result);} {}
  }
  Function {select_sent_in(std::string thatMenu)} {open
  } {
    code {if(thatMenu.compare("")==0)return;
choose_menu(thatMenu);
int tot=root_menu->size();
if(tot>0){
  for (int i=0;i!=tot;i++){
    const char* txt=root_menu->text(i);
    if((txt!=NULL)&&(thatMenu.compare(txt)==0)){root_menu->select(i);}
  }
}} {}
  }
} 
