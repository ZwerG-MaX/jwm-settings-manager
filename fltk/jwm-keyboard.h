/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef jwm_keyboard_h
#define jwm_keyboard_h
#include <FL/Fl.H>
#include <libintl.h>
#include <FL/Fl_File_Chooser.H>
#include <string>
#include <stdlib.h>
#include <iostream>
#include "../include/jwmrc.h"
#include "../include/ui.h"
#include "../include/keyboard.hpp"
#include "../data/icons/jsm-keyboard.xpm"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Output.H>

class KeyboardUI {
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *keyboard_window;
  Fl_Browser *key_browser;
private:
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Double_Window* grabber_window();
  Fl_Double_Window *grab_win;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
  static unsigned char menu_Action_i18n_done;
  static Fl_Menu_Item menu_Action[];
public:
  static Fl_Menu_Item *next;
private:
  inline void cb_next_i(Fl_Menu_*, void*);
  static void cb_next(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *nextstacked;
private:
  inline void cb_nextstacked_i(Fl_Menu_*, void*);
  static void cb_nextstacked(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *prev;
private:
  inline void cb_prev_i(Fl_Menu_*, void*);
  static void cb_prev(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *prevstacked;
private:
  inline void cb_prevstacked_i(Fl_Menu_*, void*);
  static void cb_prevstacked(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *close;
private:
  inline void cb_close_i(Fl_Menu_*, void*);
  static void cb_close(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *fullscreen;
private:
  inline void cb_fullscreen_i(Fl_Menu_*, void*);
  static void cb_fullscreen(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *minimize;
private:
  inline void cb_minimize_i(Fl_Menu_*, void*);
  static void cb_minimize(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maximize;
private:
  inline void cb_maximize_i(Fl_Menu_*, void*);
  static void cb_maximize(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *shade;
private:
  inline void cb_shade_i(Fl_Menu_*, void*);
  static void cb_shade(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *move;
private:
  inline void cb_move_i(Fl_Menu_*, void*);
  static void cb_move(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *resize;
private:
  inline void cb_resize_i(Fl_Menu_*, void*);
  static void cb_resize(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *window;
private:
  inline void cb_window_i(Fl_Menu_*, void*);
  static void cb_window(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_apps;
private:
  inline void cb_root_menu_apps_i(Fl_Menu_*, void*);
  static void cb_root_menu_apps(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_places;
private:
  inline void cb_root_menu_places_i(Fl_Menu_*, void*);
  static void cb_root_menu_places(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_shutdown;
private:
  inline void cb_root_menu_shutdown_i(Fl_Menu_*, void*);
  static void cb_root_menu_shutdown(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *rdesktop;
private:
  inline void cb_rdesktop_i(Fl_Menu_*, void*);
  static void cb_rdesktop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ldesktop;
private:
  inline void cb_ldesktop_i(Fl_Menu_*, void*);
  static void cb_ldesktop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *udesktop;
private:
  inline void cb_udesktop_i(Fl_Menu_*, void*);
  static void cb_udesktop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ddesktop;
private:
  inline void cb_ddesktop_i(Fl_Menu_*, void*);
  static void cb_ddesktop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *restart;
private:
  inline void cb_restart_i(Fl_Menu_*, void*);
  static void cb_restart(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *exit;
private:
  inline void cb_exit_i(Fl_Menu_*, void*);
  static void cb_exit(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *showtray;
private:
  inline void cb_showtray_i(Fl_Menu_*, void*);
  static void cb_showtray(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxtop;
private:
  inline void cb_maxtop_i(Fl_Menu_*, void*);
  static void cb_maxtop(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxbottom;
private:
  inline void cb_maxbottom_i(Fl_Menu_*, void*);
  static void cb_maxbottom(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxleft;
private:
  inline void cb_maxleft_i(Fl_Menu_*, void*);
  static void cb_maxleft(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxright;
private:
  inline void cb_maxright_i(Fl_Menu_*, void*);
  static void cb_maxright(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxv;
private:
  inline void cb_maxv_i(Fl_Menu_*, void*);
  static void cb_maxv(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxh;
private:
  inline void cb_maxh_i(Fl_Menu_*, void*);
  static void cb_maxh(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendu;
private:
  inline void cb_sendu_i(Fl_Menu_*, void*);
  static void cb_sendu(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendd;
private:
  inline void cb_sendd_i(Fl_Menu_*, void*);
  static void cb_sendd(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendr;
private:
  inline void cb_sendr_i(Fl_Menu_*, void*);
  static void cb_sendr(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendl;
private:
  inline void cb_sendl_i(Fl_Menu_*, void*);
  static void cb_sendl(Fl_Menu_*, void*);
  inline void cb_Choose_i(Fl_Button*, void*);
  static void cb_Choose(Fl_Button*, void*);
public:
  Fl_Input *action_name;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
public:
  Fl_Output *mod_output;
  Fl_Output *modder_output;
private:
  inline void cb_GRAB_i(Fl_Button*, void*);
  static void cb_GRAB(Fl_Button*, void*);
public:
  Fl_Output *modder3_output;
  Fl_Output *key;
  static unsigned char menu_Special_i18n_done;
  static Fl_Menu_Item menu_Special[];
private:
  inline void cb_XF86Tools_i(Fl_Menu_*, void*);
  static void cb_XF86Tools(Fl_Menu_*, void*);
  inline void cb_XF86Search_i(Fl_Menu_*, void*);
  static void cb_XF86Search(Fl_Menu_*, void*);
  inline void cb_XF86LaunchA_i(Fl_Menu_*, void*);
  static void cb_XF86LaunchA(Fl_Menu_*, void*);
  inline void cb_XF86Explorer_i(Fl_Menu_*, void*);
  static void cb_XF86Explorer(Fl_Menu_*, void*);
  inline void cb_XF86Display_i(Fl_Menu_*, void*);
  static void cb_XF86Display(Fl_Menu_*, void*);
  inline void cb_XF86PowerOff_i(Fl_Menu_*, void*);
  static void cb_XF86PowerOff(Fl_Menu_*, void*);
  inline void cb_XF86AudioMute_i(Fl_Menu_*, void*);
  static void cb_XF86AudioMute(Fl_Menu_*, void*);
  inline void cb_XF86AudioRaiseVolume_i(Fl_Menu_*, void*);
  static void cb_XF86AudioRaiseVolume(Fl_Menu_*, void*);
  inline void cb_XF86AudioLowerVolume_i(Fl_Menu_*, void*);
  static void cb_XF86AudioLowerVolume(Fl_Menu_*, void*);
  inline void cb_XF86MonBrightnessDown_i(Fl_Menu_*, void*);
  static void cb_XF86MonBrightnessDown(Fl_Menu_*, void*);
  inline void cb_XF86MonBrightnessUp_i(Fl_Menu_*, void*);
  static void cb_XF86MonBrightnessUp(Fl_Menu_*, void*);
  inline void cb_XF86Calculator_i(Fl_Menu_*, void*);
  static void cb_XF86Calculator(Fl_Menu_*, void*);
  inline void cb_XF86AudioMicMute_i(Fl_Menu_*, void*);
  static void cb_XF86AudioMicMute(Fl_Menu_*, void*);
  inline void cb_XF86HomePage_i(Fl_Menu_*, void*);
  static void cb_XF86HomePage(Fl_Menu_*, void*);
  inline void cb_XF86MyComputer_i(Fl_Menu_*, void*);
  static void cb_XF86MyComputer(Fl_Menu_*, void*);
  inline void cb_XF86WWW_i(Fl_Menu_*, void*);
  static void cb_XF86WWW(Fl_Menu_*, void*);
public:
  Fl_Double_Window* config_key_win();
  Fl_Double_Window *conf_key_win;
private:
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
  static unsigned char menu_Action1_i18n_done;
  static Fl_Menu_Item menu_Action1[];
public:
  static Fl_Menu_Item *next1;
private:
  inline void cb_next1_i(Fl_Menu_*, void*);
  static void cb_next1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *nextstacked1;
private:
  inline void cb_nextstacked1_i(Fl_Menu_*, void*);
  static void cb_nextstacked1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *prev1;
private:
  inline void cb_prev1_i(Fl_Menu_*, void*);
  static void cb_prev1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *prevstacked1;
private:
  inline void cb_prevstacked1_i(Fl_Menu_*, void*);
  static void cb_prevstacked1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *close1;
private:
  inline void cb_close1_i(Fl_Menu_*, void*);
  static void cb_close1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *fullscreen1;
private:
  inline void cb_fullscreen1_i(Fl_Menu_*, void*);
  static void cb_fullscreen1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *minimize1;
private:
  inline void cb_minimize1_i(Fl_Menu_*, void*);
  static void cb_minimize1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maximize1;
private:
  inline void cb_maximize1_i(Fl_Menu_*, void*);
  static void cb_maximize1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *shade1;
private:
  inline void cb_shade1_i(Fl_Menu_*, void*);
  static void cb_shade1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *move1;
private:
  inline void cb_move1_i(Fl_Menu_*, void*);
  static void cb_move1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *resize1;
private:
  inline void cb_resize1_i(Fl_Menu_*, void*);
  static void cb_resize1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *window1;
private:
  inline void cb_window1_i(Fl_Menu_*, void*);
  static void cb_window1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_apps1;
private:
  inline void cb_root_menu_apps1_i(Fl_Menu_*, void*);
  static void cb_root_menu_apps1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_places1;
private:
  inline void cb_root_menu_places1_i(Fl_Menu_*, void*);
  static void cb_root_menu_places1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *root_menu_shutdown1;
private:
  inline void cb_root_menu_shutdown1_i(Fl_Menu_*, void*);
  static void cb_root_menu_shutdown1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *rdesktop1;
private:
  inline void cb_rdesktop1_i(Fl_Menu_*, void*);
  static void cb_rdesktop1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ldesktop1;
private:
  inline void cb_ldesktop1_i(Fl_Menu_*, void*);
  static void cb_ldesktop1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *udesktop1;
private:
  inline void cb_udesktop1_i(Fl_Menu_*, void*);
  static void cb_udesktop1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *ddesktop1;
private:
  inline void cb_ddesktop1_i(Fl_Menu_*, void*);
  static void cb_ddesktop1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *restart1;
private:
  inline void cb_restart1_i(Fl_Menu_*, void*);
  static void cb_restart1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *exit1;
private:
  inline void cb_exit1_i(Fl_Menu_*, void*);
  static void cb_exit1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *showtray1;
private:
  inline void cb_showtray1_i(Fl_Menu_*, void*);
  static void cb_showtray1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxtop1;
private:
  inline void cb_maxtop1_i(Fl_Menu_*, void*);
  static void cb_maxtop1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxbottom1;
private:
  inline void cb_maxbottom1_i(Fl_Menu_*, void*);
  static void cb_maxbottom1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxleft1;
private:
  inline void cb_maxleft1_i(Fl_Menu_*, void*);
  static void cb_maxleft1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxright1;
private:
  inline void cb_maxright1_i(Fl_Menu_*, void*);
  static void cb_maxright1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxv1;
private:
  inline void cb_maxv1_i(Fl_Menu_*, void*);
  static void cb_maxv1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *maxh1;
private:
  inline void cb_maxh1_i(Fl_Menu_*, void*);
  static void cb_maxh1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendu1;
private:
  inline void cb_sendu1_i(Fl_Menu_*, void*);
  static void cb_sendu1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendd1;
private:
  inline void cb_sendd1_i(Fl_Menu_*, void*);
  static void cb_sendd1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendr1;
private:
  inline void cb_sendr1_i(Fl_Menu_*, void*);
  static void cb_sendr1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *sendl1;
private:
  inline void cb_sendl1_i(Fl_Menu_*, void*);
  static void cb_sendl1(Fl_Menu_*, void*);
  inline void cb_Choose1_i(Fl_Button*, void*);
  static void cb_Choose1(Fl_Button*, void*);
public:
  Fl_Input *action_name1;
private:
  inline void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
public:
  Fl_Output *mod1_output;
  Fl_Output *mod2_output;
  Fl_Output *mod3_output;
  Fl_Output *current_mod1;
private:
  inline void cb_GRAB1_i(Fl_Button*, void*);
  static void cb_GRAB1(Fl_Button*, void*);
public:
  Fl_Output *keyshortcut;
  Fl_Output *current_key;
  Fl_Output *current_mod2;
  Fl_Output *current_mod3;
  Fl_Output *old_action;
  static unsigned char menu_Special1_i18n_done;
  static Fl_Menu_Item menu_Special1[];
private:
  inline void cb_XF86Tools1_i(Fl_Menu_*, void*);
  static void cb_XF86Tools1(Fl_Menu_*, void*);
  inline void cb_XF86Search1_i(Fl_Menu_*, void*);
  static void cb_XF86Search1(Fl_Menu_*, void*);
  inline void cb_XF86LaunchA1_i(Fl_Menu_*, void*);
  static void cb_XF86LaunchA1(Fl_Menu_*, void*);
  inline void cb_XF86Explorer1_i(Fl_Menu_*, void*);
  static void cb_XF86Explorer1(Fl_Menu_*, void*);
  inline void cb_XF86Display1_i(Fl_Menu_*, void*);
  static void cb_XF86Display1(Fl_Menu_*, void*);
  inline void cb_XF86PowerOff1_i(Fl_Menu_*, void*);
  static void cb_XF86PowerOff1(Fl_Menu_*, void*);
  inline void cb_XF86AudioMute1_i(Fl_Menu_*, void*);
  static void cb_XF86AudioMute1(Fl_Menu_*, void*);
  inline void cb_XF86AudioRaiseVolume1_i(Fl_Menu_*, void*);
  static void cb_XF86AudioRaiseVolume1(Fl_Menu_*, void*);
  inline void cb_XF86AudioLowerVolume1_i(Fl_Menu_*, void*);
  static void cb_XF86AudioLowerVolume1(Fl_Menu_*, void*);
  inline void cb_XF86MonBrightnessDown1_i(Fl_Menu_*, void*);
  static void cb_XF86MonBrightnessDown1(Fl_Menu_*, void*);
  inline void cb_XF86MonBrightnessUp1_i(Fl_Menu_*, void*);
  static void cb_XF86MonBrightnessUp1(Fl_Menu_*, void*);
  inline void cb_XF86Calculator1_i(Fl_Menu_*, void*);
  static void cb_XF86Calculator1(Fl_Menu_*, void*);
  inline void cb_XF86AudioMicMute1_i(Fl_Menu_*, void*);
  static void cb_XF86AudioMicMute1(Fl_Menu_*, void*);
  inline void cb_XF86HomePage1_i(Fl_Menu_*, void*);
  static void cb_XF86HomePage1(Fl_Menu_*, void*);
  inline void cb_XF86MyComputer1_i(Fl_Menu_*, void*);
  static void cb_XF86MyComputer1(Fl_Menu_*, void*);
  inline void cb_XF86WWW1_i(Fl_Menu_*, void*);
  static void cb_XF86WWW1(Fl_Menu_*, void*);
public:
  void menu_cb(const char* action);
  void key_wait(Fl_Output* mod1,Fl_Output* mod2,Fl_Output* mod3,Fl_Output* KEY);
  void special_cb(const char* item, Fl_Output *o);
};
int handle(int e);
#endif
