# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/flDesktop.h"} {public global
} 

decl {\#include <FL/Fl_PNG_Image.H>} {public global
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
} 

decl {\#include <algorithm>} {public global
} 

decl {//\#include <FL/Fl_Image.H>} {public global
} 

decl {\#include <FL/Fl_JPEG_Image.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {//\#include <cairo-xlib.h>} {public global
} 

decl {//\#include <cairo.h>} {public global
} 

decl {//\#include <cairo-svg.h>} {public global
} 

decl {\#include "../data/icons/jsm-desktop.xpm"} {public global
} 

class DesktopUI {open : {public Config}
} {
  Function {make_window()} {open
  } {
    code {load();
saveChangesTemp();} {}
    Fl_Window desktop_window {
      label {Desktop Settings} open
      xywh {248 277 395 490} type Double color 31 resizable
      code0 {startup(o);} xclass {jsm-desktop} visible
    } {
      Fl_Scroll {} {open
        xywh {0 0 395 490} color 31
      } {
        Fl_Box background_displayer_thingie {
          xywh {25 65 345 270} box FLAT_BOX color 37 when 6
          code0 {background(o);}
        }
        Fl_Box color_display1 {
          xywh {25 65 345 270} box FLAT_BOX color 37 when 6
          code0 {background1(o);}
        }
        Fl_Box color_display2 {
          xywh {25 195 345 140} box FLAT_BOX color 37 when 6
          code0 {background2(o);}
        }
        Fl_Button {} {
          label {Choose Image}
          callback {bg_chooser_cb();}
          xywh {20 345 110 25} box FLAT_BOX color 23
        }
        Fl_Button {} {
          label {Choose Color}
          callback {one_color();}
          tooltip {This will take icons off the desktop} xywh {140 345 110 25} box FLAT_BOX color 23
        }
        Fl_Button {} {
          label {Choose Gradient}
          callback {two_color();}
          tooltip {This will take icons off the desktop} xywh {260 345 125 25} box FLAT_BOX color 23
        }
        Fl_Check_Button icons_check {
          label {Icons on Desktop}
          callback {use_icons_on_desktop();}
          xywh {15 380 150 25} box FLAT_BOX down_box GTK_DOWN_BOX color 31 selection_color 59 align 24 when 1
          code0 {icons_on_desktop();}
        }
        Fl_Output current_bg {
          label {Current Background}
          xywh {25 30 345 30} box FLAT_BOX color 50 selection_color 72 labelfont 1 align 33
          code0 {bg_name(o);}
        }
        Fl_Check_Button {} {
          label {Multiple Desktops}
          callback {useMultipleDesktops();}
          tooltip {This allows you to have multiple screens to work on from one Display} xywh {15 405 155 25} box FLAT_BOX down_box GTK_DOWN_BOX color 31 selection_color 59 align 24 when 1
          code1 {bool m = multipleDesktops();}
          code2 {if(m){o->value(1);}}
          code3 {else{o->value(0);}}
        }
        Fl_Value_Input num_desktop_w {
          label {Number of Desktops Wide}
          callback {int width = int((o->value()));
num_desktop_wh_cb("width",width);}
          xywh {175 380 20 25} box FLAT_BOX color 53 align 8
          code0 {int width = getIntAttribute("Desktops","width");}
          code1 {o->value(width);}
        }
        Fl_Value_Input num_desktop_h {
          label {Number of Desktops High }
          callback {int height = int((o->value()));
num_desktop_wh_cb("height",height);}
          xywh {175 410 20 25} box FLAT_BOX color 53 align 8
          code0 {int height = getIntAttribute("Desktops","height");}
          code1 {o->value(height);}
        }
        Fl_Button {} {
          label Cancel
          callback {cancel();
desktop_window->hide();
UI ux;
ux.showSettings();}
          xywh {140 450 65 25} box FLAT_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {saveJWMRC();
desktop_window->hide();
UI ux;
ux.showSettings();}
          tooltip {Write to configuration file} xywh {215 450 45 25} box FLAT_BOX color 61 selection_color 59 labelcolor 55
        }
      }
    }
  }
  Function {background(Fl_Box*o)} {open
  } {
    code {flDesktop desktop;
std::string bg = desktop.getBackground();
std::string colorTester = bg.substr(0,1);
if (colorTester.compare("/")==0){
  desktop.setFlImage(o,bg.c_str());
}
else{background_displayer_thingie->hide();}} {selected
    }
  }
  Function {background1(Fl_Box*o)} {open
  } {
    code {flDesktop desktop;
std::string bg = desktop.getBackground();
if(bg.length()<=4){return;}
std::string colorTester = bg.substr(0,1);
if (colorTester.compare("/")==0){
  o->hide();
  return;
}
else if (colorTester.compare("\#")==0){
  colorTester = bg.substr(1,6);
  //std::cout<<colorTester<<std::endl;
  unsigned int ColorGradient;
  unsigned int colorSet = desktop.getBackground(ColorGradient);
  o->color(colorSet);
}
else{return;}} {}
  }
  Function {background2(Fl_Box*o)} {open
  } {
    code {flDesktop desktop;
std::string bg = desktop.getBackground();
if(bg.length()<=4){
  o->hide();
  return;
}
std::string colorTester = bg.substr(0,1);
if (colorTester.compare("/")==0){
  o->hide();
  return;
}
else if (colorTester.compare("\#")==0){
  unsigned int ColorGradient;
  unsigned int colorSet = desktop.getBackground(ColorGradient);
  unsigned int found = bg.find(':');
  if (bg.length()>7){
    if ((found >= bg.length())||(found <= bg.length())){
        o->hide();
    }
    std::string color2 = bg.substr(found+1,std::string::npos);
    o->show();
    o->color(ColorGradient);
    o->redraw();
  }
  else{o->hide();}
}
else{
  o->hide();
  return;
}} {}
  }
  Function {bg_chooser_cb()} {open
  } {
    code {flDesktop desktop;
std::string background = getenv("HOME");
background +="/Pictures/";
const char * bg = background.c_str();//this is ~/Pictures
const char * m="Choose a Background";
const char *p="*.{jpg,JPG,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,bg,r);
if(result!=NULL){
	//Is it a png or JPG?
	std::string extention, resultStr;
	resultStr = result;
	if(resultStr.length()<=4){return;}
	extention = resultStr.substr((strlen(result)-4),4);
	std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
	if ((extention.compare(".png")==0) ||
	    (extention.compare(".jpg")==0) ||
	    (extention.compare(".jpeg")==0) ||
	    (extention.compare(".svg")==0)){
		current_bg->value(result);
		const char* type="image";
		desktop.setBackground(type,result);
		color_display1->hide();
		color_display2->hide();
		desktop.setFlImage(background_displayer_thingie,result);
	}
	else{
	  return;
	}
}} {}
  }
  Function {bg_name(Fl_Output *o)} {open
  } {
    code {flDesktop desktop;
std::string bg = desktop.getBackground();
if(!bg.length()>1){
  o->value("");
  return;
}
std::string colorTester = bg.substr(0,1);
if (colorTester.compare("/")==0){
  o->value(bg.c_str());
}
else if (bg.compare("")==0){
  o->value("");
  return;
}
else if (colorTester.compare("\#")==0){
  unsigned int ColorGradient;
  unsigned int colorSet = desktop.getBackground(ColorGradient);
  if (bg.length()>6){
    o->value("Color Gradient");
  }
  else{o->value("Color");}

}
else{
  o->value("");
  return;
}} {}
  }
  Function {icons_on_desktop()} {open
  } {
    code {flDesktop desktop;
//1 is on 0 is off
std::string fm = desktop.whichFileManagerRunning();
if(fm.compare("unkown")!=0 ){icons_check->value(1);}
else{icons_check->value(0);}} {}
  }
  Function {multipleDesktops()} {open return_type bool
  } {
    code {int width = getIntAttribute("Desktops","width");
int height = getIntAttribute("Desktops","height");
// zero for false and non-zero for true.
if (height==1 && width ==1){return false;}
else if (!height || !width){return false;}
return true;} {}
  }
  Function {num_desktop_wh_cb(const char* whichone, int value)} {open
  } {
    code {setAttribute("Desktops",whichone,value);
int w = int((num_desktop_w->value()));
int h = int((num_desktop_h->value()));
int defaultValue = 1;
if(w==0){setAttribute("Desktops","width",defaultValue);}
if(h==0){setAttribute("Desktops","height",defaultValue);}} {}
  }
  Function {one_color()} {open
  } {
    code {flDesktop desktop;
uchar r;
uchar g;
uchar b;

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;
if(c!=0){ //If color chooser isn't canceled... do stuff
  desktop.setBackground(colors);
  unsigned int unusedColor;
  unsigned int colorSet = desktop.getBackground(unusedColor);
  color_display1->color(colorSet);
  color_display1->show();
  color_display2->hide();
  background_displayer_thingie->hide();
}
current_bg->value("Color");} {}
  }
  Function {two_color()} {open
  } {
    code {flDesktop desktop;
uchar r;
uchar g;
uchar b;
int c;
const char * label ="Choose 1st Color";
c= fl_color_chooser(label,r,g,b,2);
double* gradient1 = new double[4];
gradient1[0] = int(r); 
gradient1[1] = int(g);
gradient1[2] = int(b);
gradient1[3] = 0;
if(c!=0){ //If color chooser isn't canceled... do stuff
	uchar r2;
	uchar g2;
	uchar b2;
	int c2;
	const char * label2 ="Choose 2nd Color";
	c2= fl_color_chooser(label2,r2,g2,b2,2);
	double* gradient2 = new double[4];
	gradient2[0] = int(r2); 
	gradient2[1] = int(g2);
	gradient2[2] = int(b2);
	gradient2[3] = 0;
	if(c2!=0){ //If color chooser isn't canceled... do stuff
		desktop.setBackground(gradient1,gradient2);
		unsigned int color2;
		unsigned int color1 = desktop.getBackground(color2);
		color_display1->color(color1);
		color_display2->color(color2);
		color_display1->show();
		color_display2->show();
		background_displayer_thingie->hide();
		color_display1->redraw();
		color_display2->redraw();
	}
}
current_bg->value("Color Gradient");} {}
  }
  Function {use_icons_on_desktop()} {open
  } {
    code {flDesktop desktop;
desktop.setIconsOnDesktop();
background(background_displayer_thingie);} {}
  }
  Function {useMultipleDesktops()} {open
  } {
    code {if(!multipleDesktops()){
int width = int((num_desktop_w->value()));
int height = int((num_desktop_h->value()));
if (width == 1 && height ==1 ){width =2;}
setAttribute("Desktops","width",width);
setAttribute("Desktops","height",height);
}} {}
  }
  Function {startup(Fl_Window *o)} {open
  } {
    code {Config config; config.under_mouse(o);
o->icon(config.Get_Fl_Icon(jsm_desktop_xpm));} {}
  }
} 
