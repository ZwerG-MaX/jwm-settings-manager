/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef jwm_fonts_h
#define jwm_fonts_h
#include <FL/Fl.H>
#include <libintl.h>
#include <FL/Fl_File_Chooser.H>
#include <string>
#include <stdlib.h>
#include <iostream>
#include <FL/Fl_Color_Chooser.H>
#include "../include/jwmrc.h"
#include "../include/ui.h"
#include "../include/fonts.hpp"
#include "../data/icons/jsm-fonts.xpm"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Input.H>

class FontUI : public JSM_Fonts {
  std::string currentElement; 
  Fl_Output* Widget; 
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *font_window;
  Fl_Box *window_box;
  Fl_Output *window_font;
  Fl_Button *active_window_font_color_button;
private:
  inline void cb_active_window_font_color_button_i(Fl_Button*, void*);
  static void cb_active_window_font_color_button(Fl_Button*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Button *window_font_color_button;
private:
  inline void cb_window_font_color_button_i(Fl_Button*, void*);
  static void cb_window_font_color_button(Fl_Button*, void*);
public:
  Fl_Box *menu_box;
  Fl_Output *menu_font;
private:
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Button *menu_font_color_button;
private:
  inline void cb_menu_font_color_button_i(Fl_Button*, void*);
  static void cb_menu_font_color_button(Fl_Button*, void*);
public:
  Fl_Output *panel_button_font;
private:
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Button *traybutton_font_color_button;
private:
  inline void cb_traybutton_font_color_button_i(Fl_Button*, void*);
  static void cb_traybutton_font_color_button(Fl_Button*, void*);
public:
  Fl_Box *panel_box;
  Fl_Output *panel_font;
private:
  inline void cb_3_i(Fl_Button*, void*);
  static void cb_3(Fl_Button*, void*);
public:
  Fl_Button *panel_font_color_button;
private:
  inline void cb_panel_font_color_button_i(Fl_Button*, void*);
  static void cb_panel_font_color_button(Fl_Button*, void*);
public:
  Fl_Button *task_font_color_button;
private:
  inline void cb_task_font_color_button_i(Fl_Button*, void*);
  static void cb_task_font_color_button(Fl_Button*, void*);
public:
  Fl_Output *task_font;
private:
  inline void cb_4_i(Fl_Button*, void*);
  static void cb_4(Fl_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Output *window_gtk_font;
private:
  inline void cb_5_i(Fl_Button*, void*);
  static void cb_5(Fl_Button*, void*);
public:
  Fl_Double_Window* font_chooser_window();
  Fl_Double_Window *font_choosing;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
public:
  Fl_Browser *font_browser;
private:
  inline void cb_font_browser_i(Fl_Browser*, void*);
  static void cb_font_browser(Fl_Browser*, void*);
public:
  Fl_Output *font_name;
private:
  inline void cb_font_name_i(Fl_Output*, void*);
  static void cb_font_name(Fl_Output*, void*);
public:
  Fl_Slider *font_size_slider;
private:
  inline void cb_font_size_slider_i(Fl_Slider*, void*);
  static void cb_font_size_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *chooser_size;
  Fl_Check_Button *hint_check;
private:
  inline void cb_hint_check_i(Fl_Check_Button*, void*);
  static void cb_hint_check(Fl_Check_Button*, void*);
  inline void cb_Antialiasing_i(Fl_Check_Button*, void*);
  static void cb_Antialiasing(Fl_Check_Button*, void*);
  static unsigned char menu_RGBA_i18n_done;
  static Fl_Menu_Item menu_RGBA[];
  inline void cb_rgb_i(Fl_Menu_*, void*);
  static void cb_rgb(Fl_Menu_*, void*);
  inline void cb_bgr_i(Fl_Menu_*, void*);
  static void cb_bgr(Fl_Menu_*, void*);
  inline void cb_vrgb_i(Fl_Menu_*, void*);
  static void cb_vrgb(Fl_Menu_*, void*);
  inline void cb_vbgr_i(Fl_Menu_*, void*);
  static void cb_vbgr(Fl_Menu_*, void*);
  inline void cb_none_i(Fl_Menu_*, void*);
  static void cb_none(Fl_Menu_*, void*);
  static unsigned char menu_Weight_i18n_done;
  static Fl_Menu_Item menu_Weight[];
  inline void cb_Light_i(Fl_Menu_*, void*);
  static void cb_Light(Fl_Menu_*, void*);
  inline void cb_Medium_i(Fl_Menu_*, void*);
  static void cb_Medium(Fl_Menu_*, void*);
  inline void cb_Demibold_i(Fl_Menu_*, void*);
  static void cb_Demibold(Fl_Menu_*, void*);
  inline void cb_Black_i(Fl_Menu_*, void*);
  static void cb_Black(Fl_Menu_*, void*);
  static unsigned char menu_Width_i18n_done;
  static Fl_Menu_Item menu_Width[];
  inline void cb_Extra_i(Fl_Menu_*, void*);
  static void cb_Extra(Fl_Menu_*, void*);
  inline void cb_Ultra_i(Fl_Menu_*, void*);
  static void cb_Ultra(Fl_Menu_*, void*);
  inline void cb_Semi_i(Fl_Menu_*, void*);
  static void cb_Semi(Fl_Menu_*, void*);
  inline void cb_Condensed_i(Fl_Menu_*, void*);
  static void cb_Condensed(Fl_Menu_*, void*);
  inline void cb_Normal_i(Fl_Menu_*, void*);
  static void cb_Normal(Fl_Menu_*, void*);
  inline void cb_Semi1_i(Fl_Menu_*, void*);
  static void cb_Semi1(Fl_Menu_*, void*);
  inline void cb_Expanded_i(Fl_Menu_*, void*);
  static void cb_Expanded(Fl_Menu_*, void*);
  inline void cb_Extra1_i(Fl_Menu_*, void*);
  static void cb_Extra1(Fl_Menu_*, void*);
  inline void cb_Ultra1_i(Fl_Menu_*, void*);
  static void cb_Ultra1(Fl_Menu_*, void*);
  static unsigned char menu_LCD_i18n_done;
  static Fl_Menu_Item menu_LCD[];
  inline void cb_None_i(Fl_Menu_*, void*);
  static void cb_None(Fl_Menu_*, void*);
  inline void cb_Default_i(Fl_Menu_*, void*);
  static void cb_Default(Fl_Menu_*, void*);
  inline void cb_Light1_i(Fl_Menu_*, void*);
  static void cb_Light1(Fl_Menu_*, void*);
  inline void cb_Legacy_i(Fl_Menu_*, void*);
  static void cb_Legacy(Fl_Menu_*, void*);
  static unsigned char menu_Hint_i18n_done;
  static Fl_Menu_Item menu_Hint[];
  inline void cb_None1_i(Fl_Menu_*, void*);
  static void cb_None1(Fl_Menu_*, void*);
  inline void cb_Light2_i(Fl_Menu_*, void*);
  static void cb_Light2(Fl_Menu_*, void*);
  inline void cb_Medium1_i(Fl_Menu_*, void*);
  static void cb_Medium1(Fl_Menu_*, void*);
  inline void cb_Full_i(Fl_Menu_*, void*);
  static void cb_Full(Fl_Menu_*, void*);
public:
  Fl_Output *rgba_out;
  Fl_Output *weight_out;
  Fl_Output *width_out;
  Fl_Output *lcd_out;
  Fl_Output *hint_out;
private:
  inline void cb_Encoding_i(Fl_Input*, void*);
  static void cb_Encoding(Fl_Input*, void*);
public:
  Fl_Double_Window* gtk_font_chooser_window();
  Fl_Double_Window *gtk_font_choosing;
private:
  inline void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
public:
  Fl_Browser *gtk_font_browser;
private:
  inline void cb_gtk_font_browser_i(Fl_Browser*, void*);
  static void cb_gtk_font_browser(Fl_Browser*, void*);
public:
  Fl_Output *gtk_font_name;
private:
  inline void cb_gtk_font_name_i(Fl_Output*, void*);
  static void cb_gtk_font_name(Fl_Output*, void*);
public:
  Fl_Slider *gtk_font_size_slider;
private:
  inline void cb_gtk_font_size_slider_i(Fl_Slider*, void*);
  static void cb_gtk_font_size_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *gtk_chooser_size;
  void hinting(int val);
};
#endif
