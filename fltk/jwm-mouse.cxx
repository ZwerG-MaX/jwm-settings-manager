/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-mouse.h"
//Many thanks to flSynclient (c) 2006 Matteo Lucarelli <matteo@matteolucarelli.net>

void MouseUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
mouse_window->hide();
UI ux;
ux.showSettings();
}
void MouseUI::cb_Cancel(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void MouseUI::cb_OK_i(Fl_Button*, void*) {
  saveChanges();
add_to_profile();
mouse_window->hide();
UI ux;
ux.showSettings();
}
void MouseUI::cb_OK(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void MouseUI::cb_TouchpadOff_i(Fl_Choice* o, void*) {
  synclient("TouchpadOff",o->value());
}
void MouseUI::cb_TouchpadOff(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TouchpadOff_i(o,v);
}

unsigned char MouseUI::menu_TouchpadOff_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_TouchpadOff[] = {
 {"ON", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Off", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Tap Off", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_FingerLowHigh_i(Fl_Value_Slider* o, void*) {
  synclient("FingerLow",o->value());
synclient("FingerHigh",o->value());
}
void MouseUI::cb_FingerLowHigh(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_FingerLowHigh_i(o,v);
}

void MouseUI::cb_EmulateMidButtonTime_i(Fl_Value_Slider* o, void*) {
  synclient("EmulateMidButtonTime",o->value());
}
void MouseUI::cb_EmulateMidButtonTime(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EmulateMidButtonTime_i(o,v);
}

void MouseUI::cb_ClickTime_i(Fl_Value_Slider* o, void*) {
  synclient("ClickTime",o->value());
}
void MouseUI::cb_ClickTime(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ClickTime_i(o,v);
}

void MouseUI::cb_GuestMouseOff_i(Fl_Check_Button* o, void*) {
  synclient("GuestMouseOff",o->value());
}
void MouseUI::cb_GuestMouseOff(Fl_Check_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_GuestMouseOff_i(o,v);
}

void MouseUI::cb_CircularPad_i(Fl_Check_Button* o, void*) {
  synclient("CircularPad",o->value());
}
void MouseUI::cb_CircularPad(Fl_Check_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CircularPad_i(o,v);
}

void MouseUI::cb_TapButton1_i(Fl_Choice* o, void*) {
  synclient("TapButton1",o->value());
}
void MouseUI::cb_TapButton1(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TapButton1_i(o,v);
}

unsigned char MouseUI::menu_TapButton1_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_TapButton1[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_TapButton2_i(Fl_Choice* o, void*) {
  synclient("TapButton2",o->value());
}
void MouseUI::cb_TapButton2(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TapButton2_i(o,v);
}

unsigned char MouseUI::menu_TapButton2_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_TapButton2[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_TapButton3_i(Fl_Choice* o, void*) {
  synclient("TapButton3",o->value());
}
void MouseUI::cb_TapButton3(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_TapButton3_i(o,v);
}

unsigned char MouseUI::menu_TapButton3_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_TapButton3[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_LTCornerButton_i(Fl_Choice* o, void*) {
  synclient("LTCornerButton",o->value());
}
void MouseUI::cb_LTCornerButton(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LTCornerButton_i(o,v);
}

unsigned char MouseUI::menu_LTCornerButton_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_LTCornerButton[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_RTCornerButton_i(Fl_Choice* o, void*) {
  synclient("RTCornerButton",o->value());
}
void MouseUI::cb_RTCornerButton(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RTCornerButton_i(o,v);
}

unsigned char MouseUI::menu_RTCornerButton_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_RTCornerButton[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_LBCornerButton_i(Fl_Choice* o, void*) {
  synclient("LBCornerButton",o->value());
}
void MouseUI::cb_LBCornerButton(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LBCornerButton_i(o,v);
}

unsigned char MouseUI::menu_LBCornerButton_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_LBCornerButton[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_RBCornerButton_i(Fl_Choice* o, void*) {
  synclient("RBCornerButton",o->value());
}
void MouseUI::cb_RBCornerButton(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_RBCornerButton_i(o,v);
}

unsigned char MouseUI::menu_RBCornerButton_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_RBCornerButton[] = {
 {"disable", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"left button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"center button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"right button", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"up wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"down wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"left wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"right wheel", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_MaxTapTime_i(Fl_Value_Slider* o, void*) {
  synclient("MaxTapTime",o->value());
}
void MouseUI::cb_MaxTapTime(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxTapTime_i(o,v);
}

void MouseUI::cb_MaxDoubleTapTime_i(Fl_Value_Slider* o, void*) {
  synclient("MaxDoubleTapTime",o->value());
}
void MouseUI::cb_MaxDoubleTapTime(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxDoubleTapTime_i(o,v);
}

void MouseUI::cb_MaxTapMove_i(Fl_Value_Slider* o, void*) {
  synclient("MaxTapMove",o->value());
}
void MouseUI::cb_MaxTapMove(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxTapMove_i(o,v);
}

void MouseUI::cb_UpDownScrolling_i(Fl_Check_Button* o, void*) {
  synclient("UpDownScrolling",o->value());
}
void MouseUI::cb_UpDownScrolling(Fl_Check_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_UpDownScrolling_i(o,v);
}

void MouseUI::cb_LeftRightScrolling_i(Fl_Check_Button* o, void*) {
  synclient("LeftRightScrolling",o->value());
}
void MouseUI::cb_LeftRightScrolling(Fl_Check_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_LeftRightScrolling_i(o,v);
}

void MouseUI::cb_VertScrollDelta_i(Fl_Value_Slider* o, void*) {
  synclient("VertScrollDelta",o->value());
}
void MouseUI::cb_VertScrollDelta(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_VertScrollDelta_i(o,v);
}

void MouseUI::cb_HorizScrollDelta_i(Fl_Value_Slider* o, void*) {
  synclient("HorizScrollDelta",o->value());
}
void MouseUI::cb_HorizScrollDelta(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_HorizScrollDelta_i(o,v);
}

void MouseUI::cb_CircularScrolling_i(Fl_Check_Button* o, void*) {
  synclient("CircularScrolling",o->value());
}
void MouseUI::cb_CircularScrolling(Fl_Check_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CircularScrolling_i(o,v);
}

void MouseUI::cb_CircScrollDelta_i(Fl_Value_Slider* o, void*) {
  synclient("CircScrollDelta",o->value());
}
void MouseUI::cb_CircScrollDelta(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CircScrollDelta_i(o,v);
}

void MouseUI::cb_CircScrollTrigger_i(Fl_Choice* o, void*) {
  synclient("CircScrollTrigger",o->value());
}
void MouseUI::cb_CircScrollTrigger(Fl_Choice* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CircScrollTrigger_i(o,v);
}

unsigned char MouseUI::menu_CircScrollTrigger_i18n_done = 0;
Fl_Menu_Item MouseUI::menu_CircScrollTrigger[] = {
 {"Everywhere", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Top", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Top Right", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Right", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bottom Right", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bottom", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Bottom Left", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Left", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Top Left", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MouseUI::cb_EdgeMotionMinSpeed_i(Fl_Value_Slider* o, void*) {
  synclient("EdgeMotionMinSpeed",o->value());
}
void MouseUI::cb_EdgeMotionMinSpeed(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EdgeMotionMinSpeed_i(o,v);
}

void MouseUI::cb_EdgeMotionMaxSpeed_i(Fl_Value_Slider* o, void*) {
  synclient("EdgeMotionMaxSpeed",o->value());
}
void MouseUI::cb_EdgeMotionMaxSpeed(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EdgeMotionMaxSpeed_i(o,v);
}

void MouseUI::cb_EdgeMotionMinMaxZ_i(Fl_Value_Slider* o, void*) {
  synclient("EdgeMotionMinZ",o->value());
synclient("EdgeMotionMaxZ",o->value()*2);
}
void MouseUI::cb_EdgeMotionMinMaxZ(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_EdgeMotionMinMaxZ_i(o,v);
}

void MouseUI::cb_Calibrate_i(Fl_Button*, void*) {
  CalibrateEdge(0);
}
void MouseUI::cb_Calibrate(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Calibrate_i(o,v);
}

void MouseUI::cb_Calibrate1_i(Fl_Button*, void*) {
  CalibrateEdge(1);
}
void MouseUI::cb_Calibrate1(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Calibrate1_i(o,v);
}

void MouseUI::cb_Calibrate2_i(Fl_Button*, void*) {
  CalibrateEdge(2);
}
void MouseUI::cb_Calibrate2(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Calibrate2_i(o,v);
}

void MouseUI::cb_Calibrate3_i(Fl_Button*, void*) {
  CalibrateEdge(3);
}
void MouseUI::cb_Calibrate3(Fl_Button* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Calibrate3_i(o,v);
}

void MouseUI::cb_MinSpeed_i(Fl_Value_Slider* o, void*) {
  synclient("MinSpeed",o->value());
}
void MouseUI::cb_MinSpeed(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MinSpeed_i(o,v);
}

void MouseUI::cb_MaxSpeed_i(Fl_Value_Slider* o, void*) {
  synclient("MaxSpeed",o->value());
}
void MouseUI::cb_MaxSpeed(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MaxSpeed_i(o,v);
}

void MouseUI::cb_AccelFactor_i(Fl_Value_Slider* o, void*) {
  synclient("AccelFactor",o->value());
}
void MouseUI::cb_AccelFactor(Fl_Value_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_AccelFactor_i(o,v);
}

void MouseUI::cb_double_click_slider_i(Fl_Slider* o, void*) {
  flMouse mouse;
int speed=o->value();
mouse.setDoubleClick(speed);
double_v->value(speed);
saveChangesTemp();
}
void MouseUI::cb_double_click_slider(Fl_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_double_click_slider_i(o,v);
}

void MouseUI::cb_delta_slider_i(Fl_Slider* o, void*) {
  flMouse mouse;
int delta=o->value();
mouse.setDelta(delta);
delta_v->value(delta);
saveChangesTemp();
}
void MouseUI::cb_delta_slider(Fl_Slider* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_delta_slider_i(o,v);
}

void MouseUI::cb_delta_v_i(Fl_Value_Input* o, void*) {
  flMouse mouse;
int delta=o->value();
mouse.setDelta(delta);
delta_slider->value(delta);
saveChangesTemp();
}
void MouseUI::cb_delta_v(Fl_Value_Input* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_delta_v_i(o,v);
}

void MouseUI::cb_double_v_i(Fl_Value_Input* o, void*) {
  flMouse mouse;
int speed=o->value();
mouse.setDoubleClick(speed);
double_click_slider->value(speed);
saveChangesTemp();
}
void MouseUI::cb_double_v(Fl_Value_Input* o, void* v) {
  ((MouseUI*)(o->parent()->parent()->user_data()))->cb_double_v_i(o,v);
}

Fl_Double_Window* MouseUI::make_window() {
  load();
  saveChangesTemp();
  { Fl_Double_Window* o = mouse_window = new Fl_Double_Window(440, 535, gettext("Mouse Settings"));
    mouse_window->color((Fl_Color)31);
    mouse_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 10, 440, 525);
      o->color((Fl_Color)31);
      { Fl_Button* o = new Fl_Button(300, 505, 65, 25, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 505, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      { Fl_Tabs* o = new Fl_Tabs(45, 85, 345, 415);
        o->box(FL_GTK_THIN_UP_BOX);
        { Fl_Group* o = new Fl_Group(55, 115, 320, 365, gettext("TouchPad"));
          { TouchpadOff = new Fl_Choice(230, 150, 65, 20, gettext("Touchpad Mode"));
            TouchpadOff->tooltip(gettext("Toggle the pad ON/OFF or only move (no scroll, tap, ecc.)"));
            TouchpadOff->box(FL_GTK_DOWN_BOX);
            TouchpadOff->down_box(FL_GTK_DOWN_BOX);
            TouchpadOff->color(FL_LIGHT1);
            TouchpadOff->selection_color(FL_LIGHT1);
            TouchpadOff->callback((Fl_Callback*)cb_TouchpadOff);
            if (!menu_TouchpadOff_i18n_done) {
              int i=0;
              for ( ; i<3; i++)
                if (menu_TouchpadOff[i].label())
                  menu_TouchpadOff[i].label(gettext(menu_TouchpadOff[i].label()));
              menu_TouchpadOff_i18n_done = 1;
            }
            TouchpadOff->menu(menu_TouchpadOff);
          } // Fl_Choice* TouchpadOff
          { Fl_Value_Slider* o = FingerLowHigh = new Fl_Value_Slider(105, 315, 205, 25, gettext("Touch Sensitivity"));
            FingerLowHigh->tooltip(gettext("The minimum pressure to react to"));
            FingerLowHigh->type(1);
            FingerLowHigh->box(FL_GTK_DOWN_BOX);
            FingerLowHigh->color((Fl_Color)42);
            FingerLowHigh->selection_color(FL_LIGHT1);
            FingerLowHigh->textcolor((Fl_Color)55);
            FingerLowHigh->callback((Fl_Callback*)cb_FingerLowHigh);
            FingerLowHigh->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            FingerLowHigh->when(FL_WHEN_RELEASE);
            o->range(0,150);
            o->precision(0);
          } // Fl_Value_Slider* FingerLowHigh
          { Fl_Value_Slider* o = EmulateMidButtonTime = new Fl_Value_Slider(105, 430, 205, 25, gettext("Middle Button Emulation Time"));
            EmulateMidButtonTime->tooltip(gettext("Maximum time for middle button emulation."));
            EmulateMidButtonTime->type(1);
            EmulateMidButtonTime->box(FL_GTK_DOWN_BOX);
            EmulateMidButtonTime->color((Fl_Color)42);
            EmulateMidButtonTime->selection_color(FL_LIGHT1);
            EmulateMidButtonTime->textcolor((Fl_Color)55);
            EmulateMidButtonTime->callback((Fl_Callback*)cb_EmulateMidButtonTime);
            EmulateMidButtonTime->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            EmulateMidButtonTime->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,500);
          } // Fl_Value_Slider* EmulateMidButtonTime
          { Fl_Value_Slider* o = ClickTime = new Fl_Value_Slider(105, 372, 205, 25, gettext("Click Emulation Time"));
            ClickTime->tooltip(gettext("The duration of the mouse click generated by tapping"));
            ClickTime->type(1);
            ClickTime->box(FL_GTK_DOWN_BOX);
            ClickTime->color((Fl_Color)42);
            ClickTime->selection_color(FL_LIGHT1);
            ClickTime->textcolor((Fl_Color)55);
            ClickTime->callback((Fl_Callback*)cb_ClickTime);
            ClickTime->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            ClickTime->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,500);
          } // Fl_Value_Slider* ClickTime
          { GuestMouseOff = new Fl_Check_Button(280, 215, 20, 22, gettext("Guest Mouse Off"));
            GuestMouseOff->tooltip(gettext("Toggle on/of the secondary pointer (tipically a joypad)"));
            GuestMouseOff->down_box(FL_GTK_DOWN_BOX);
            GuestMouseOff->color((Fl_Color)55);
            GuestMouseOff->selection_color((Fl_Color)2);
            GuestMouseOff->callback((Fl_Callback*)cb_GuestMouseOff);
            GuestMouseOff->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* GuestMouseOff
          { CircularPad = new Fl_Check_Button(280, 247, 20, 23, gettext("Circular Pad"));
            CircularPad->tooltip(gettext("Use this if your touchpad is circular"));
            CircularPad->down_box(FL_GTK_DOWN_BOX);
            CircularPad->color((Fl_Color)55);
            CircularPad->selection_color((Fl_Color)2);
            CircularPad->callback((Fl_Callback*)cb_CircularPad);
            CircularPad->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* CircularPad
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(45, 130, 340, 365, gettext("Tapping"));
          o->hide();
          { TapButton1 = new Fl_Choice(215, 140, 110, 20, gettext("One Finger"));
            TapButton1->tooltip(gettext("Which mouse button is reported on a non-corner one-finger tap"));
            TapButton1->box(FL_NO_BOX);
            TapButton1->down_box(FL_GTK_DOWN_BOX);
            TapButton1->color(FL_LIGHT1);
            TapButton1->selection_color(FL_LIGHT1);
            TapButton1->callback((Fl_Callback*)cb_TapButton1);
            if (!menu_TapButton1_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_TapButton1[i].label())
                  menu_TapButton1[i].label(gettext(menu_TapButton1[i].label()));
              menu_TapButton1_i18n_done = 1;
            }
            TapButton1->menu(menu_TapButton1);
          } // Fl_Choice* TapButton1
          { TapButton2 = new Fl_Choice(216, 171, 110, 20, gettext("Two Finger"));
            TapButton2->tooltip(gettext("Which mouse button is reported on a non-corner two-finger tap"));
            TapButton2->box(FL_NO_BOX);
            TapButton2->down_box(FL_GTK_DOWN_BOX);
            TapButton2->color(FL_LIGHT1);
            TapButton2->selection_color(FL_LIGHT1);
            TapButton2->callback((Fl_Callback*)cb_TapButton2);
            if (!menu_TapButton2_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_TapButton2[i].label())
                  menu_TapButton2[i].label(gettext(menu_TapButton2[i].label()));
              menu_TapButton2_i18n_done = 1;
            }
            TapButton2->menu(menu_TapButton2);
          } // Fl_Choice* TapButton2
          { TapButton3 = new Fl_Choice(216, 204, 110, 20, gettext("Three Finger"));
            TapButton3->tooltip(gettext("Which mouse button is reported on a non-corner three-finger tap"));
            TapButton3->box(FL_NO_BOX);
            TapButton3->down_box(FL_GTK_DOWN_BOX);
            TapButton3->color(FL_LIGHT1);
            TapButton3->selection_color(FL_LIGHT1);
            TapButton3->callback((Fl_Callback*)cb_TapButton3);
            if (!menu_TapButton3_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_TapButton3[i].label())
                  menu_TapButton3[i].label(gettext(menu_TapButton3[i].label()));
              menu_TapButton3_i18n_done = 1;
            }
            TapButton3->menu(menu_TapButton3);
          } // Fl_Choice* TapButton3
          { LTCornerButton = new Fl_Choice(217, 235, 110, 20, gettext("Top Left Corner"));
            LTCornerButton->tooltip(gettext("Which mouse button is reported on a  top left corner finger tap"));
            LTCornerButton->box(FL_NO_BOX);
            LTCornerButton->down_box(FL_GTK_DOWN_BOX);
            LTCornerButton->color(FL_LIGHT1);
            LTCornerButton->selection_color(FL_LIGHT1);
            LTCornerButton->callback((Fl_Callback*)cb_LTCornerButton);
            if (!menu_LTCornerButton_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_LTCornerButton[i].label())
                  menu_LTCornerButton[i].label(gettext(menu_LTCornerButton[i].label()));
              menu_LTCornerButton_i18n_done = 1;
            }
            LTCornerButton->menu(menu_LTCornerButton);
          } // Fl_Choice* LTCornerButton
          { RTCornerButton = new Fl_Choice(216, 265, 110, 20, gettext("Top Right Corner"));
            RTCornerButton->tooltip(gettext("RTCornerButtonWhich mouse button is reported on a  top right corner finger ta\
p"));
            RTCornerButton->box(FL_NO_BOX);
            RTCornerButton->down_box(FL_GTK_DOWN_BOX);
            RTCornerButton->color(FL_LIGHT1);
            RTCornerButton->selection_color(FL_LIGHT1);
            RTCornerButton->callback((Fl_Callback*)cb_RTCornerButton);
            if (!menu_RTCornerButton_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_RTCornerButton[i].label())
                  menu_RTCornerButton[i].label(gettext(menu_RTCornerButton[i].label()));
              menu_RTCornerButton_i18n_done = 1;
            }
            RTCornerButton->menu(menu_RTCornerButton);
          } // Fl_Choice* RTCornerButton
          { LBCornerButton = new Fl_Choice(216, 295, 110, 20, gettext("Bottom Left Corner"));
            LBCornerButton->tooltip(gettext("LBCornerButtonWhich mouse button is reported on a  bottom left corner finger \
tap"));
            LBCornerButton->box(FL_NO_BOX);
            LBCornerButton->down_box(FL_GTK_DOWN_BOX);
            LBCornerButton->color(FL_LIGHT1);
            LBCornerButton->selection_color(FL_LIGHT1);
            LBCornerButton->callback((Fl_Callback*)cb_LBCornerButton);
            if (!menu_LBCornerButton_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_LBCornerButton[i].label())
                  menu_LBCornerButton[i].label(gettext(menu_LBCornerButton[i].label()));
              menu_LBCornerButton_i18n_done = 1;
            }
            LBCornerButton->menu(menu_LBCornerButton);
          } // Fl_Choice* LBCornerButton
          { RBCornerButton = new Fl_Choice(216, 325, 110, 20, gettext("Bottom Right Corner"));
            RBCornerButton->tooltip(gettext("Which mouse button is reported on a  bottom right corner finger tap"));
            RBCornerButton->box(FL_NO_BOX);
            RBCornerButton->down_box(FL_GTK_DOWN_BOX);
            RBCornerButton->color(FL_LIGHT1);
            RBCornerButton->selection_color(FL_LIGHT1);
            RBCornerButton->callback((Fl_Callback*)cb_RBCornerButton);
            if (!menu_RBCornerButton_i18n_done) {
              int i=0;
              for ( ; i<8; i++)
                if (menu_RBCornerButton[i].label())
                  menu_RBCornerButton[i].label(gettext(menu_RBCornerButton[i].label()));
              menu_RBCornerButton_i18n_done = 1;
            }
            RBCornerButton->menu(menu_RBCornerButton);
          } // Fl_Choice* RBCornerButton
          { Fl_Value_Slider* o = MaxTapTime = new Fl_Value_Slider(200, 360, 135, 25, gettext("Tap Time"));
            MaxTapTime->tooltip(gettext("Maximum time for detecting a tap."));
            MaxTapTime->type(1);
            MaxTapTime->box(FL_GTK_DOWN_BOX);
            MaxTapTime->color((Fl_Color)42);
            MaxTapTime->selection_color(FL_LIGHT1);
            MaxTapTime->textcolor((Fl_Color)55);
            MaxTapTime->callback((Fl_Callback*)cb_MaxTapTime);
            MaxTapTime->align(Fl_Align(FL_ALIGN_LEFT));
            MaxTapTime->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,300);
          } // Fl_Value_Slider* MaxTapTime
          { Fl_Value_Slider* o = MaxDoubleTapTime = new Fl_Value_Slider(200, 397, 135, 25, gettext("Double Tap Time"));
            MaxDoubleTapTime->tooltip(gettext("Maximum time for detecting a double tap"));
            MaxDoubleTapTime->type(1);
            MaxDoubleTapTime->box(FL_GTK_DOWN_BOX);
            MaxDoubleTapTime->color((Fl_Color)42);
            MaxDoubleTapTime->selection_color(FL_LIGHT1);
            MaxDoubleTapTime->textcolor((Fl_Color)55);
            MaxDoubleTapTime->callback((Fl_Callback*)cb_MaxDoubleTapTime);
            MaxDoubleTapTime->align(Fl_Align(FL_ALIGN_LEFT));
            MaxDoubleTapTime->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,300);
          } // Fl_Value_Slider* MaxDoubleTapTime
          { Fl_Value_Slider* o = MaxTapMove = new Fl_Value_Slider(200, 435, 135, 25, gettext("Tap Move"));
            MaxTapMove->tooltip(gettext("Maximum movement of the finger for detecting a tap"));
            MaxTapMove->type(1);
            MaxTapMove->box(FL_GTK_DOWN_BOX);
            MaxTapMove->color((Fl_Color)42);
            MaxTapMove->selection_color(FL_LIGHT1);
            MaxTapMove->textcolor((Fl_Color)55);
            MaxTapMove->callback((Fl_Callback*)cb_MaxTapMove);
            MaxTapMove->align(Fl_Align(FL_ALIGN_LEFT));
            MaxTapMove->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,300);
          } // Fl_Value_Slider* MaxTapMove
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 120, 325, 365, gettext("Scrolling"));
          o->hide();
          { UpDownScrolling = new Fl_Check_Button(310, 150, 20, 25, gettext("Up Down Buttons Scroll"));
            UpDownScrolling->tooltip(gettext("If on, the up/down buttons generate button 4/5 events"));
            UpDownScrolling->down_box(FL_GTK_DOWN_BOX);
            UpDownScrolling->color((Fl_Color)55);
            UpDownScrolling->selection_color((Fl_Color)2);
            UpDownScrolling->callback((Fl_Callback*)cb_UpDownScrolling);
            UpDownScrolling->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* UpDownScrolling
          { LeftRightScrolling = new Fl_Check_Button(310, 168, 20, 25, gettext("Left Right Buttons Scroll"));
            LeftRightScrolling->tooltip(gettext("If on, the left/right buttons generate button 6/7 events"));
            LeftRightScrolling->down_box(FL_GTK_DOWN_BOX);
            LeftRightScrolling->color((Fl_Color)55);
            LeftRightScrolling->selection_color((Fl_Color)2);
            LeftRightScrolling->callback((Fl_Callback*)cb_LeftRightScrolling);
            LeftRightScrolling->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* LeftRightScrolling
          { Fl_Value_Slider* o = VertScrollDelta = new Fl_Value_Slider(200, 195, 135, 25, gettext("VScroll Delta"));
            VertScrollDelta->tooltip(gettext("Move distance of the finger for a scroll event"));
            VertScrollDelta->type(1);
            VertScrollDelta->box(FL_GTK_DOWN_BOX);
            VertScrollDelta->color((Fl_Color)42);
            VertScrollDelta->selection_color(FL_LIGHT1);
            VertScrollDelta->textcolor((Fl_Color)55);
            VertScrollDelta->callback((Fl_Callback*)cb_VertScrollDelta);
            VertScrollDelta->align(Fl_Align(FL_ALIGN_LEFT));
            VertScrollDelta->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(10,1000);
          } // Fl_Value_Slider* VertScrollDelta
          { Fl_Value_Slider* o = HorizScrollDelta = new Fl_Value_Slider(200, 230, 135, 25, gettext("HScroll Delta"));
            HorizScrollDelta->tooltip(gettext("Move distance of the finger for a scroll event"));
            HorizScrollDelta->type(1);
            HorizScrollDelta->box(FL_GTK_DOWN_BOX);
            HorizScrollDelta->color((Fl_Color)42);
            HorizScrollDelta->selection_color(FL_LIGHT1);
            HorizScrollDelta->textcolor((Fl_Color)55);
            HorizScrollDelta->callback((Fl_Callback*)cb_HorizScrollDelta);
            HorizScrollDelta->align(Fl_Align(FL_ALIGN_LEFT));
            HorizScrollDelta->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(10,1000);
          } // Fl_Value_Slider* HorizScrollDelta
          { CircularScrolling = new Fl_Check_Button(245, 267, 20, 25, gettext("Circular Scroll"));
            CircularScrolling->tooltip(gettext("If on, circular scrolling is used"));
            CircularScrolling->down_box(FL_GTK_DOWN_BOX);
            CircularScrolling->color((Fl_Color)55);
            CircularScrolling->selection_color((Fl_Color)2);
            CircularScrolling->callback((Fl_Callback*)cb_CircularScrolling);
            CircularScrolling->align(Fl_Align(FL_ALIGN_LEFT));
          } // Fl_Check_Button* CircularScrolling
          { Fl_Value_Slider* o = CircScrollDelta = new Fl_Value_Slider(201, 291, 135, 25, gettext("CScroll Delta"));
            CircScrollDelta->tooltip(gettext("Move angle (radians) of finger to generate a scroll event"));
            CircScrollDelta->type(1);
            CircScrollDelta->box(FL_GTK_DOWN_BOX);
            CircScrollDelta->color((Fl_Color)42);
            CircScrollDelta->selection_color(FL_LIGHT1);
            CircScrollDelta->textcolor((Fl_Color)55);
            CircScrollDelta->callback((Fl_Callback*)cb_CircScrollDelta);
            CircScrollDelta->align(Fl_Align(FL_ALIGN_LEFT));
            CircScrollDelta->when(FL_WHEN_RELEASE);
            o->precision(2);
            o->range(0.01,5);
          } // Fl_Value_Slider* CircScrollDelta
          { CircScrollTrigger = new Fl_Choice(200, 325, 135, 20, gettext("CScroll Start"));
            CircScrollTrigger->box(FL_NO_BOX);
            CircScrollTrigger->down_box(FL_FLAT_BOX);
            CircScrollTrigger->color(FL_LIGHT1);
            CircScrollTrigger->selection_color(FL_LIGHT1);
            CircScrollTrigger->callback((Fl_Callback*)cb_CircScrollTrigger);
            if (!menu_CircScrollTrigger_i18n_done) {
              int i=0;
              for ( ; i<9; i++)
                if (menu_CircScrollTrigger[i].label())
                  menu_CircScrollTrigger[i].label(gettext(menu_CircScrollTrigger[i].label()));
              menu_CircScrollTrigger_i18n_done = 1;
            }
            CircScrollTrigger->menu(menu_CircScrollTrigger);
          } // Fl_Choice* CircScrollTrigger
          { Fl_Value_Slider* o = EdgeMotionMinSpeed = new Fl_Value_Slider(185, 366, 152, 25, gettext("Edge Min Speed"));
            EdgeMotionMinSpeed->tooltip(gettext("Slowest setting for edge motion speed"));
            EdgeMotionMinSpeed->type(1);
            EdgeMotionMinSpeed->box(FL_GTK_DOWN_BOX);
            EdgeMotionMinSpeed->color((Fl_Color)42);
            EdgeMotionMinSpeed->selection_color(FL_LIGHT1);
            EdgeMotionMinSpeed->textcolor((Fl_Color)55);
            EdgeMotionMinSpeed->callback((Fl_Callback*)cb_EdgeMotionMinSpeed);
            EdgeMotionMinSpeed->align(Fl_Align(FL_ALIGN_LEFT));
            EdgeMotionMinSpeed->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,300);
          } // Fl_Value_Slider* EdgeMotionMinSpeed
          { Fl_Value_Slider* o = EdgeMotionMaxSpeed = new Fl_Value_Slider(185, 400, 152, 25, gettext("Edge Max Speed"));
            EdgeMotionMaxSpeed->tooltip(gettext("Fastest setting for edge motion speed"));
            EdgeMotionMaxSpeed->type(1);
            EdgeMotionMaxSpeed->box(FL_GTK_DOWN_BOX);
            EdgeMotionMaxSpeed->color((Fl_Color)42);
            EdgeMotionMaxSpeed->selection_color(FL_LIGHT1);
            EdgeMotionMaxSpeed->textcolor((Fl_Color)55);
            EdgeMotionMaxSpeed->callback((Fl_Callback*)cb_EdgeMotionMaxSpeed);
            EdgeMotionMaxSpeed->align(Fl_Align(FL_ALIGN_LEFT));
            EdgeMotionMaxSpeed->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(0,300);
          } // Fl_Value_Slider* EdgeMotionMaxSpeed
          { Fl_Value_Slider* o = EdgeMotionMinMaxZ = new Fl_Value_Slider(185, 435, 152, 25, gettext("Edge Sensitivity"));
            EdgeMotionMinMaxZ->tooltip(gettext("Finger pressure for  motion speed"));
            EdgeMotionMinMaxZ->type(1);
            EdgeMotionMinMaxZ->box(FL_GTK_DOWN_BOX);
            EdgeMotionMinMaxZ->color((Fl_Color)42);
            EdgeMotionMinMaxZ->selection_color(FL_LIGHT1);
            EdgeMotionMinMaxZ->textcolor((Fl_Color)55);
            EdgeMotionMinMaxZ->callback((Fl_Callback*)cb_EdgeMotionMinMaxZ);
            EdgeMotionMinMaxZ->align(Fl_Align(FL_ALIGN_LEFT));
            EdgeMotionMinMaxZ->when(FL_WHEN_RELEASE);
            o->precision(0);
            o->range(1,150);
          } // Fl_Value_Slider* EdgeMotionMinMaxZ
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(50, 135, 340, 365, gettext("Movement"));
          o->hide();
          { TopEdge = new Fl_Value_Output(172, 179, 50, 25, gettext("Top @8->|"));
            TopEdge->tooltip(gettext("Y coordinate for top edge"));
            TopEdge->box(FL_GTK_DOWN_BOX);
            TopEdge->color((Fl_Color)53);
            TopEdge->selection_color(FL_LIGHT1);
          } // Fl_Value_Output* TopEdge
          { Fl_Button* o = new Fl_Button(225, 179, 90, 25, gettext("Calibrate"));
            o->tooltip(gettext("To calibrate push button and move finger on the top of the pad"));
            o->box(FL_GTK_UP_BOX);
            o->color(FL_LIGHT1);
            o->selection_color(FL_LIGHT1);
            o->callback((Fl_Callback*)cb_Calibrate);
          } // Fl_Button* o
          { BottomEdge = new Fl_Value_Output(172, 209, 50, 25, gettext("Bottom @2->|"));
            BottomEdge->tooltip(gettext("Y coordinate for bottom edge"));
            BottomEdge->box(FL_GTK_DOWN_BOX);
            BottomEdge->color((Fl_Color)53);
            BottomEdge->selection_color(FL_LIGHT1);
          } // Fl_Value_Output* BottomEdge
          { Fl_Button* o = new Fl_Button(225, 209, 90, 25, gettext("Calibrate"));
            o->tooltip(gettext("To calibrate push button and move finger on the bottom of the pad"));
            o->box(FL_GTK_UP_BOX);
            o->color(FL_LIGHT1);
            o->selection_color(FL_LIGHT1);
            o->callback((Fl_Callback*)cb_Calibrate1);
          } // Fl_Button* o
          { LeftEdge = new Fl_Value_Output(172, 239, 50, 25, gettext("Left @4->|"));
            LeftEdge->tooltip(gettext("X coordinate for left edge"));
            LeftEdge->box(FL_GTK_DOWN_BOX);
            LeftEdge->color((Fl_Color)53);
            LeftEdge->selection_color(FL_LIGHT1);
          } // Fl_Value_Output* LeftEdge
          { Fl_Button* o = new Fl_Button(225, 239, 90, 25, gettext("Calibrate"));
            o->tooltip(gettext("To calibrate push button and move finger on the left of the pad"));
            o->box(FL_GTK_UP_BOX);
            o->color(FL_LIGHT1);
            o->selection_color(FL_LIGHT1);
            o->callback((Fl_Callback*)cb_Calibrate2);
          } // Fl_Button* o
          { RightEdge = new Fl_Value_Output(172, 269, 50, 25, gettext("Right @->|"));
            RightEdge->tooltip(gettext("X coordinate for right edge"));
            RightEdge->box(FL_GTK_DOWN_BOX);
            RightEdge->color((Fl_Color)53);
            RightEdge->selection_color(FL_LIGHT1);
          } // Fl_Value_Output* RightEdge
          { Fl_Button* o = new Fl_Button(225, 269, 90, 25, gettext("Calibrate"));
            o->tooltip(gettext("To calibrate push button and move finger on the right of the pad"));
            o->box(FL_GTK_UP_BOX);
            o->color(FL_LIGHT1);
            o->selection_color(FL_LIGHT1);
            o->callback((Fl_Callback*)cb_Calibrate3);
          } // Fl_Button* o
          { Fl_Value_Slider* o = MinSpeed = new Fl_Value_Slider(110, 340, 215, 25, gettext("Min Speed"));
            MinSpeed->tooltip(gettext("Minimum speed factor"));
            MinSpeed->type(1);
            MinSpeed->box(FL_GTK_DOWN_BOX);
            MinSpeed->color((Fl_Color)42);
            MinSpeed->selection_color(FL_LIGHT1);
            MinSpeed->textcolor((Fl_Color)55);
            MinSpeed->callback((Fl_Callback*)cb_MinSpeed);
            MinSpeed->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            MinSpeed->when(FL_WHEN_RELEASE);
            o->range(0,10);
            o->precision(2);
          } // Fl_Value_Slider* MinSpeed
          { Fl_Value_Slider* o = MaxSpeed = new Fl_Value_Slider(110, 380, 215, 25, gettext("Max Speed"));
            MaxSpeed->tooltip(gettext("Maximum speed factor"));
            MaxSpeed->type(1);
            MaxSpeed->box(FL_GTK_DOWN_BOX);
            MaxSpeed->color((Fl_Color)42);
            MaxSpeed->selection_color(FL_LIGHT1);
            MaxSpeed->textcolor((Fl_Color)55);
            MaxSpeed->callback((Fl_Callback*)cb_MaxSpeed);
            MaxSpeed->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            MaxSpeed->when(FL_WHEN_RELEASE);
            o->range(0,10);
            o->precision(2);
          } // Fl_Value_Slider* MaxSpeed
          { Fl_Value_Slider* o = AccelFactor = new Fl_Value_Slider(110, 420, 215, 25, gettext("Acceleration"));
            AccelFactor->tooltip(gettext("Acceleration factor"));
            AccelFactor->type(1);
            AccelFactor->box(FL_GTK_DOWN_BOX);
            AccelFactor->color((Fl_Color)42);
            AccelFactor->selection_color(FL_LIGHT1);
            AccelFactor->textcolor((Fl_Color)55);
            AccelFactor->callback((Fl_Callback*)cb_AccelFactor);
            AccelFactor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            AccelFactor->when(FL_WHEN_RELEASE);
            o->precision(4);
            o->range(0.0001,0.01);
          } // Fl_Value_Slider* AccelFactor
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Slider* o = double_click_slider = new Fl_Slider(165, 20, 90, 25, gettext("Double Click Speed"));
        double_click_slider->tooltip(gettext("This sets how fast you must click to Double Click"));
        double_click_slider->type(1);
        double_click_slider->box(FL_GTK_DOWN_BOX);
        double_click_slider->color((Fl_Color)42);
        double_click_slider->selection_color(FL_LIGHT1);
        double_click_slider->minimum(1);
        double_click_slider->maximum(2000);
        double_click_slider->step(1);
        double_click_slider->value(400);
        double_click_slider->callback((Fl_Callback*)cb_double_click_slider);
        double_click_slider->align(Fl_Align(FL_ALIGN_LEFT));
        double_click_slider->when(FL_WHEN_RELEASE);
        flMouse mouse;
        int h = mouse.getDoubleClick();
        o->value(h);
      } // Fl_Slider* double_click_slider
      { Fl_Slider* o = delta_slider = new Fl_Slider(165, 55, 90, 25, gettext("Double Click Delta"));
        delta_slider->tooltip(gettext("This sets how fast you must click to Double Click"));
        delta_slider->type(1);
        delta_slider->box(FL_GTK_DOWN_BOX);
        delta_slider->color((Fl_Color)42);
        delta_slider->selection_color(FL_LIGHT1);
        delta_slider->minimum(1);
        delta_slider->maximum(32);
        delta_slider->step(1);
        delta_slider->value(2);
        delta_slider->callback((Fl_Callback*)cb_delta_slider);
        delta_slider->align(Fl_Align(FL_ALIGN_LEFT));
        delta_slider->when(FL_WHEN_RELEASE);
        flMouse mouse;
        int h = mouse.getDelta();
        o->value(h);
      } // Fl_Slider* delta_slider
      { Fl_Value_Input* o = delta_v = new Fl_Value_Input(270, 55, 40, 25, gettext("Pixels"));
        delta_v->box(FL_GTK_DOWN_BOX);
        delta_v->labelsize(12);
        delta_v->minimum(1);
        delta_v->maximum(32);
        delta_v->value(2);
        delta_v->callback((Fl_Callback*)cb_delta_v);
        delta_v->align(Fl_Align(FL_ALIGN_RIGHT));
        o->value(delta_slider->value());
      } // Fl_Value_Input* delta_v
      { Fl_Value_Input* o = double_v = new Fl_Value_Input(270, 20, 60, 25, gettext("Miliseconds"));
        double_v->box(FL_GTK_DOWN_BOX);
        double_v->labelsize(12);
        double_v->minimum(1);
        double_v->maximum(2000);
        double_v->value(400);
        double_v->callback((Fl_Callback*)cb_double_v);
        double_v->align(Fl_Align(FL_ALIGN_RIGHT));
        o->value(double_click_slider->value());
      } // Fl_Value_Input* double_v
      o->end();
    } // Fl_Scroll* o
    readsynclientoutput();
    Config config;config.under_mouse(o);
    mouse_window->xclass("jsm-mouse");
    mouse_window->end();
    mouse_window->resizable(mouse_window);
  } // Fl_Double_Window* mouse_window
  return mouse_window;
}

void MouseUI::CalibrateEdge(int edge) {
  int fds[2];
  pipe(fds);
  char tmp[1024];
  m_pid=fork();	
  
    if (m_pid==(pid_t)0){
      close(fds[0]);
      dup2(fds[1],2);
      close(fds[1]);
      snprintf(tmp,1024,"(%s) 1>&2","synclient -m 100");
      if (verbose) printf("Executing: %s\n",tmp);
      execlp("/bin/sh", "sh", "-c", tmp, 0);
    }	
    fl_cursor(FL_CURSOR_WAIT);
    Fl::check();
  	
    close(fds[1]);
    FILE* fp=fdopen(fds[0],"r");	
    char* argv[3];
    int xmax=0;
    int xmin=100000;
    int ymax=0;
    int ymin=100000;
    fgets(tmp,1024,fp);
    for (int i=0; i<10 ; i++){
      fgets(tmp,1024,fp);
      if (verbose) printf("%s\n",tmp);
      parseline(tmp,argv,3);
      if (atoi(argv[1])>xmax) xmax=atoi(argv[1]);
      if (atoi(argv[1])<xmin) xmin=atoi(argv[1]);
      if (atoi(argv[2])>ymax) ymax=atoi(argv[2]);
      if (atoi(argv[2])<ymin) ymin=atoi(argv[2]);
    }
    kill(m_pid,SIGTERM);
    fclose(fp);	
    switch (edge){
      case 0: TopEdge->value(ymin);synclient("TopEdge",ymin);break;
      case 1: BottomEdge->value(ymax);synclient("BottomEdge",ymax);break;
      case 2: LeftEdge->value(xmin);synclient("LeftEdge",xmin);break;
      case 3: RightEdge->value(xmax);synclient("RightEdge",xmax);break;
  }
  	
  fl_cursor(FL_CURSOR_DEFAULT);
  Fl::check();
}

void MouseUI::parsesynclientoutput(std::string filename) {
  std::string full_line = "";
  std::string line = "";
  std::string line_substring ="";
  int starter_element = 0;
  int ender_element = 0;
  int mid = 0;
  int starter = 0;
  std::ifstream ifs(filename.c_str(), std::ifstream::in);
  if(ifs.is_open()){
  //std::cout<<filename<<" is open"<<std::endl;
    while (getline(ifs,full_line)){
      starter_element = full_line.find_first_not_of(' ');
      ender_element = full_line.find_first_of(' ',starter_element);
      mid = ender_element - starter_element;
      line = full_line.substr(starter_element,mid);
      starter = full_line.find_first_of('=');
      line_substring = full_line.substr((starter+2),std::string::npos);
  if (line.compare("synclient")!=0){
      double dub = convert(line_substring);
  //CHECK VALUES
      if (line.compare("LeftEdge")==0){
        LeftEdge->value(dub);
      }
      else if (line.compare("RightEdge")==0){
        RightEdge->value(dub);
      }
      else if (line.compare("TopEdge")==0){
        TopEdge->value(dub);
      }
      else if (line.compare("BottomEdge")==0){
        BottomEdge->value(dub);
      }
      else if (line.compare("FingerLow")==0){
        FingerLowHigh->value(dub);
      }
      else if (line.compare("MaxTapTime")==0){
        MaxTapTime->value(dub);
      }
      else if (line.compare("MaxTapMove")==0){
        MaxTapMove->value(dub);
      }
      else if (line.compare("MaxDoubleTapTime")==0){
        MaxDoubleTapTime->value(dub);
      }
      else if (line.compare("ClickTime")==0){
        ClickTime->value(dub);
      }
      else if (line.compare("EmulateMidButtonTime")==0){
        EmulateMidButtonTime->value(dub);
      }
      else if (line.compare("VertScrollDelta")==0){
        VertScrollDelta->value(dub);
      }
      else if (line.compare("HorizScrollDelta")==0){
        HorizScrollDelta->value(dub);
      }
      else if (line.compare("MinSpeed")==0){
        MinSpeed->value(dub);
      }
      else if (line.compare("MaxSpeed")==0){
        MaxSpeed->value(dub);
      }
      else if (line.compare("AccelFactor")==0){
        AccelFactor->value(dub);
      }
      else if (line.compare("EdgeMotionMinZ")==0){
        EdgeMotionMinMaxZ->value(dub);
      }
      else if (line.compare("EdgeMotionMinSpeed")==0){
        EdgeMotionMinSpeed->value(dub);
      }
      else if (line.compare("EdgeMotionMaxSpeed")==0){
        EdgeMotionMaxSpeed->value(dub);
      }
      else if (line.compare("UpDownScrolling")==0){
        UpDownScrolling->value(dub);
      }
      else if (line.compare("LeftRightScrolling")==0){
        LeftRightScrolling->value(dub);
      }
      else if (line.compare("TouchpadOff")==0){
        TouchpadOff->value(dub);
      }
      else if (line.compare("GuestMouseOff")==0){
        GuestMouseOff->value(dub);
      }
      else if (line.compare("RTCornerButton")==0){
        RTCornerButton->value(dub);
      }
      else if (line.compare("RBCornerButton")==0){
        RBCornerButton->value(dub);
      }
      else if (line.compare("LTCornerButton")==0){
        LTCornerButton->value(dub);
      }
      else if (line.compare("LBCornerButton")==0){
        LBCornerButton->value(dub);
      }
      else if (line.compare("TapButton1")==0){
        TapButton1->value(dub);
      }
      else if (line.compare("TapButton2")==0){
        TapButton2->value(dub);
      }
      else if (line.compare("TapButton3")==0){
        TapButton3->value(dub);
      }
      else if (line.compare("CircularScrolling")==0){
        CircularScrolling->value(dub);
      }
      else if (line.compare("CircScrollDelta")==0){
        CircScrollDelta->value(dub);
      }
      else if (line.compare("CircScrollTrigger")==0){
        CircScrollTrigger->value(dub);
      }
      else if (line.compare("CircularPad")==0){
        CircularPad->value(dub);
      }
  //END CHECK VALUES
  
  }//not Parameter
    }//while
  }//if ifstream
}

void MouseUI::readsynclientoutput() {
  std::string filename = getenv("HOME");
  filename += "/.jsm-mouse";
  std::string command = "synclient -l >";
  command += filename;
  int start = system(command.c_str());
  if(start !=0){std::cout<<command<<" did not return 0"<<std::endl;;}
  parsesynclientoutput(filename);
}

void MouseUI::SaveSettings() {
  int config = system("synclient -l >~/.jsm-mouse");
  if (config!=0){std::cout<<"system did not return 0"<<std::endl;}
}

void MouseUI::synclient(const char* field, double value) {
  std::string tmp = "synclient ";
  tmp +=field;
  tmp +="=";
  tmp += convert(value);
  int check =system(tmp.c_str());
  //std::cout<<tmp<<" returns: "<<check<<std::endl;
}

double MouseUI::convert(std::string number) {
  std::stringstream out;
  out << number;
  double integer;
  out >> integer;
  return integer;
}

std::string MouseUI::convert(double number) {
  std::string num;
  std::stringstream out;
  out << number;
  num = out.str();
  return num;
}

void MouseUI::add_to_profile() {
  std::string string_command = "sed -i 's/Parameter settings:/synclient/' ";
  string_command += getenv("HOME");
  string_command += "/.jsm-mouse";
  const char* command = string_command.c_str();
  int working_sed = system(command);
  string_command = "awk '{$1=$1}{gsub(/[ ]/,\"\"); print}' ORS=' ' ";
  string_command += getenv("HOME");
  string_command += "/.jsm-mouse >";
  string_command += getenv("HOME");
  string_command += "/.config/jsm-mouse";
  working_sed = system(string_command.c_str());
  string_command = "chmod +x ";
  string_command += getenv("HOME");
  string_command += "/.config/jsm-mouse";
  working_sed = system(string_command.c_str());
  string_command = "sed -i '1i#!/bin/bash' ";
  string_command += getenv("HOME");
  string_command += "/.config/jsm-mouse";
  working_sed = system(string_command.c_str());
  if(working_sed!=0){
    //std::cout<< string_command<<" did not return 0"<<std::endl;
  }
}

int MouseUI::parseline(char *line, char **argv, int maxarg) {
  int argc=0;
  while (*line!=0 && argc<maxarg) {      
    while (*line==' ' || *line=='\t' || *line =='\n') *line++=0;     
    *argv++ = line;
    argc++;
    while (*line!=0 && *line!=' ' && *line!='\t' && *line!='\n') line++;             
  }
  *argv = 0;
  return argc;
}
