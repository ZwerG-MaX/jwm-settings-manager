# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include <FL/Fl_XBM_Image.H>} {public global
} 

decl {\#include <FL/Fl_PNG_Image.H>} {public global
} 

decl {\#include <FL/Fl_Native_File_Chooser.H>} {public global
} 

decl {\#include "../include/flWindow.h"} {public global
} 

class WindowUI {open : {public Config}
} {
  Function {add_option_window()} {open
  } {
    Fl_Window add_opt_window {
      label {Add an Option} open
      xywh {881 244 435 435} type Double hide xclass jwm-settings-manager
    } {
      Fl_Scroll {} {open
        xywh {0 0 430 430}
      } {
        Fl_Browser options_available {
          callback {int line = options_available->value();
options_desc->select(line);
const char* value = options_available->text(line);
check_opts(value);}
          xywh {10 10 115 375} type Hold box GTK_DOWN_BOX selection_color 80
          code0 {flWindow win;win.populateOptions(o);}
          code1 {;}
        }
        Fl_Button {} {
          label {@+  Add}
          callback {add_option_to_group();}
          xywh {25 400 80 25} box GTK_UP_BOX color 95
        }
        Fl_Browser options_desc {
          xywh {135 10 285 220} type Hold box GTK_DOWN_BOX selection_color 80 labeltype NO_LABEL align 1
          code0 {flWindow win;win.populateDesc(o);}
        }
        Fl_Input icon_value {
          label Icon
          xywh {195 255 100 25} box GTK_DOWN_BOX deactivate
        }
        Fl_Slider opacity_value {
          label Opacity
          xywh {195 358 100 25} type Horizontal box GTK_DOWN_BOX color 41 align 4 step 0.2 value 1 deactivate
        }
        Fl_Value_Input desktop_num {
          label Desktop
          xywh {195 395 35 25} box GTK_DOWN_BOX maximum 10000 deactivate
        }
        Fl_Browser add_tracker {
          label Adding
          xywh {310 255 110 125} box GTK_DOWN_BOX align 1
        }
        Fl_Button {} {
          label Cancel
          callback {add_opt_window->hide();}
          xywh {300 400 55 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {saveJWMRC(add_opt_window);
populate_groups();}
          tooltip {Write to configuration file} xywh {375 400 45 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Menu_Button layer_chooser {
          label Layer open
          xywh {195 290 100 25} box GTK_UP_BOX deactivate
        } {
          MenuItem {} {
            label below
            callback {layer_value->value("below");}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label normal
            callback {layer_value->value("normal");}
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label above
            callback {layer_value->value("above");}
            xywh {20 20 100 20}
          }
        }
        Fl_Output layer_value {
          xywh {195 325 100 25} box GTK_DOWN_BOX deactivate
        }
      }
    }
  }
  Function {add_class_window()} {open
  } {
    Fl_Window class_win {
      label {Add Class} open
      xywh {218 580 375 50} type Double hide
      code0 {Config config;config.under_mouse(o);} xclass jwm-settings-manager
    } {
      Fl_Input input_to_add_class {
        label {Class to Add}
        xywh {105 10 195 25} box GTK_DOWN_BOX
      }
      Fl_Button {} {
        label OK
        callback {add_class();
populate_groups();
class_win->hide();}
        tooltip {Write to configuration file} xywh {315 10 45 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {add_program_window()} {open
  } {
    Fl_Window prog_win {
      label {Program to add} open
      xywh {208 542 425 50} type Double hide
      code0 {Config config;config.under_mouse(o);} xclass jwm-settings-manager
    } {
      Fl_Input input_to_add_prog {
        label {Program to Add}
        xywh {135 10 195 25} box GTK_DOWN_BOX
      }
      Fl_Button {} {
        label OK
        callback {add_prog();
populate_groups();
prog_win->hide();}
        tooltip {Write to configuration file} xywh {350 10 45 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {make_window()} {open
  } {
    code {load();
saveChangesTemp();} {}
    Fl_Window window_window {
      label {Window Settings} open
      xywh {90 410 680 390} type Double color 31 hide resizable
      code0 {Config config;config.under_mouse(o);}
    } {
      Fl_Scroll {} {open
        xywh {0 0 680 390} color 31
      } {
        Fl_Button {} {
          label Cancel
          callback {window_window->hide();
cancel();
UI ui;
ui.showSettings();}
          xywh {510 360 55 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {saveJWMRC(window_window);
UI ui;
ui.showSettings();}
          tooltip {Write to configuration file} xywh {595 360 45 25} box GTK_UP_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Tabs {} {open
          xywh {0 25 680 330} box PLASTIC_THIN_UP_BOX
        } {
          Fl_Group {} {
            label Appearance
            xywh {10 45 670 305} hide
          } {
            Fl_Box {} {
              xywh {10 55 330 175} box GTK_DOWN_BOX color 51
            }
            Fl_Box {} {
              label {Active Window}
              xywh {100 60 160 25} labelfont 1 labelcolor 35 align 384
            }
            Fl_Box {} {
              label {Titlebar Background}
              xywh {20 100 145 25} labelcolor 35
            }
            Fl_Box {} {
              label {Color 1}
              xywh {180 85 60 15} labelcolor 35
            }
            Fl_Button a_title_color1 {
              callback {set_one_title_color(a_title_color1,a_title_color2,1);}
              xywh {180 100 60 25} box GTK_UP_BOX
              code0 {active_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Color 2}
              xywh {245 85 60 15} labelcolor 35
            }
            Fl_Button a_title_color2 {
              callback {set_two_title_colors(a_title_color1, a_title_color2,1);}
              xywh {245 100 60 25} box GTK_UP_BOX
              code0 {active_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Font and Button Color}
              xywh {15 130 160 25} labelcolor 35
            }
            Fl_Button a_font_color {
              callback {set_font_color(a_font_color, 1);}
              xywh {180 130 60 25} box GTK_UP_BOX when 6
              code0 {font_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Window Border Color}
              xywh {15 160 155 25} labelcolor 35
            }
            Fl_Button a_border_color {
              callback {set_border_color(a_border_color, 1);}
              xywh {180 160 60 25} box GTK_UP_BOX when 6
              code0 {border_color_loader(o,1);}
            }
            Fl_Slider active_o_slider {
              label {Opacity of Title Bar}
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {180 190 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 4 step 0.01 value 1
              code0 {opacity_loader(o,1);}
            }
            Fl_Value_Input active_o_slider_v {
              label {%}
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              xywh {280 190 35 25} box GTK_DOWN_BOX selection_color 80 labelsize 10 align 8 when 3 value 1
              code0 {float v = active_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              xywh {350 55 320 175} box GTK_DOWN_BOX color 45
            }
            Fl_Box {} {
              label {Background  Window}
              xywh {385 60 220 25} labelfont 1 labelcolor 32 align 128
            }
            Fl_Box {} {
              label {Titlebar Background}
              xywh {360 105 140 25} labelcolor 35
            }
            Fl_Box {} {
              label {Color 1}
              xywh {515 85 60 15} labelcolor 35
            }
            Fl_Button inactive_color {
              callback {set_one_title_color(inactive_color, inactive_color2, 2);}
              xywh {515 100 60 25} box GTK_UP_BOX when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Color 2}
              xywh {580 85 60 15} labelcolor 35
            }
            Fl_Button inactive_color2 {
              callback {set_two_title_colors(inactive_color, inactive_color2, 2);}
              xywh {580 100 60 25} box GTK_UP_BOX when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Font and Button Color}
              xywh {355 132 160 25} labelcolor 35
            }
            Fl_Button inactive_font_color {
              callback {set_font_color(inactive_font_color, 2);}
              xywh {515 130 60 25} box GTK_UP_BOX when 6
              code0 {font_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Window Border Color}
              xywh {355 160 155 25} labelcolor 35
            }
            Fl_Button inactive_border_color {
              callback {set_border_color(inactive_border_color, 2);}
              xywh {515 160 60 25} box GTK_UP_BOX when 6
              code0 {border_color_loader(o,2);}
            }
            Fl_Slider inactive_o_slider {
              label {Opacity of Title Bar}
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {500 190 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 4 step 0.01 value 1
              code0 {opacity_loader(o,2);}
            }
            Fl_Value_Input inactive_o_slider_v {
              label {%}
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              xywh {614 190 35 25} box GTK_DOWN_BOX selection_color 80 labelsize 10 align 8 when 3
              code0 {float v = inactive_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              label {Change the Window Button Images}
              xywh {205 235 315 25} labelfont 1 labelcolor 35
            }
            Fl_Button {} {
              label { Maximize Button (Activated)}
              callback {choose_button("ButtonMaxActive");}
              tooltip {Choose an image (XBM) for the Maximized button} xywh {30 260 225 25} box GTK_UP_BOX align 256
            }
            Fl_Box max_a_image {
              callback {get_button(o,"ButtonMaxActive");}
              xywh {265 260 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button(o,"ButtonMaxActive");}
            }
            Fl_Box i_max_a_image {
              callback {get_button_inactive(o,"ButtonMaxActive");}
              xywh {300 260 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button_inactive(o,"ButtonMaxActive");}
            }
            Fl_Button {} {
              label {Close Button}
              callback {choose_button("ButtonClose");}
              tooltip {Choose a XBM for the close button} xywh {140 305 115 25} box GTK_UP_BOX align 256
            }
            Fl_Box close_image {
              callback {get_button(o,"ButtonClose");}
              xywh {265 300 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button(o,"ButtonClose");}
            }
            Fl_Box i_close_image {
              callback {get_button_inactive(o,"ButtonClose");}
              xywh {300 300 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button_inactive(o,"ButtonClose");}
            }
            Fl_Button {} {
              label {Maximize Button}
              callback {choose_button("ButtonMax");}
              tooltip {Choose an image (XBM) for the Maximize button} xywh {395 260 145 25} box GTK_UP_BOX align 256
            }
            Fl_Box max_image {
              callback {get_button(o,"ButtonMax");}
              xywh {550 260 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button(o,"ButtonMax");}
            }
            Fl_Box i_max_image {
              callback {get_button_inactive(o,"ButtonMax");}
              xywh {585 260 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button_inactive(o,"ButtonMax");}
            }
            Fl_Button {} {
              label {Minimize Button}
              callback {choose_button("ButtonMin");}
              tooltip {Choose an image (XBM) for the Minimize button} xywh {395 305 145 25} box GTK_UP_BOX align 256
            }
            Fl_Box min_image {
              callback {get_button(o,"ButtonMin");}
              xywh {550 300 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button(o,"ButtonMin");}
            }
            Fl_Box i_min_image {
              callback {get_button_inactive(o,"ButtonMin");}
              xywh {585 300 30 30} box GTK_DOWN_BOX color 43 when 6
              code0 {get_button_inactive(o,"ButtonMin");}
            }
          }
          Fl_Group {} {
            label Settings open
            xywh {100 45 525 305}
          } {
            Fl_Slider b_slider {
              label {Size of the Window Frame}
              callback {border_modifier(o,b_slider_v,2);}
              tooltip {This makes the edges of the window larger or smaller to help you grab them more easily} xywh {325 95 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 1 maximum 28 step 1 value 4
              code0 {flWindow w;}
              code1 {int x = w.getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Input b_slider_v {
              label pixels
              callback {border_modifier(b_slider,o,1);}
              xywh {460 95 31 25} box GTK_DOWN_BOX labelsize 10 align 8 when 3
              code0 {int v = b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(t_slider,t_slider_v,2);}
              tooltip {This is the top with the program name, and close button, etc..} xywh {325 65 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 2 maximum 78 step 1 value 20
              code0 {flWindow w;}
              code1 {int y = w.getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Input t_slider_v {
              label pixels
              callback {title_bar_modifier(t_slider,t_slider_v,1);}
              xywh {460 65 31 25} box GTK_DOWN_BOX labelsize 10 align 8 when 3
              code0 {int v = t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Menu_Button resize_menu {
              label {Appearance of the Window while Resizing} open
              tooltip {What the windows look like while resizing} xywh {170 125 325 25} box GTK_UP_BOX color 48 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {flWindow w;
const char *mode ="opaque";
w.setResize(mode);}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {flWindow w;
const char *mode ="outline";
w.setResize(mode);}
                xywh {5 5 100 20}
              }
            }
            Fl_Menu_Button move_menu {
              label {Appearance of Window while Moving} open
              tooltip {What the windows look like while moving} xywh {180 160 305 25} box GTK_UP_BOX color 48 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {flWindow w;
const char *mode ="opaque";
w.setMoveMode(mode);}
                xywh {20 20 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {flWindow w;
const char *mode ="outline";
w.setMoveMode(mode);}
                xywh {15 15 100 20}
              }
            }
            Fl_Menu_Button snap_menu {
              label {Choose what the Windows will snap to} open
              tooltip {This determines how windows 'Snap' to other windows, and screen edges} xywh {180 195 310 25} box GTK_UP_BOX color 48 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {The Screen's Edges}
                callback {flWindow w;
int i = snap_int->value();
const char *mode ="screen";
w.setSnap(mode,i);}
                xywh {40 40 100 20}
              }
              MenuItem {} {
                label {The Border of other Windows}
                callback {flWindow w;
int i = snap_int->value();
const char *mode ="border";
w.setSnap(mode,i);}
                xywh {50 50 100 20}
              }
              MenuItem {} {
                label {No snapping}
                callback {flWindow w;
int i = 0;
const char *mode ="none";
w.setSnap(mode,i);}
                xywh {50 50 100 20}
              }
            }
            Fl_Value_Input snap_int {
              label {How close (in pixels) does the window need to be to snap?}
              callback {flWindow w;
int d = o->value();
w.setSnap(d);}
              xywh {185 225 30 25} box GTK_DOWN_BOX labelsize 10 align 8 when 3 minimum 1 maximum 32 step 1 value 5
              code0 {flWindow w;}
              code1 {int value = w.getSnap();}
              code2 {o->value(value);}
            }
            Fl_Menu_Button focus_menu {
              label {Choose how the Window comes to the front of the screen} open
              tooltip {This determines how windows are brought to the front} xywh {115 255 450 25} box GTK_UP_BOX color 48 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {By Clicking on it}
                callback {flWindow w;
const char *mode ="click";
w.setFocusModel(mode);}
                xywh {30 30 100 20}
              }
              MenuItem {} {
                label {By moving the mouse over it}
                callback {flWindow w;
const char *mode ="sloppy";
w.setFocusModel(mode);}
                xywh {25 25 100 20}
              }
            }
            Fl_Slider corner_slider {
              label {Size of Corner}
              callback {corner_change(o);}
              tooltip {This changes the curvature of the window's corners} xywh {330 300 60 25} type Horizontal box GTK_DOWN_BOX color 41 align 4 maximum 5 step 1 value 4
              code0 {corner_load(o);}
            }
          }
          Fl_Group {} {
            label Advanced
            xywh {70 50 565 295} hide
          } {
            Fl_Slider a_b_slider {
              label {Window Border Size}
              callback {//flWindow w;
border_modifier(o,a_b_slider_v);

//int x_cb = o->value();
//a_b_slider_v->value(x_cb);
//setBorderWidth(x_cb);}
              tooltip {Width of the window borders} xywh {270 155 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 1 maximum 128 step 1 value 4
              code0 {flWindow w;}
              code1 {int x = w.getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Output a_b_slider_v {
              label pixels
              xywh {400 155 35 25} box GTK_DOWN_BOX labelsize 10 align 8 when 3
              code0 {int v = a_b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider a_t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(a_t_slider,a_t_slider_v);}
              tooltip {Height of the Window's Title Bar} xywh {270 195 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 2 maximum 256 step 1 value 20
              code0 {flWindow w;}
              code1 {int y = w.getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Output a_t_slider_v {
              label pixels
              xywh {400 195 35 25} box GTK_DOWN_BOX labelsize 10 align 8 when 3
              code0 {int v = a_t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Box {} {
              label {This can make your window borders and Title bar}
              xywh {150 90 355 15}
            }
            Fl_Box {} {
              label {REALLY HUGE!}
              xywh {195 105 250 50} labelfont 1 labelsize 24
            }
          }
          Fl_Group {} {
            label Groups open
            xywh {25 50 655 305} hide
          } {
            Fl_Browser groups_browser {
              label {Current Groups}
              callback {populate_groups();}
              tooltip {Program groups allow one to specify options which apply to a group of programs by their name and/or class. A program group is created with the Group tag. As many program groups can be created as desired.} xywh {80 95 85 155} type Hold box GTK_DOWN_BOX align 1
              code0 {flWindow win;}
              code1 {win.getGroups(o);}
            }
            Fl_Button group_add {
              label {@+}
              callback {flWindow win;
win.addGroup();

win.getGroups(groups_browser);}
              xywh {80 260 35 30} box GTK_UP_BOX
            }
            Fl_Button rm_group {
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{
 flWindow win;
  win.removeGroup(hidethis);
  win.getGroups(groups_browser);
}}
              image {custom_buttons/minus} xywh {120 260 35 30} box GTK_UP_BOX
            }
            Fl_Browser opt_browser {
              label {Current Options}
              xywh {203 95 120 155} type Hold box GTK_DOWN_BOX align 1
            }
            Fl_Button opt_add {
              label {@+}
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{
const char* value = groups_browser->text(hidethis);
add_option_window()->show();
options_desc->copy_label(value);
}}
              xywh {203 260 35 30} box GTK_UP_BOX
            }
            Fl_Button rm_opt {
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{
 int testthis = opt_browser->value();
  if ((testthis == 0) ||
     (testthis > opt_browser->size())){return;}
  else{
    flWindow win;
    const char* value = opt_browser->text(testthis);
    win.removeGroupItem(hidethis,value);
    return;
 }
}
populate_groups();}
              image {custom_buttons/minus} xywh {245 260 35 30} box GTK_UP_BOX deactivate
            }
            Fl_Browser name_browser {
              label {Program Name}
              xywh {346 95 115 155} type Hold box GTK_DOWN_BOX align 1
            }
            Fl_Button prog_add {
              label {@+}
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{add_program_window()->show();}}
              xywh {346 260 35 30} box GTK_UP_BOX
            }
            Fl_Button rm_prog {
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{
  int testthis = name_browser->value();
  if ((testthis == 0) ||
     (testthis > name_browser->size())){return;}
  else{
    flWindow win;
    const char* value = name_browser->text(testthis);
    win.removeGroupProgram(hidethis,value);
 }
}
populate_groups();}
              image {custom_buttons/minus} xywh {390 260 35 30} box GTK_UP_BOX deactivate
            }
            Fl_Browser class_browser {
              label {Window Class}
              xywh {485 95 115 155} type Hold box GTK_DOWN_BOX align 1
            }
            Fl_Button class_add {
              label {@+}
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{add_class_window()->show();}}
              xywh {485 260 35 30} box GTK_UP_BOX
            }
            Fl_Button rm_class {
              callback {int hidethis = groups_browser->value();
if ((hidethis == 0) || (hidethis > groups_browser->size())){return;}
else{
  int testthis = class_browser->value();
  if ((testthis == 0) ||
     (testthis > class_browser->size())){return;}
  else{
    flWindow win;
    const char* value = class_browser->text(testthis);
    win.removeGroupClass(hidethis,value);
 }
}
populate_groups();}
              image {custom_buttons/minus} xywh {525 260 35 30} box GTK_UP_BOX deactivate
            }
          }
        }
      }
    }
  }
  Function {active_color_loader(Fl_Button *o, int one_or_two)} {} {
    code {flWindow w;
unsigned int color=0;
unsigned int c = w.getActiveWindowColor(color);
if(one_or_two ==1){o->color(c);}
else{o->color(color);}} {}
  }
  Function {add_option_to_group()} {open
  } {
    code {int line =options_available->value();
if((line == 0)||(line>options_available->size())){return;}
else{
  std::string group = options_desc->label();
  unsigned int found = group.find_first_of(' ');
  group = group.substr(found+1,std::string::npos);
  unsigned int whichGroup = convert(group.c_str());
  std::string val = options_available->text(line);
  std::string thisitem;
  std::string result = val;
  if(result.compare("")==0){return;}
  
  if(val.compare("icon:")==0){
    thisitem=icon_value->value();
    if(thisitem.compare("")==0){return;}
  }
  else if(val.compare("desktop:")==0){
    thisitem=convert(desktop_num->value());
    result+=thisitem;
    if(thisitem.compare("")==0){return;}
  }
  else if(val.compare("layer:")==0){
    thisitem=layer_value->value();
    result+=thisitem;
    if(thisitem.compare("")==0){return;}
  }
  else if(val.compare("opacity:")==0){
    thisitem = convert(opacity_value->value());
    result+=thisitem;
    if(thisitem.compare("")==0){return;}
  }
  const char* itemName = result.c_str();
  add_tracker->add(itemName);
  flWindow win;
  win.addGroupItem( whichGroup, itemName);
}} {}
  }
  Function {add_class()} {open
  } {
    code {const char* input = input_to_add_class->value();
unsigned int line = groups_browser->value();
flWindow win;
win.addGroupClass(line,input);} {}
  }
  Function {add_prog()} {} {
    code {const char* input = input_to_add_prog->value();
unsigned int line = groups_browser->value();
flWindow win;
win.addGroupProgram(line,input);} {}
  }
  Function {border_color_loader(Fl_Widget *o, int Active1_Inactive2)} {} {
    code {flWindow window;
    loadTemp();
unsigned int colour=0;
if (Active1_Inactive2==1){colour= window.getActiveBorderColor();}
else{colour = window.getBorderColor();}
o->color(colour);} {}
  }
  Function {border_modifier(Fl_Slider *o1, Fl_Value_Input *o2, int change_o1_or_o2)} {} {
    code {flWindow window;
int whichone = 0;
if(change_o1_or_o2==1){
  int input = o2->value();
  o1->value(input);
  whichone = input;
}
else{
  int slider = o1->value();
  o2->value(slider);
  whichone = slider;
}
window.setBorderWidth(whichone);} {}
  }
  Function {border_modifier(Fl_Slider *o1, Fl_Value_Output *o2)} {} {
    code {flWindow window;
int slider = o1->value();
o2->value(slider);
window.setBorderWidth(slider);} {}
  }
  Function {check_opts(const char* itemValue)} {} {
    code {std::string val = itemValue;
desktop_num->deactivate();
layer_value->deactivate();
opacity_value->deactivate();
icon_value->deactivate();
layer_chooser->deactivate();
if(val.compare("icon:")==0){
  icon_value->activate();
}
else if(val.compare("desktop:")==0){
  desktop_num->activate();
}
else if(val.compare("layer:")==0){
  layer_value->activate();
  layer_chooser->activate();
}
else if(val.compare("opacity:")==0){
  opacity_value->activate();
}} {}
  }
  Function {choose_button(const char* whichButton)} {} {
    code {flWindow w;
std::string label = "Choose ";
label += whichButton;
std::string tempPath = w.buttonPath();
const char *path = tempPath.c_str();
const char * f = path;
const char * m=label.c_str();
const char * p="*.{xbm,XBM,png,PNG,svg,SVG}";

Fl_Native_File_Chooser fnfc;
fnfc.title(m);
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter(p);
fnfc.directory(f); // default directory to use
// Show native chooser
switch ( fnfc.show() ){
  case -1:
//     printf("ERROR: %s\\n", fnfc.errmsg());
     break; // ERROR
  case 1:
//    printf("CANCEL\\n");
    break; // CANCEL
  default:
    const char *result =fnfc.filename();
    if(result!=NULL){w.setButton(result,whichButton);}
    break; // FILE CHOSEN
}} {}
  }
  Function {corner_load(Fl_Slider *o)} {open
  } {
    code {flWindow win;
if(!newStyle()){o->hide();}
else{
  unsigned int corner = win.getCorner();
  o->value(corner);
}} {}
  }
  Function {corner_change(Fl_Slider *o)} {open
  } {
    code {flWindow win;
if(!newStyle()){o->hide();}
else{
  unsigned int corner =o->value();
  win.setCorner(corner);
}} {selected
    }
  }
  Function {display(const char* filename, Fl_Widget *o)} {} {
    code {std::string extention, filenameStr;
filenameStr = filename;
extention = filenameStr.substr((strlen(filename)-4),4);
std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
Fl_Image* image;
std::string png =".png";
std::string xpm =".xpm";
if (extention.compare(png) ==0){
	image = new Fl_PNG_Image(filename);
	Fl_Image * image2 = image->copy(12,12);
	o->image(image2);
	o->redraw();
}
else if(extention.compare(xpm) ==0){
	image = new Fl_XPM_Image(filename);
	Fl_Image * image2 = image->copy(12,12);
	o->image(image2);
	o->redraw();
}} {}
  }
  Function {font_color_loader(Fl_Widget *o, int Active1_Inactive2)} {} {
    code {flWindow window;
unsigned int colour=0;
if (Active1_Inactive2==1){colour= window.getActiveFontColor();}
else{colour = window.getFontColor();}
o->color(colour);} {}
  }
  Function {get_button(Fl_Widget*o, const char* whichElement)} {} {
    code {flWindow w;
    loadTemp();
o->color(a_title_color1->color());
o->labelcolor(a_font_color->color());
const char * result = w.getButton(whichElement);
//std::cout<<result<<std::endl;
std::string test_result=result;
if(test_result.compare("x")!=0){display(result,o);}
o->redraw();} {}
  }
  Function {get_button_inactive(Fl_Widget*o, const char* whichElement)} {} {
    code {flWindow w;
    loadTemp();
o->color(inactive_color->color());
o->labelcolor(inactive_font_color->color());
const char * result = w.getButton(whichElement);
//std::cout<<result<<std::endl;
std::string test_result=result;
if(test_result.compare("x")!=0){display(result,o);}
o->redraw();} {}
  }
  Function {inactive_color_loader(Fl_Button *o, int one_or_two)} {} {
    code {flWindow w;
unsigned int color=0;
unsigned int c = w.getWindowColor(color);
if(one_or_two ==1){o->color(c);}
else{o->color(color);}} {}
  }
  Function {opacity_loader(Fl_Slider *o, int Active1_Inactive2)} {} {
    code {flWindow window;
float opacity;
if (Active1_Inactive2==1){opacity= window.getActiveOpacity();}
else{opacity = window.getOpacity();}
o->value(opacity);} {}
  }
  Function {populate_groups()} {open
  } {
    code {int line = groups_browser->value();
if ((line == 0) || (line > groups_browser->size())){
  opt_browser->clear();
  class_browser->clear();
  name_browser->clear();
}
else{
  flWindow win;
  win.getGroupClasses(class_browser,line);
  win.getGroupItems(opt_browser,line);
  win.getGroupPrograms(name_browser,line);
}} {}
  }
  Function {set_border_color(Fl_Widget *o, int Active1_Inactive2)} {} {
    code {flWindow w;
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;
unsigned int current;
if(c!=0){
  if (Active1_Inactive2==1){
	current = w.getActiveBorderColor();
	w.setActiveBorderColor(colors);
  }
  else{
	current = w.getBorderColor();
	w.setBorderColor(colors);
  }
  o->color(current);
  o->redraw();
}} {}
  }
  Function {set_font_color(Fl_Widget *o, int Active1_Inactive2)} {} {
    code {flWindow w;
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;
unsigned int current;
if(c!=0){
if (Active1_Inactive2==1){
	w.setActiveFontColor(colors);
	current = w.getActiveFontColor();
}
else{
	w.setFontColor(colors);
	current = w.getFontColor();
}
	o->color(current);
	o->redraw();
}} {}
  }
  Function {set_one_title_color(Fl_Widget *o, Fl_Widget *o2, int Active1_Inactive2)} {} {
    code {flWindow w;
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);
int c;
const char * label ="choose";
c= fl_color_chooser(label,r,g,b,2);
double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;

uchar r2;
uchar g2;
uchar b2;

Fl::get_color((o2->color()),r2,g2,b2);
double*colors2 = new double[4];
colors2[0] = int(r2); 
colors2[1] = int(g2);
colors2[2] = int(b2);
colors2[3] = 0;

unsigned int unusedColor;
unsigned int colorSet;
if(c!=0){ //If color chooser isn't canceled... do stuff
  if(Active1_Inactive2 ==1){
	w.setActiveWindowColor(colors, colors2);
	colorSet = w.getActiveWindowColor(unusedColor);
	get_button(max_a_image,"ButtonMaxActive");
	get_button(max_image,"ButtonMax");
	get_button(min_image,"ButtonMin");
	get_button(close_image,"ButtonClose");
  }
  else{
	w.setWindowColor(colors, colors2);
	colorSet = w.getWindowColor(unusedColor);
	get_button_inactive(i_max_a_image,"ButtonMaxActive");
	get_button_inactive(i_max_image,"ButtonMax");
	get_button_inactive(i_min_image,"ButtonMin");
	get_button_inactive(i_close_image,"ButtonClose");
  }
  o->color(colorSet);
  o->redraw();
}} {}
  }
  Function {set_opacity(Fl_Slider *o, Fl_Value_Input *o2, int Active1_or_Inactive2)} {} {
    code {flWindow w;
float opacity=o->value();
if (Active1_or_Inactive2==1){w.activeWindowOpacity(opacity);}
else{w.windowOpacity(opacity);}
o2->value(opacity*100);} {}
  }
  Function {set_two_title_colors(Fl_Widget *o, Fl_Widget *o2, int Active1_Inactive2)} {} {
    code {flWindow w;
uchar r;
uchar g;
uchar b;
Fl::get_color((o->color()),r,g,b);

double* colors = new double[4];
colors[0] = int(r); 
colors[1] = int(g);
colors[2] = int(b);
colors[3] = 0;

uchar r2;
uchar g2;
uchar b2;
Fl::get_color((o2->color()),r2,g2,b2);

int c2;
const char * label ="choose";
c2= fl_color_chooser(label,r2,g2,b2,2);

double*colors2 = new double[4];
colors2[0] = int(r2); 
colors2[1] = int(g2);
colors2[2] = int(b2);
colors2[3] = 0;
unsigned int unusedColor;
unsigned int colorSet;

if (c2!=0){ //If the user doesn't cancel do stuff
//Otherwise you will get weird colors
  if(Active1_Inactive2 ==1){
	w.setActiveWindowColor(colors, colors2);
	colorSet = w.getActiveWindowColor(unusedColor);
  }
  else{
	w.setWindowColor(colors, colors2);
	colorSet = w.getWindowColor(unusedColor);
  }
  o->color(colorSet);
  o->redraw();
  o2->color(unusedColor);
  o2->redraw();
}} {}
  }
  Function {title_bar_modifier(Fl_Slider *o1, Fl_Value_Output *o2)} {} {
    code {flWindow window;
int slider = o1->value();
o2->value(slider);
window.setBorderHeight(slider);} {}
  }
  Function {title_bar_modifier(Fl_Slider *o1, Fl_Value_Input *o2, int change_o1_or_o2)} {} {
    code {flWindow window;
int whichone = 0;
if(change_o1_or_o2==1){
  int input = o2->value();
  o1->value(input);
  whichone = input;
}
else{
  int slider = o1->value();
  o2->value(slider);
  whichone = slider;
}
window.setBorderHeight(whichone);} {}
  }
} 
