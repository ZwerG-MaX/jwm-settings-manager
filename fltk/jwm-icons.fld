# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/flIcons.h"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include "../data/icons/jsm-icons.xpm"} {public global
} 

class IconsUI {open : {public Config}
} {
  Function {make_window()} {open
  } {
    code {load();
saveChangesTemp();} {}
    Fl_Window icons_window {
      label Icons open
      xywh {525 244 330 295} type Double color 31 hide resizable
      code0 {startup(o);} xclass {jsm-icons}
    } {
      Fl_Scroll {} {open
        xywh {0 0 330 290} color 31
      } {
        Fl_Button {} {
          label Cancel
          callback {cancel(icons_window);
UI ux;
ux.showSettings();}
          xywh {205 245 57 25} box GTK_UP_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {saveJWMRC(icons_window);
UI ux;
ux.showSettings();}
          tooltip {Write to configuration file} xywh {271 245 45 25} box GTK_UP_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Button {} {
          label {@+}
          callback {std::string icon_choice = choose_icons();
std::cout<<"chose: "<<icon_choice<<std::endl;
if(icon_choice.compare("")==0){add_icons(icon_choice);}}
          tooltip {Add the chosen icon path} xywh {10 240 35 35} box GTK_UP_BOX selection_color 47 hide deactivate
        }
        Fl_Browser iconsBrowser {
          callback {flIcons icons;
icons.useTheme(o);}
          xywh {10 15 310 220} type Select box GTK_DOWN_BOX selection_color 80 when 8
          code0 {flIcons icons;}
          code1 {//icons.getIcons(iconsBrowser);}
          code2 {icons.loadTheme(iconsBrowser);}
        }
        Fl_Button {} {
          callback {remove_icons();}
          image {custom_buttons/minus} xywh {50 240 35 35} box GTK_UP_BOX align 256 hide deactivate
        }
      }
    }
  }
  Function {add_icons(std::string icon_dir)} {open
  } {
    code {flIcons icons;
if(icon_dir.compare("")!=0){
	iconsBrowser->clear();
	icons.addIcons(icon_dir);//input);
	icons.getIcons(iconsBrowser);
	iconsBrowser->redraw();
}
else{
	fl_message("You have to select a directory to add, or type one in!");
}} {}
  }
  Function {remove_icons()} {open
  } {
    code {flIcons icons;
int item_list_number = iconsBrowser->value();
const char * item = iconsBrowser->text(item_list_number);
std::string test_item = item;
if (test_item.compare("") !=0){
	iconsBrowser->clear();
	icons.removeIcons(item);
	icons.getIcons(iconsBrowser);
	iconsBrowser->redraw();
}
else{
	fl_message("Please click on an item to remove!");
}} {}
  }
  Function {choose_icons()} {open return_type {std::string}
  } {
    code {const char * f = "/usr/share/icons/";
const char * m="Choose a Directory";
int r = 0;
std::string result_string = fl_dir_chooser(m,f,r);
return result_string;} {}
  }
  Function {startup(Fl_Window *o)} {open
  } {
    code {Config config; config.under_mouse(o);
o->icon(config.Get_Fl_Icon(jsm_icons_xpm));} {selected
    }
  }
} 
