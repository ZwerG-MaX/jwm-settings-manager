# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/flIcons.h"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

class IconsUI {open
} {
  Function {make_window()} {open
  } {
    Fl_Window icons_window {
      label Icons open
      xywh {228 148 390 405} type Double color 31 hide resizable
    } {
      Fl_Scroll {} {open
        xywh {0 0 390 405} color 31
      } {
        Fl_Box {} {
          label Icons
          image {../data/img/jsm-icons.png} xywh {105 10 170 65} labelfont 1 labelsize 18 labelcolor 35 align 288
        }
        Fl_Input icon_set {
          tooltip {The Icons path!} xywh {70 315 150 25} box GTK_DOWN_BOX align 1 when 8
        }
        Fl_Button {} {
          label {Choose Icon Directory}
          callback {const char * f = "/usr/share/icons/";
const char * m="Choose a Directory";
int r = 0;
const char *result = fl_dir_chooser(m,f,r);
if(result!=NULL){
	std::string String = result;
	result = String.c_str();
	icon_set->value(result);
}}
          tooltip {Choose a SPECIFIC directory to add} xywh {110 275 170 25} box GTK_UP_BOX
        }
        Fl_Button {} {
          label Cancel
          callback {flIcons icons;icons.cancel();
icons_window->hide();
UI ux;
ux.showSettings();} selected
          xywh {260 355 57 25} box GTK_UP_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {flIcons icons;icons.loadTemp();
icons.saveChanges();
icons_window->hide();
UI ux;
ux.showSettings();}
          tooltip {Write to configuration file} xywh {326 355 45 25} box GTK_UP_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Button {} {
          label {@+  Add}
          callback {flIcons icons;icons.loadTemp();
const char * input = icon_set->value();
if(input!=NULL){
	iconsBrowser->clear();
	icons.addIcons(input);
	icons.getIcons(iconsBrowser);
	iconsBrowser->redraw();
}
else{
	fl_message("You have to select a directory to add, or type one in!");
}}
          tooltip {Add the chosen icon path} xywh {236 315 70 25} box GTK_UP_BOX selection_color 47
        }
        Fl_Browser iconsBrowser {
          xywh {40 75 310 150} box GTK_DOWN_BOX selection_color 80
          code0 {flIcons icons;icons.loadTemp();o->type(FL_SELECT_BROWSER);}
          code1 {icons.getIcons(iconsBrowser);}
        }
        Fl_Button {} {
          label {Remove Selected Item}
          callback {flIcons icons;icons.loadTemp();
const char * item = iconsBrowser->text(iconsBrowser->value());
if (item !=NULL){
	iconsBrowser->clear();
	icons.removeIcons(item);
	icons.getIcons(iconsBrowser);
	iconsBrowser->redraw();
}
else{
	fl_message("Please click on an item to remove!");
}}
          xywh {105 230 175 25}
        }
        Fl_Button {} {
          label {@<-  Main Settings Window}
          callback {flIcons icons;icons.cancel();
icons_window->hide();
UI ux;
ux.showSettings();}
          xywh {20 355 185 25} box GTK_UP_BOX
        }
      }
    }
  }
} 
