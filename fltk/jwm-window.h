/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef jwm_window_h
#define jwm_window_h
#include <FL/Fl.H>
#include <libintl.h>
#include <string>
#include <stdlib.h>
#include <iostream>
#include "../include/jwmrc.hpp"
#include "../include/window.hpp"
#include "../data/icons/jsm-windows.xpm"
#include "../include/ui.hpp"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Output.H>

class WindowUI : public JSM_Window {
  int JWMVERSION; 
public:
  Fl_Double_Window* add_option_window();
  Fl_Double_Window *add_opt_window;
  Fl_Browser *options_available;
private:
  inline void cb_options_available_i(Fl_Browser*, void*);
  static void cb_options_available(Fl_Browser*, void*);
public:
  Fl_Browser *options_desc;
  Fl_Input *icon_value;
  Fl_Slider *opacity_value;
  Fl_Value_Input *desktop_num;
private:
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Menu_Button *layer_chooser;
  static unsigned char menu_layer_chooser_i18n_done;
  static Fl_Menu_Item menu_layer_chooser[];
private:
  inline void cb_below_i(Fl_Menu_*, void*);
  static void cb_below(Fl_Menu_*, void*);
  inline void cb_normal_i(Fl_Menu_*, void*);
  static void cb_normal(Fl_Menu_*, void*);
  inline void cb_above_i(Fl_Menu_*, void*);
  static void cb_above(Fl_Menu_*, void*);
public:
  Fl_Output *layer_value;
private:
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
public:
  Fl_Double_Window* add_class_window();
  Fl_Double_Window *class_win;
  Fl_Input *input_to_add_class;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
public:
  Fl_Double_Window* add_program_window();
  Fl_Double_Window *prog_win;
  Fl_Input *input_to_add_prog;
private:
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
  inline void cb_Program_i(Fl_Button*, void*);
  static void cb_Program(Fl_Button*, void*);
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *window_window;
  Fl_Button *a_title_color1;
private:
  inline void cb_a_title_color1_i(Fl_Button*, void*);
  static void cb_a_title_color1(Fl_Button*, void*);
public:
  Fl_Button *a_title_color2;
private:
  inline void cb_a_title_color2_i(Fl_Button*, void*);
  static void cb_a_title_color2(Fl_Button*, void*);
public:
  Fl_Button *a_font_color;
private:
  inline void cb_a_font_color_i(Fl_Button*, void*);
  static void cb_a_font_color(Fl_Button*, void*);
public:
  Fl_Button *a_border_color;
private:
  inline void cb_a_border_color_i(Fl_Button*, void*);
  static void cb_a_border_color(Fl_Button*, void*);
public:
  Fl_Slider *active_o_slider;
private:
  inline void cb_active_o_slider_i(Fl_Slider*, void*);
  static void cb_active_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *active_o_slider_v;
private:
  inline void cb_active_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_active_o_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Button *inactive_color;
private:
  inline void cb_inactive_color_i(Fl_Button*, void*);
  static void cb_inactive_color(Fl_Button*, void*);
public:
  Fl_Button *inactive_color2;
private:
  inline void cb_inactive_color2_i(Fl_Button*, void*);
  static void cb_inactive_color2(Fl_Button*, void*);
public:
  Fl_Button *inactive_font_color;
private:
  inline void cb_inactive_font_color_i(Fl_Button*, void*);
  static void cb_inactive_font_color(Fl_Button*, void*);
public:
  Fl_Button *inactive_border_color;
private:
  inline void cb_inactive_border_color_i(Fl_Button*, void*);
  static void cb_inactive_border_color(Fl_Button*, void*);
public:
  Fl_Slider *inactive_o_slider;
private:
  inline void cb_inactive_o_slider_i(Fl_Slider*, void*);
  static void cb_inactive_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *inactive_o_slider_v;
private:
  inline void cb_inactive_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_inactive_o_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Button *max_a_image;
private:
  inline void cb_max_a_image_i(Fl_Button*, void*);
  static void cb_max_a_image(Fl_Button*, void*);
public:
  Fl_Button *max_image;
private:
  inline void cb_max_image_i(Fl_Button*, void*);
  static void cb_max_image(Fl_Button*, void*);
public:
  Fl_Button *min_image;
private:
  inline void cb_min_image_i(Fl_Button*, void*);
  static void cb_min_image(Fl_Button*, void*);
public:
  Fl_Button *close_image;
private:
  inline void cb_close_image_i(Fl_Button*, void*);
  static void cb_close_image(Fl_Button*, void*);
public:
  Fl_Button *inactive_border_color2;
private:
  inline void cb_inactive_border_color2_i(Fl_Button*, void*);
  static void cb_inactive_border_color2(Fl_Button*, void*);
public:
  Fl_Button *a_border_color2;
private:
  inline void cb_a_border_color2_i(Fl_Button*, void*);
  static void cb_a_border_color2(Fl_Button*, void*);
public:
  Fl_Button *button_order;
private:
  inline void cb_button_order_i(Fl_Button*, void*);
  static void cb_button_order(Fl_Button*, void*);
public:
  Fl_Slider *t_slider;
private:
  inline void cb_t_slider_i(Fl_Slider*, void*);
  static void cb_t_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *t_slider_v;
private:
  inline void cb_t_slider_v_i(Fl_Value_Input*, void*);
  static void cb_t_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Slider *b_slider;
private:
  inline void cb_b_slider_i(Fl_Slider*, void*);
  static void cb_b_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *b_slider_v;
private:
  inline void cb_b_slider_v_i(Fl_Value_Input*, void*);
  static void cb_b_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Menu_Button *focus_menu;
  static unsigned char menu_focus_menu_i18n_done;
  static Fl_Menu_Item menu_focus_menu[];
private:
  inline void cb_Click_i(Fl_Menu_*, void*);
  static void cb_Click(Fl_Menu_*, void*);
  inline void cb_Mouse_i(Fl_Menu_*, void*);
  static void cb_Mouse(Fl_Menu_*, void*);
  inline void cb_Click1_i(Fl_Menu_*, void*);
  static void cb_Click1(Fl_Menu_*, void*);
  inline void cb_Mouse1_i(Fl_Menu_*, void*);
  static void cb_Mouse1(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *resize_menu;
  static unsigned char menu_resize_menu_i18n_done;
  static Fl_Menu_Item menu_resize_menu[];
private:
  inline void cb_Make_i(Fl_Menu_*, void*);
  static void cb_Make(Fl_Menu_*, void*);
  inline void cb_Show_i(Fl_Menu_*, void*);
  static void cb_Show(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *move_menu;
  static unsigned char menu_move_menu_i18n_done;
  static Fl_Menu_Item menu_move_menu[];
private:
  inline void cb_Make1_i(Fl_Menu_*, void*);
  static void cb_Make1(Fl_Menu_*, void*);
  inline void cb_Show1_i(Fl_Menu_*, void*);
  static void cb_Show1(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *snap_menu;
  static unsigned char menu_snap_menu_i18n_done;
  static Fl_Menu_Item menu_snap_menu[];
private:
  inline void cb_The_i(Fl_Menu_*, void*);
  static void cb_The(Fl_Menu_*, void*);
  inline void cb_The1_i(Fl_Menu_*, void*);
  static void cb_The1(Fl_Menu_*, void*);
  inline void cb_No_i(Fl_Menu_*, void*);
  static void cb_No(Fl_Menu_*, void*);
public:
  Fl_Value_Input *snap_int;
private:
  inline void cb_snap_int_i(Fl_Value_Input*, void*);
  static void cb_snap_int(Fl_Value_Input*, void*);
public:
  Fl_Slider *corner_slider;
private:
  inline void cb_corner_slider_i(Fl_Slider*, void*);
  static void cb_corner_slider(Fl_Slider*, void*);
public:
  Fl_Browser *groups_browser;
private:
  inline void cb_groups_browser_i(Fl_Browser*, void*);
  static void cb_groups_browser(Fl_Browser*, void*);
public:
  Fl_Button *group_add;
private:
  inline void cb_group_add_i(Fl_Button*, void*);
  static void cb_group_add(Fl_Button*, void*);
public:
  Fl_Button *rm_group;
private:
  inline void cb_rm_group_i(Fl_Button*, void*);
  static void cb_rm_group(Fl_Button*, void*);
public:
  Fl_Browser *opt_browser;
  Fl_Button *opt_add;
private:
  inline void cb_opt_add_i(Fl_Button*, void*);
  static void cb_opt_add(Fl_Button*, void*);
public:
  Fl_Button *rm_opt;
private:
  inline void cb_rm_opt_i(Fl_Button*, void*);
  static void cb_rm_opt(Fl_Button*, void*);
public:
  Fl_Browser *name_browser;
  Fl_Button *prog_add;
private:
  inline void cb_prog_add_i(Fl_Button*, void*);
  static void cb_prog_add(Fl_Button*, void*);
public:
  Fl_Button *rm_prog;
private:
  inline void cb_rm_prog_i(Fl_Button*, void*);
  static void cb_rm_prog(Fl_Button*, void*);
public:
  Fl_Browser *class_browser;
  Fl_Button *class_add;
private:
  inline void cb_class_add_i(Fl_Button*, void*);
  static void cb_class_add(Fl_Button*, void*);
public:
  Fl_Button *rm_class;
private:
  inline void cb_rm_class_i(Fl_Button*, void*);
  static void cb_rm_class(Fl_Button*, void*);
public:
  Fl_Slider *a_b_slider;
private:
  inline void cb_a_b_slider_i(Fl_Slider*, void*);
  static void cb_a_b_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *a_b_slider_v;
  Fl_Slider *a_t_slider;
private:
  inline void cb_a_t_slider_i(Fl_Slider*, void*);
  static void cb_a_t_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *a_t_slider_v;
  Fl_Input *default_icon;
  Fl_Button *default_icon_button;
private:
  inline void cb_default_icon_button_i(Fl_Button*, void*);
  static void cb_default_icon_button(Fl_Button*, void*);
public:
  Fl_Input *default_icon_win;
  Fl_Button *default_icon_button_win;
private:
  inline void cb_default_icon_button_win_i(Fl_Button*, void*);
  static void cb_default_icon_button_win(Fl_Button*, void*);
  static unsigned char menu_title_i18n_done;
  static Fl_Menu_Item menu_title[];
public:
  static Fl_Menu_Item *motif;
private:
  inline void cb_motif_i(Fl_Menu_*, void*);
  static void cb_motif(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *flat;
private:
  inline void cb_flat_i(Fl_Menu_*, void*);
  static void cb_flat(Fl_Menu_*, void*);
public:
  Fl_Output *decorations;
  static unsigned char menu_border_i18n_done;
  static Fl_Menu_Item menu_border[];
  static Fl_Menu_Item *motif_border;
private:
  inline void cb_motif_border_i(Fl_Menu_*, void*);
  static void cb_motif_border(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *flat_border;
private:
  inline void cb_flat_border_i(Fl_Menu_*, void*);
  static void cb_flat_border(Fl_Menu_*, void*);
public:
  Fl_Output *decorations_border;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  inline void cb_OK3_i(Fl_Button*, void*);
  static void cb_OK3(Fl_Button*, void*);
  inline void cb_Change_i(Fl_Button*, void*);
  static void cb_Change(Fl_Button*, void*);
public:
  Fl_Double_Window* make_gtk_theme_window();
  Fl_Double_Window *theme_window;
  Fl_Browser *theme_browser;
private:
  inline void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
  inline void cb_OK4_i(Fl_Button*, void*);
  static void cb_OK4(Fl_Button*, void*);
public:
  Fl_Double_Window* button_order_window();
  Fl_Double_Window *button_orderer;
  Fl_Input *ordering;
private:
  inline void cb_Cancel3_i(Fl_Button*, void*);
  static void cb_Cancel3(Fl_Button*, void*);
  inline void cb_OK5_i(Fl_Button*, void*);
  static void cb_OK5(Fl_Button*, void*);
};
#endif
