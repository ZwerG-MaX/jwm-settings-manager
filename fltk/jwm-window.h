/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#ifndef jwm_window_h
#define jwm_window_h
#include <FL/Fl.H>
#include <libintl.h>
#include <string>
#include <stdlib.h>
#include <iostream>
#include "../include/Config.h"
#include <FL/Fl_Color_Chooser.H>
#include <FL/Fl_File_Chooser.H>
#include "../include/ui.h"
#include <FL/Fl_XBM_Image.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Native_File_Chooser.H>
#include "../include/flWindow.h"
#include "../data/icons/jsm-windows.xpm"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Output.H>

class WindowUI : public Config {
public:
  Fl_Double_Window* add_option_window();
  Fl_Double_Window *add_opt_window;
  Fl_Browser *options_available;
private:
  inline void cb_options_available_i(Fl_Browser*, void*);
  static void cb_options_available(Fl_Browser*, void*);
  inline void cb_Add_i(Fl_Button*, void*);
  static void cb_Add(Fl_Button*, void*);
public:
  Fl_Browser *options_desc;
  Fl_Input *icon_value;
  Fl_Slider *opacity_value;
  Fl_Value_Input *desktop_num;
  Fl_Browser *add_tracker;
private:
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
public:
  Fl_Menu_Button *layer_chooser;
  static unsigned char menu_layer_chooser_i18n_done;
  static Fl_Menu_Item menu_layer_chooser[];
private:
  inline void cb_below_i(Fl_Menu_*, void*);
  static void cb_below(Fl_Menu_*, void*);
  inline void cb_normal_i(Fl_Menu_*, void*);
  static void cb_normal(Fl_Menu_*, void*);
  inline void cb_above_i(Fl_Menu_*, void*);
  static void cb_above(Fl_Menu_*, void*);
public:
  Fl_Output *layer_value;
  Fl_Double_Window* add_class_window();
  Fl_Double_Window *class_win;
  Fl_Input *input_to_add_class;
private:
  inline void cb_OK1_i(Fl_Button*, void*);
  static void cb_OK1(Fl_Button*, void*);
public:
  Fl_Double_Window* add_program_window();
  Fl_Double_Window *prog_win;
  Fl_Input *input_to_add_prog;
private:
  inline void cb_OK2_i(Fl_Button*, void*);
  static void cb_OK2(Fl_Button*, void*);
public:
  Fl_Double_Window* make_window();
  Fl_Double_Window *window_window;
private:
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  inline void cb_OK3_i(Fl_Button*, void*);
  static void cb_OK3(Fl_Button*, void*);
public:
  Fl_Button *a_title_color1;
private:
  inline void cb_a_title_color1_i(Fl_Button*, void*);
  static void cb_a_title_color1(Fl_Button*, void*);
public:
  Fl_Button *a_title_color2;
private:
  inline void cb_a_title_color2_i(Fl_Button*, void*);
  static void cb_a_title_color2(Fl_Button*, void*);
public:
  Fl_Button *a_font_color;
private:
  inline void cb_a_font_color_i(Fl_Button*, void*);
  static void cb_a_font_color(Fl_Button*, void*);
public:
  Fl_Button *a_border_color;
private:
  inline void cb_a_border_color_i(Fl_Button*, void*);
  static void cb_a_border_color(Fl_Button*, void*);
public:
  Fl_Slider *active_o_slider;
private:
  inline void cb_active_o_slider_i(Fl_Slider*, void*);
  static void cb_active_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *active_o_slider_v;
private:
  inline void cb_active_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_active_o_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Button *inactive_color;
private:
  inline void cb_inactive_color_i(Fl_Button*, void*);
  static void cb_inactive_color(Fl_Button*, void*);
public:
  Fl_Button *inactive_color2;
private:
  inline void cb_inactive_color2_i(Fl_Button*, void*);
  static void cb_inactive_color2(Fl_Button*, void*);
public:
  Fl_Button *inactive_font_color;
private:
  inline void cb_inactive_font_color_i(Fl_Button*, void*);
  static void cb_inactive_font_color(Fl_Button*, void*);
public:
  Fl_Button *inactive_border_color;
private:
  inline void cb_inactive_border_color_i(Fl_Button*, void*);
  static void cb_inactive_border_color(Fl_Button*, void*);
public:
  Fl_Slider *inactive_o_slider;
private:
  inline void cb_inactive_o_slider_i(Fl_Slider*, void*);
  static void cb_inactive_o_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *inactive_o_slider_v;
private:
  inline void cb_inactive_o_slider_v_i(Fl_Value_Input*, void*);
  static void cb_inactive_o_slider_v(Fl_Value_Input*, void*);
  inline void cb_Maximize_i(Fl_Button*, void*);
  static void cb_Maximize(Fl_Button*, void*);
public:
  Fl_Box *max_a_image;
private:
  inline void cb_max_a_image_i(Fl_Box*, void*);
  static void cb_max_a_image(Fl_Box*, void*);
public:
  Fl_Box *i_max_a_image;
private:
  inline void cb_i_max_a_image_i(Fl_Box*, void*);
  static void cb_i_max_a_image(Fl_Box*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Box *close_image;
private:
  inline void cb_close_image_i(Fl_Box*, void*);
  static void cb_close_image(Fl_Box*, void*);
public:
  Fl_Box *i_close_image;
private:
  inline void cb_i_close_image_i(Fl_Box*, void*);
  static void cb_i_close_image(Fl_Box*, void*);
  inline void cb_Maximize1_i(Fl_Button*, void*);
  static void cb_Maximize1(Fl_Button*, void*);
public:
  Fl_Box *max_image;
private:
  inline void cb_max_image_i(Fl_Box*, void*);
  static void cb_max_image(Fl_Box*, void*);
public:
  Fl_Box *i_max_image;
private:
  inline void cb_i_max_image_i(Fl_Box*, void*);
  static void cb_i_max_image(Fl_Box*, void*);
  inline void cb_Minimize_i(Fl_Button*, void*);
  static void cb_Minimize(Fl_Button*, void*);
public:
  Fl_Box *min_image;
private:
  inline void cb_min_image_i(Fl_Box*, void*);
  static void cb_min_image(Fl_Box*, void*);
public:
  Fl_Box *i_min_image;
private:
  inline void cb_i_min_image_i(Fl_Box*, void*);
  static void cb_i_min_image(Fl_Box*, void*);
public:
  Fl_Slider *b_slider;
private:
  inline void cb_b_slider_i(Fl_Slider*, void*);
  static void cb_b_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *b_slider_v;
private:
  inline void cb_b_slider_v_i(Fl_Value_Input*, void*);
  static void cb_b_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Slider *t_slider;
private:
  inline void cb_t_slider_i(Fl_Slider*, void*);
  static void cb_t_slider(Fl_Slider*, void*);
public:
  Fl_Value_Input *t_slider_v;
private:
  inline void cb_t_slider_v_i(Fl_Value_Input*, void*);
  static void cb_t_slider_v(Fl_Value_Input*, void*);
public:
  Fl_Menu_Button *resize_menu;
  static unsigned char menu_resize_menu_i18n_done;
  static Fl_Menu_Item menu_resize_menu[];
private:
  inline void cb_Make_i(Fl_Menu_*, void*);
  static void cb_Make(Fl_Menu_*, void*);
  inline void cb_Show_i(Fl_Menu_*, void*);
  static void cb_Show(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *move_menu;
  static unsigned char menu_move_menu_i18n_done;
  static Fl_Menu_Item menu_move_menu[];
private:
  inline void cb_Make1_i(Fl_Menu_*, void*);
  static void cb_Make1(Fl_Menu_*, void*);
  inline void cb_Show1_i(Fl_Menu_*, void*);
  static void cb_Show1(Fl_Menu_*, void*);
public:
  Fl_Menu_Button *snap_menu;
  static unsigned char menu_snap_menu_i18n_done;
  static Fl_Menu_Item menu_snap_menu[];
private:
  inline void cb_The_i(Fl_Menu_*, void*);
  static void cb_The(Fl_Menu_*, void*);
  inline void cb_The1_i(Fl_Menu_*, void*);
  static void cb_The1(Fl_Menu_*, void*);
  inline void cb_No_i(Fl_Menu_*, void*);
  static void cb_No(Fl_Menu_*, void*);
public:
  Fl_Value_Input *snap_int;
private:
  inline void cb_snap_int_i(Fl_Value_Input*, void*);
  static void cb_snap_int(Fl_Value_Input*, void*);
public:
  Fl_Menu_Button *focus_menu;
  static unsigned char menu_focus_menu_i18n_done;
  static Fl_Menu_Item menu_focus_menu[];
private:
  inline void cb_By_i(Fl_Menu_*, void*);
  static void cb_By(Fl_Menu_*, void*);
  inline void cb_By1_i(Fl_Menu_*, void*);
  static void cb_By1(Fl_Menu_*, void*);
public:
  Fl_Slider *corner_slider;
private:
  inline void cb_corner_slider_i(Fl_Slider*, void*);
  static void cb_corner_slider(Fl_Slider*, void*);
public:
  Fl_Slider *a_b_slider;
private:
  inline void cb_a_b_slider_i(Fl_Slider*, void*);
  static void cb_a_b_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *a_b_slider_v;
  Fl_Slider *a_t_slider;
private:
  inline void cb_a_t_slider_i(Fl_Slider*, void*);
  static void cb_a_t_slider(Fl_Slider*, void*);
public:
  Fl_Value_Output *a_t_slider_v;
  Fl_Browser *groups_browser;
private:
  inline void cb_groups_browser_i(Fl_Browser*, void*);
  static void cb_groups_browser(Fl_Browser*, void*);
public:
  Fl_Button *group_add;
private:
  inline void cb_group_add_i(Fl_Button*, void*);
  static void cb_group_add(Fl_Button*, void*);
public:
  Fl_Button *rm_group;
private:
  inline void cb_rm_group_i(Fl_Button*, void*);
  static void cb_rm_group(Fl_Button*, void*);
public:
  Fl_Browser *opt_browser;
  Fl_Button *opt_add;
private:
  inline void cb_opt_add_i(Fl_Button*, void*);
  static void cb_opt_add(Fl_Button*, void*);
public:
  Fl_Button *rm_opt;
private:
  inline void cb_rm_opt_i(Fl_Button*, void*);
  static void cb_rm_opt(Fl_Button*, void*);
public:
  Fl_Browser *name_browser;
  Fl_Button *prog_add;
private:
  inline void cb_prog_add_i(Fl_Button*, void*);
  static void cb_prog_add(Fl_Button*, void*);
public:
  Fl_Button *rm_prog;
private:
  inline void cb_rm_prog_i(Fl_Button*, void*);
  static void cb_rm_prog(Fl_Button*, void*);
public:
  Fl_Browser *class_browser;
  Fl_Button *class_add;
private:
  inline void cb_class_add_i(Fl_Button*, void*);
  static void cb_class_add(Fl_Button*, void*);
public:
  Fl_Button *rm_class;
private:
  inline void cb_rm_class_i(Fl_Button*, void*);
  static void cb_rm_class(Fl_Button*, void*);
public:
  void active_color_loader(Fl_Button *o, int one_or_two);
  void add_option_to_group();
  void add_class();
  void add_prog();
  void border_color_loader(Fl_Widget *o, int Active1_Inactive2);
  void border_modifier(Fl_Slider *o1, Fl_Value_Input *o2, int change_o1_or_o2);
  void border_modifier(Fl_Slider *o1, Fl_Value_Output *o2);
  void check_opts(const char* itemValue);
  void choose_button(const char* whichButton);
  void corner_load(Fl_Slider *o);
  void corner_change(Fl_Slider *o);
  void display(const char* filename, Fl_Widget *o);
  void font_color_loader(Fl_Widget *o, int Active1_Inactive2);
  void get_button(Fl_Widget*o, const char* whichElement);
  void get_button_inactive(Fl_Widget*o, const char* whichElement);
  void inactive_color_loader(Fl_Button *o, int one_or_two);
  void opacity_loader(Fl_Slider *o, int Active1_Inactive2);
  void populate_groups();
  void set_border_color(Fl_Widget *o, int Active1_Inactive2);
  void set_font_color(Fl_Widget *o, int Active1_Inactive2);
  void set_one_title_color(Fl_Widget *o, Fl_Widget *o2, int Active1_Inactive2);
  void set_opacity(Fl_Slider *o, Fl_Value_Input *o2, int Active1_or_Inactive2);
  void set_two_title_colors(Fl_Widget *o, Fl_Widget *o2, int Active1_Inactive2);
  void title_bar_modifier(Fl_Slider *o1, Fl_Value_Output *o2);
  void title_bar_modifier(Fl_Slider *o1, Fl_Value_Input *o2, int change_o1_or_o2);
  void startup(Fl_Window *o);
};
#endif
