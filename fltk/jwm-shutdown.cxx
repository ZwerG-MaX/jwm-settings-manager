/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-shutdown.h"

void shutdown::cb_shut_i(Fl_Button*, void*) {
  int warn = linuxcommon::run_a_program(SHUTDOWN);;
if(warn!=0){std::cerr<<"Could not run commang"<<std::endl;};
}
void shutdown::cb_shut(Fl_Button* o, void* v) {
  ((shutdown*)(o->parent()->user_data()))->cb_shut_i(o,v);
}

void shutdown::cb_restart_i(Fl_Button*, void*) {
  int warn = linuxcommon::run_a_program(RESTART);;
if(warn!=0){std::cerr<<"Could not run commang"<<std::endl;};
}
void shutdown::cb_restart(Fl_Button* o, void* v) {
  ((shutdown*)(o->parent()->user_data()))->cb_restart_i(o,v);
}

void shutdown::cb_suspend_i(Fl_Button*, void*) {
  int warn = linuxcommon::run_a_program(SUSPEND);;
if(warn!=0){std::cerr<<"Could not run commang"<<std::endl;};
}
void shutdown::cb_suspend(Fl_Button* o, void* v) {
  ((shutdown*)(o->parent()->user_data()))->cb_suspend_i(o,v);
}

void shutdown::cb_log_i(Fl_Button*, void*) {
  int warn = linuxcommon::run_a_program(LOGOUT);;
if(warn!=0){std::cerr<<"Could not run commang"<<std::endl;};
}
void shutdown::cb_log(Fl_Button* o, void* v) {
  ((shutdown*)(o->parent()->user_data()))->cb_log_i(o,v);
}

void shutdown::cb_can_i(Fl_Button*, void*) {
  shutdown_window->hide();
}
void shutdown::cb_can(Fl_Button* o, void* v) {
  ((shutdown*)(o->parent()->user_data()))->cb_can_i(o,v);
}

Fl_Double_Window* shutdown::make_window() {
  load();
  SUSPEND="torios-suspend||dbus-send --system --print-reply --dest=org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Suspend || systemctl suspend";
  LOGOUT="torios-exit || jwm -exit";
  SHUTDOWN="torios-shutdown || dbus-send --system --print-reply --dest=org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop || systemctl poweroff";;
  RESTART="torios-reboot || dbus-send --system --print-reply --dest=org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Restart|| systemctl reboot";
  { shutdown_window = new Fl_Double_Window(242, 230, gettext("Shutdown"));
    shutdown_window->color(FL_DARK2);
    shutdown_window->user_data((void*)(this));
    { Fl_Button* o = shut = new Fl_Button(10, 10, 105, 75, gettext("Shutdown"));
      shut->box(FL_FLAT_BOX);
      shut->color((Fl_Color)41);
      shut->labelcolor((Fl_Color)55);
      shut->callback((Fl_Callback*)cb_shut);
      makeWidgetIcon("preferences-system-session",o,48);
    } // Fl_Button* shut
    { Fl_Button* o = restart = new Fl_Button(125, 10, 105, 75, gettext("Restart"));
      restart->box(FL_FLAT_BOX);
      restart->color((Fl_Color)41);
      restart->labelcolor((Fl_Color)55);
      restart->callback((Fl_Callback*)cb_restart);
      makeWidgetIcon("system-restart",o,48);
    } // Fl_Button* restart
    { Fl_Button* o = suspend = new Fl_Button(10, 95, 105, 75, gettext("Suspend"));
      suspend->box(FL_FLAT_BOX);
      suspend->color((Fl_Color)41);
      suspend->labelcolor((Fl_Color)55);
      suspend->callback((Fl_Callback*)cb_suspend);
      makeWidgetIcon("system-suspend",o,48);
    } // Fl_Button* suspend
    { Fl_Button* o = log = new Fl_Button(125, 95, 105, 75, gettext("Logout"));
      log->box(FL_FLAT_BOX);
      log->color((Fl_Color)41);
      log->labelcolor((Fl_Color)55);
      log->callback((Fl_Callback*)cb_log);
      makeWidgetIcon("system-logout",o,48);
    } // Fl_Button* log
    { can = new Fl_Button(65, 180, 105, 45, gettext("Cancel"));
      can->box(FL_FLAT_BOX);
      can->color((Fl_Color)80);
      can->selection_color(FL_DARK_RED);
      can->labelfont(1);
      can->labelsize(15);
      can->labelcolor(FL_LIGHT2);
      can->callback((Fl_Callback*)cb_can);
    } // Fl_Button* can
    window_bg();
    shutdown_window->clear_border();
    shutdown_window->xclass("system-shutdown");
    shutdown_window->end();
  } // Fl_Double_Window* shutdown_window
  return shutdown_window;
}

void shutdown::window_bg() {
  unsigned int color=0;
  std::string menu=getElementText("MenuStyle","Background");
  color=linuxcommon::get_fl_color(menu);
  shutdown_window->color(color);
  unsigned int color2 = 0;
  std::string font = getElementText("MenuStyle","Foreground");
  color2=linuxcommon::get_fl_color(font);
  unsigned int color3 = 0;
  std::string active= getElementText("MenuStyle","Active","Background");
  color3=linuxcommon::get_fl_color(active);
  shut->color(color3);
  shut->labelcolor(color2);
  restart->color(color3);
  restart->labelcolor(color2);
  log->color(color3);
  log->labelcolor(color2);
  suspend->color(color3);
  suspend->labelcolor(color2);
  //can->color(color3);
  //can->labelcolor(color2);
  under_mouse(shutdown_window);
}
