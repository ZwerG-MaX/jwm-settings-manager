/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-fonts.h"

void FontUI::cb_active_window_font_color_button_i(Fl_Button* o, void*) {
  window_font_color(o, 1);
}
void FontUI::cb_active_window_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_active_window_font_color_button_i(o,v);
}

void FontUI::cb__i(Fl_Button*, void*) {
  currentElement = "WindowStyle";
Widget=window_font;
font_chooser_window()->show();
}
void FontUI::cb_(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_gear16[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,
2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,48,0,3,0,0,0,2,0,149,
0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,2,0,24,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,20,0,151,0,218,0,79,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,1,0,0,0,
69,0,193,0,96,0,2,0,0,0,0,0,0,0,0,0,0,0,22,0,156,0,251,0,255,0,221,0,75,0,22,0,
169,0,255,0,255,0,255,0,255,0,167,0,22,0,73,0,217,0,255,0,231,0,89,0,2,0,0,0,0,
0,0,0,24,0,162,0,252,0,255,0,255,0,255,0,224,0,199,0,245,0,255,0,255,0,255,0,
255,0,245,0,200,0,225,0,255,0,255,0,255,0,228,0,85,0,2,0,0,0,0,0,46,0,212,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,255,0,196,0,25,0,0,0,0,0,0,0,71,0,219,0,255,0,255,0,255,0,
255,0,255,0,246,0,209,0,172,0,172,0,209,0,246,0,255,0,255,0,255,0,255,0,255,0,
223,0,83,0,3,0,0,0,0,0,0,0,0,0,76,0,227,0,255,0,255,0,255,0,210,0,95,0,25,0,9,0,
10,0,25,0,95,0,210,0,255,0,255,0,255,0,225,0,77,0,1,0,0,0,0,0,2,0,2,0,0,0,23,0,
203,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,0,255,0,202,
0,23,0,0,0,2,0,2,0,147,0,149,0,148,0,169,0,246,0,255,0,246,0,94,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,169,0,148,0,149,0,147,0,254,0,255,
0,255,0,255,0,255,0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,
0,255,0,255,0,255,0,255,0,255,0,254,0,252,0,255,0,255,0,255,0,255,0,255,0,170,
0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,
252,0,252,0,255,0,255,0,255,0,255,0,255,0,170,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,252,0,254,0,255,0,255,0,255,0,255,
0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,0,255,0,255,0,255,
0,255,0,255,0,254,0,144,0,146,0,144,0,166,0,245,0,255,0,246,0,94,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,167,0,144,0,146,0,144,0,1,0,1,0,
0,0,36,0,220,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,
0,255,0,193,0,20,0,0,0,1,0,1,0,0,0,0,0,19,0,148,0,249,0,255,0,255,0,255,0,210,
0,95,0,25,0,9,0,10,0,25,0,95,0,210,0,255,0,255,0,255,0,187,0,26,0,0,0,0,0,0,0,
0,0,24,0,156,0,250,0,255,0,255,0,255,0,255,0,255,0,246,0,209,0,172,0,172,0,
209,0,246,0,255,0,255,0,255,0,255,0,253,0,162,0,23,0,0,0,0,0,0,0,96,0,246,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,253,0,142,0,6,0,0,0,0,0,22,0,158,0,252,0,255,0,255,0,250,
0,183,0,191,0,246,0,255,0,255,0,255,0,255,0,244,0,218,0,247,0,255,0,255,0,255,
0,229,0,90,0,2,0,0,0,0,0,0,0,23,0,163,0,253,0,251,0,156,0,22,0,20,0,169,0,255,
0,255,0,255,0,255,0,166,0,33,0,142,0,249,0,255,0,225,0,85,0,2,0,0,0,0,0,0,0,0,
0,0,0,26,0,164,0,149,0,20,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,0,0,
16,0,149,0,216,0,80,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,13,0,0,0,0,0,2,0,
149,0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,20,0,46,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_gear16(idata_gear16, 24, 24, 2, 0);

void FontUI::cb_window_font_color_button_i(Fl_Button* o, void*) {
  window_font_color(o, 2);
}
void FontUI::cb_window_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_window_font_color_button_i(o,v);
}

void FontUI::cb_1_i(Fl_Button*, void*) {
  currentElement = "MenuStyle";
Widget=menu_font;
font_chooser_window()->show();
}
void FontUI::cb_1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void FontUI::cb_menu_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "MenuStyle");
}
void FontUI::cb_menu_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_menu_font_color_button_i(o,v);
}

void FontUI::cb_2_i(Fl_Button*, void*) {
  currentElement = "TrayButtonStyle";
Widget=panel_button_font;
font_chooser_window()->show();
}
void FontUI::cb_2(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void FontUI::cb_traybutton_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TrayButtonStyle");
}
void FontUI::cb_traybutton_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_traybutton_font_color_button_i(o,v);
}

void FontUI::cb_3_i(Fl_Button*, void*) {
  currentElement = "TrayStyle";
Widget=panel_font;
font_chooser_window()->show();
}
void FontUI::cb_3(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void FontUI::cb_panel_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TrayStyle");
}
void FontUI::cb_panel_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_panel_font_color_button_i(o,v);
}

void FontUI::cb_task_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TaskListStyle");
}
void FontUI::cb_task_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_task_font_color_button_i(o,v);
}

void FontUI::cb_4_i(Fl_Button*, void*) {
  currentElement = "TaskListStyle";
Widget=task_font;
font_chooser_window()->show();
}
void FontUI::cb_4(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void FontUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
font_window->hide();
}
void FontUI::cb_Cancel(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void FontUI::cb_OK_i(Fl_Button*, void*) {
  saveChanges();
}
void FontUI::cb_OK(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void FontUI::cb_Cancel1_i(Fl_Button*, void*) {
  font_choosing->hide();
}
void FontUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void FontUI::cb_OK1_i(Fl_Button*, void*) {
  font_chooser_cb(Widget,chooser_size,font_name,currentElement);
}
void FontUI::cb_OK1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void FontUI::cb_font_browser_i(Fl_Browser*, void*) {
  font_browser_cb(font_browser,font_name,font_size_slider);
}
void FontUI::cb_font_browser(Fl_Browser* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_browser_i(o,v);
}

void FontUI::cb_font_name_i(Fl_Output* o, void*) {
  //const char * item = font_browser->text(font_browser->value());
unsigned int size_of_font = get_font_size(currentElement);
Fl_Fontsize fs = size_of_font;
o->textsize(fs);
o->redraw();
}
void FontUI::cb_font_name(Fl_Output* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_name_i(o,v);
}

void FontUI::cb_font_size_slider_i(Fl_Slider* o, void*) {
  int size_of_font = o->value();
chooser_size->value(size_of_font);
chooser_size->redraw();
Fl_Fontsize fs = size_of_font;
font_name->textsize(fs);
font_name->redraw();
}
void FontUI::cb_font_size_slider(Fl_Slider* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_size_slider_i(o,v);
}

Fl_Double_Window* FontUI::make_window() {
  load();
  { Fl_Double_Window* o = font_window = new Fl_Double_Window(280, 330, gettext("Font Settings"));
    font_window->color(FL_DARK1);
    font_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, -5, 280, 335);
      o->color((Fl_Color)31);
      { window_box = new Fl_Box(5, 3, 270, 97);
        window_box->box(FL_FLAT_BOX);
        window_box->color((Fl_Color)44);
      } // Fl_Box* window_box
      { Fl_Output* o = window_font = new Fl_Output(45, 20, 160, 30, gettext("Window Title Font"));
        window_font->box(FL_FLAT_BOX);
        window_font->color((Fl_Color)53);
        window_font->selection_color(FL_DARK_RED);
        window_font->align(Fl_Align(FL_ALIGN_TOP));
        window_font->when(FL_WHEN_CHANGED);
        get_font("WindowStyle",o);
      } // Fl_Output* window_font
      { Fl_Button* o = active_window_font_color_button = new Fl_Button(210, 20, 60, 30, gettext("Active"));
        active_window_font_color_button->box(FL_FLAT_BOX);
        active_window_font_color_button->color((Fl_Color)23);
        active_window_font_color_button->callback((Fl_Callback*)cb_active_window_font_color_button);
        active_window_font_color_button->align(Fl_Align(FL_ALIGN_TOP));
        active_window_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_window_font_color(o,1);
      } // Fl_Button* active_window_font_color_button
      { Fl_Button* o = new Fl_Button(10, 20, 30, 30);
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_);
      } // Fl_Button* o
      { Fl_Button* o = window_font_color_button = new Fl_Button(210, 65, 60, 30, gettext("Inactive"));
        window_font_color_button->box(FL_FLAT_BOX);
        window_font_color_button->color((Fl_Color)23);
        window_font_color_button->callback((Fl_Callback*)cb_window_font_color_button);
        window_font_color_button->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        window_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_window_font_color(o,2);
      } // Fl_Button* window_font_color_button
      { menu_box = new Fl_Box(5, 105, 270, 95);
        menu_box->box(FL_FLAT_BOX);
        menu_box->color((Fl_Color)44);
      } // Fl_Box* menu_box
      { Fl_Output* o = menu_font = new Fl_Output(45, 120, 160, 30, gettext("Menu Font"));
        menu_font->box(FL_FLAT_BOX);
        menu_font->color((Fl_Color)53);
        menu_font->selection_color(FL_DARK_RED);
        menu_font->align(Fl_Align(FL_ALIGN_TOP));
        get_font("MenuStyle",o);
      } // Fl_Output* menu_font
      { Fl_Button* o = new Fl_Button(10, 120, 30, 30);
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_1);
      } // Fl_Button* o
      { Fl_Button* o = menu_font_color_button = new Fl_Button(210, 120, 60, 30);
        menu_font_color_button->box(FL_FLAT_BOX);
        menu_font_color_button->color((Fl_Color)23);
        menu_font_color_button->callback((Fl_Callback*)cb_menu_font_color_button);
        menu_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_font_color(o,"MenuStyle");
      } // Fl_Button* menu_font_color_button
      { Fl_Output* o = panel_button_font = new Fl_Output(45, 165, 160, 30, gettext("Panel Button Font"));
        panel_button_font->box(FL_FLAT_BOX);
        panel_button_font->color((Fl_Color)53);
        panel_button_font->selection_color(FL_DARK_RED);
        panel_button_font->align(Fl_Align(FL_ALIGN_TOP));
        if(!newOne()){get_font("TrayButtonStyle",o);}
        else{o->hide();}
      } // Fl_Output* panel_button_font
      { Fl_Button* o = new Fl_Button(10, 165, 30, 30);
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_2);
        if(newOne()){o->hide();}
      } // Fl_Button* o
      { Fl_Button* o = traybutton_font_color_button = new Fl_Button(210, 165, 60, 30);
        traybutton_font_color_button->box(FL_FLAT_BOX);
        traybutton_font_color_button->color((Fl_Color)23);
        traybutton_font_color_button->callback((Fl_Callback*)cb_traybutton_font_color_button);
        traybutton_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        if(!newOne()){get_font_color(o,"TrayButtonStyle");}
        else{o->hide();}
      } // Fl_Button* traybutton_font_color_button
      { panel_box = new Fl_Box(5, 206, 270, 96);
        panel_box->box(FL_FLAT_BOX);
        panel_box->color((Fl_Color)44);
      } // Fl_Box* panel_box
      { Fl_Output* o = panel_font = new Fl_Output(45, 223, 160, 30, gettext("Panel Font"));
        panel_font->box(FL_FLAT_BOX);
        panel_font->color((Fl_Color)53);
        panel_font->selection_color(FL_DARK_RED);
        panel_font->align(Fl_Align(FL_ALIGN_TOP));
        get_font("TrayStyle",o);
      } // Fl_Output* panel_font
      { Fl_Button* o = new Fl_Button(10, 223, 30, 30);
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = panel_font_color_button = new Fl_Button(210, 223, 60, 30);
        panel_font_color_button->box(FL_FLAT_BOX);
        panel_font_color_button->color((Fl_Color)23);
        panel_font_color_button->callback((Fl_Callback*)cb_panel_font_color_button);
        panel_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_font_color(o,"TrayStyle");
      } // Fl_Button* panel_font_color_button
      { Fl_Button* o = task_font_color_button = new Fl_Button(210, 268, 60, 30);
        task_font_color_button->box(FL_FLAT_BOX);
        task_font_color_button->color((Fl_Color)23);
        task_font_color_button->callback((Fl_Callback*)cb_task_font_color_button);
        task_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        if(newOne()){o->hide();}else{get_font_color(o,"TaskListStyle");}
      } // Fl_Button* task_font_color_button
      { Fl_Output* o = task_font = new Fl_Output(45, 268, 160, 30, gettext("Running App List Font"));
        task_font->box(FL_FLAT_BOX);
        task_font->color((Fl_Color)53);
        task_font->selection_color(FL_DARK_RED);
        task_font->align(Fl_Align(FL_ALIGN_TOP));
        if(!newOne()){get_font( "TaskListStyle", o);}
        else{o->hide();}
      } // Fl_Output* task_font
      { Fl_Button* o = new Fl_Button(10, 268, 30, 30);
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->image(image_gear16);
        o->callback((Fl_Callback*)cb_4);
        if(newOne()){o->hide();}
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(155, 305, 60, 25, gettext("Cancel"));
        o->tooltip(gettext("No changes will be saved"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(225, 305, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_fonts_xpm);
    font_window->xclass("jsm-fonts");
    font_window->end();
    font_window->resizable(font_window);
  } // Fl_Double_Window* font_window
  return font_window;
}

Fl_Double_Window* FontUI::font_chooser_window() {
  { Fl_Double_Window* o = font_choosing = new Fl_Double_Window(315, 410, gettext("Choose a Font"));
    font_choosing->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(195, 380, 60, 25, gettext("Cancel"));
      o->tooltip(gettext("No changes will be saved"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(265, 380, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    { Fl_Browser* o = font_browser = new Fl_Browser(5, 5, 305, 285);
      font_browser->type(2);
      font_browser->box(FL_FLAT_BOX);
      font_browser->color((Fl_Color)55);
      font_browser->selection_color(FL_DARK_RED);
      font_browser->labelfont(8);
      font_browser->callback((Fl_Callback*)cb_font_browser);
      font_browser->when(FL_WHEN_RELEASE);
      font_populate(o);
    } // Fl_Browser* font_browser
    { Fl_Output* o = font_name = new Fl_Output(5, 325, 305, 50);
      font_name->box(FL_FLAT_BOX);
      font_name->color((Fl_Color)55);
      font_name->selection_color((Fl_Color)80);
      font_name->labelsize(20);
      font_name->callback((Fl_Callback*)cb_font_name);
      font_name->when(FL_WHEN_RELEASE_ALWAYS);
      get_font(currentElement,o);
    } // Fl_Output* font_name
    { Fl_Slider* o = font_size_slider = new Fl_Slider(5, 295, 250, 25);
      font_size_slider->type(1);
      font_size_slider->box(FL_GTK_DOWN_BOX);
      font_size_slider->color((Fl_Color)41);
      font_size_slider->selection_color((Fl_Color)48);
      font_size_slider->minimum(8);
      font_size_slider->maximum(200);
      font_size_slider->step(1);
      font_size_slider->value(12);
      font_size_slider->callback((Fl_Callback*)cb_font_size_slider);
      font_size_slider->when(FL_WHEN_RELEASE);
      int fs = get_font_size(currentElement);
      o->value(fs);
    } // Fl_Slider* font_size_slider
    { Fl_Value_Output* o = chooser_size = new Fl_Value_Output(265, 295, 45, 25);
      chooser_size->box(FL_FLAT_BOX);
      chooser_size->color((Fl_Color)23);
      chooser_size->minimum(8);
      chooser_size->maximum(200);
      chooser_size->step(1);
      chooser_size->value(12);
      int fs = get_font_size(currentElement);
      o->value(fs);
    } // Fl_Value_Output* chooser_size
    startup(o,jsm_fonts_xpm);
    font_choosing->xclass("jsm-fonts");
    font_choosing->end();
  } // Fl_Double_Window* font_choosing
  return font_choosing;
}
