/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-fonts.h"

void FontUI::cb_active_window_font_color_button_i(Fl_Button* o, void*) {
  window_font_color(o, 1);
}
void FontUI::cb_active_window_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_active_window_font_color_button_i(o,v);
}

void FontUI::cb_Choose_i(Fl_Button*, void*) {
  currentElement = "WindowStyle";
Widget=window_font;
font_chooser_window()->show();
}
void FontUI::cb_Choose(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Choose_i(o,v);
}

void FontUI::cb_window_font_color_button_i(Fl_Button* o, void*) {
  window_font_color(o, 2);
}
void FontUI::cb_window_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_window_font_color_button_i(o,v);
}

void FontUI::cb_Choose1_i(Fl_Button*, void*) {
  currentElement = "MenuStyle";
Widget=menu_font;
font_chooser_window()->show();
}
void FontUI::cb_Choose1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Choose1_i(o,v);
}

void FontUI::cb_menu_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "MenuStyle");
}
void FontUI::cb_menu_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_menu_font_color_button_i(o,v);
}

void FontUI::cb_Choose2_i(Fl_Button*, void*) {
  currentElement = "TrayButtonStyle";
Widget=panel_button_font;
font_chooser_window()->show();
}
void FontUI::cb_Choose2(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Choose2_i(o,v);
}

void FontUI::cb_traybutton_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TrayButtonStyle");
}
void FontUI::cb_traybutton_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_traybutton_font_color_button_i(o,v);
}

void FontUI::cb_Choose3_i(Fl_Button*, void*) {
  currentElement = "TrayStyle";
Widget=panel_font;
font_chooser_window()->show();
}
void FontUI::cb_Choose3(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Choose3_i(o,v);
}

void FontUI::cb_panel_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TrayStyle");
}
void FontUI::cb_panel_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_panel_font_color_button_i(o,v);
}

void FontUI::cb_task_font_color_button_i(Fl_Button* o, void*) {
  font_color(o, "TaskListStyle");
}
void FontUI::cb_task_font_color_button(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_task_font_color_button_i(o,v);
}

void FontUI::cb_Choose4_i(Fl_Button*, void*) {
  currentElement = "TaskListStyle";
Widget=task_font;
font_chooser_window()->show();
}
void FontUI::cb_Choose4(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Choose4_i(o,v);
}

void FontUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
font_window->hide();
UI ux;
ux.showSettings();
}
void FontUI::cb_Cancel(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void FontUI::cb_OK_i(Fl_Button*, void*) {
  saveJWMRC(font_window);
UI ux;
ux.showSettings();
}
void FontUI::cb_OK(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

void FontUI::cb_Cancel1_i(Fl_Button*, void*) {
  font_choosing->hide();
}
void FontUI::cb_Cancel1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void FontUI::cb_OK1_i(Fl_Button*, void*) {
  font_chooser_cb();
}
void FontUI::cb_OK1(Fl_Button* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void FontUI::cb_font_browser_i(Fl_Browser* o, void*) {
  const char * item = o->text(o->value());
font_name->value(item);
Fl_Font b = font_browser->value();
//std::cout<< Fl::get_font_name(b,0)<<std::endl;
unsigned int size_of_font = font_size_slider->value();
Fl_Fontsize fs = size_of_font;
font_name->textsize(fs);
font_name->textfont(b);
font_name->redraw();
}
void FontUI::cb_font_browser(Fl_Browser* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_browser_i(o,v);
}

void FontUI::cb_font_name_i(Fl_Output* o, void*) {
  //const char * item = font_browser->text(font_browser->value());
unsigned int size_of_font = get_font_size();
Fl_Fontsize fs = size_of_font;
o->textsize(fs);
o->redraw();
}
void FontUI::cb_font_name(Fl_Output* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_name_i(o,v);
}

void FontUI::cb_font_size_slider_i(Fl_Slider* o, void*) {
  int size_of_font = o->value();
chooser_size->value(size_of_font);
chooser_size->redraw();
Fl_Fontsize fs = size_of_font;
font_name->textsize(fs);
font_name->redraw();
}
void FontUI::cb_font_size_slider(Fl_Slider* o, void* v) {
  ((FontUI*)(o->parent()->user_data()))->cb_font_size_slider_i(o,v);
}

Fl_Double_Window* FontUI::make_window() {
  load();
  saveChangesTemp();
  { Fl_Double_Window* o = font_window = new Fl_Double_Window(380, 410, gettext("Font Settings"));
    font_window->color((Fl_Color)31);
    font_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, -5, 380, 415);
      o->color((Fl_Color)31);
      { window_box = new Fl_Box(10, 8, 355, 113);
        window_box->box(FL_FLAT_BOX);
        window_box->color((Fl_Color)44);
      } // Fl_Box* window_box
      { Fl_Output* o = window_font = new Fl_Output(40, 55, 160, 25, gettext("Window Title Font Name"));
        window_font->box(FL_FLAT_BOX);
        window_font->color((Fl_Color)53);
        window_font->selection_color(FL_DARK_RED);
        window_font->align(Fl_Align(FL_ALIGN_TOP));
        window_font->when(FL_WHEN_CHANGED);
        get_font("WindowStyle",o);
      } // Fl_Output* window_font
      { Fl_Box* o = new Fl_Box(285, 10, 70, 30, gettext("Active"));
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      { Fl_Button* o = active_window_font_color_button = new Fl_Button(295, 40, 60, 25);
        active_window_font_color_button->box(FL_FLAT_BOX);
        active_window_font_color_button->color((Fl_Color)23);
        active_window_font_color_button->callback((Fl_Callback*)cb_active_window_font_color_button);
        active_window_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_window_font_color(o,1);
      } // Fl_Button* active_window_font_color_button
      { Fl_Button* o = new Fl_Button(210, 50, 75, 30, gettext("Choose"));
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Choose);
      } // Fl_Button* o
      { Fl_Box* o = new Fl_Box(285, 65, 75, 25, gettext("Inactive"));
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      { Fl_Button* o = window_font_color_button = new Fl_Button(295, 90, 60, 25);
        window_font_color_button->box(FL_FLAT_BOX);
        window_font_color_button->color((Fl_Color)23);
        window_font_color_button->callback((Fl_Callback*)cb_window_font_color_button);
        window_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_window_font_color(o,2);
      } // Fl_Button* window_font_color_button
      { menu_box = new Fl_Box(10, 130, 355, 115);
        menu_box->box(FL_FLAT_BOX);
        menu_box->color((Fl_Color)44);
      } // Fl_Box* menu_box
      { Fl_Output* o = menu_font = new Fl_Output(40, 160, 160, 25, gettext("Menu Font Name"));
        menu_font->box(FL_FLAT_BOX);
        menu_font->color((Fl_Color)53);
        menu_font->selection_color(FL_DARK_RED);
        menu_font->align(Fl_Align(FL_ALIGN_TOP));
        get_font("MenuStyle",o);
      } // Fl_Output* menu_font
      { Fl_Button* o = new Fl_Button(210, 155, 75, 30, gettext("Choose"));
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Choose1);
      } // Fl_Button* o
      { Fl_Button* o = menu_font_color_button = new Fl_Button(295, 160, 60, 25);
        menu_font_color_button->box(FL_FLAT_BOX);
        menu_font_color_button->color((Fl_Color)23);
        menu_font_color_button->callback((Fl_Callback*)cb_menu_font_color_button);
        menu_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_font_color(o,"MenuStyle");
      } // Fl_Button* menu_font_color_button
      { Fl_Output* o = panel_button_font = new Fl_Output(40, 210, 160, 25, gettext("Panel Button Font Name"));
        panel_button_font->box(FL_FLAT_BOX);
        panel_button_font->color((Fl_Color)53);
        panel_button_font->selection_color(FL_DARK_RED);
        panel_button_font->align(Fl_Align(FL_ALIGN_TOP));
        if(!newOne()){get_font("TrayButtonStyle",o);}
        else{o->hide();}
      } // Fl_Output* panel_button_font
      { Fl_Button* o = new Fl_Button(210, 205, 75, 30, gettext("Choose"));
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Choose2);
        if(newOne()){o->hide();}
      } // Fl_Button* o
      { Fl_Button* o = traybutton_font_color_button = new Fl_Button(295, 210, 60, 25);
        traybutton_font_color_button->box(FL_FLAT_BOX);
        traybutton_font_color_button->color((Fl_Color)23);
        traybutton_font_color_button->callback((Fl_Callback*)cb_traybutton_font_color_button);
        traybutton_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        if(!newOne()){get_font_color(o,"TrayButtonStyle");}
        else{o->hide();}
      } // Fl_Button* traybutton_font_color_button
      { panel_box = new Fl_Box(10, 255, 355, 115);
        panel_box->box(FL_FLAT_BOX);
        panel_box->color((Fl_Color)44);
      } // Fl_Box* panel_box
      { Fl_Output* o = panel_font = new Fl_Output(45, 275, 160, 25, gettext("Panel Font Name"));
        panel_font->box(FL_FLAT_BOX);
        panel_font->color((Fl_Color)53);
        panel_font->selection_color(FL_DARK_RED);
        panel_font->align(Fl_Align(FL_ALIGN_TOP));
        get_font("TrayStyle",o);
      } // Fl_Output* panel_font
      { Fl_Button* o = new Fl_Button(210, 275, 75, 30, gettext("Choose"));
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Choose3);
      } // Fl_Button* o
      { Fl_Button* o = panel_font_color_button = new Fl_Button(295, 280, 60, 25);
        panel_font_color_button->box(FL_FLAT_BOX);
        panel_font_color_button->color((Fl_Color)23);
        panel_font_color_button->callback((Fl_Callback*)cb_panel_font_color_button);
        panel_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        get_font_color(o,"TrayStyle");
      } // Fl_Button* panel_font_color_button
      { Fl_Button* o = task_font_color_button = new Fl_Button(295, 335, 60, 25);
        task_font_color_button->box(FL_FLAT_BOX);
        task_font_color_button->color((Fl_Color)23);
        task_font_color_button->callback((Fl_Callback*)cb_task_font_color_button);
        task_font_color_button->when(FL_WHEN_RELEASE_ALWAYS);
        if(newOne()){o->hide();}else{get_font_color(o,"TaskListStyle");}
      } // Fl_Button* task_font_color_button
      { Fl_Output* o = task_font = new Fl_Output(45, 335, 160, 25, gettext("Running App List Font Name"));
        task_font->box(FL_FLAT_BOX);
        task_font->color((Fl_Color)53);
        task_font->selection_color(FL_DARK_RED);
        task_font->align(Fl_Align(FL_ALIGN_TOP));
        if(!newOne()){get_font( "TaskListStyle", o);}
        else{o->hide();}
      } // Fl_Output* task_font
      { Fl_Button* o = new Fl_Button(210, 335, 75, 30, gettext("Choose"));
        o->tooltip(gettext("Open the font list Window"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Choose4);
        if(newOne()){o->hide();}
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 375, 60, 25, gettext("Cancel"));
        o->tooltip(gettext("No changes will be saved"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(315, 375, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_FLAT_BOX);
        o->down_box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o);
    font_window->xclass("jsm-fonts");
    font_window->end();
    font_window->resizable(font_window);
  } // Fl_Double_Window* font_window
  return font_window;
}

Fl_Double_Window* FontUI::font_chooser_window() {
  { Fl_Double_Window* o = font_choosing = new Fl_Double_Window(340, 455, gettext("Choose a Font"));
    font_choosing->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(205, 420, 60, 25, gettext("Cancel"));
      o->tooltip(gettext("No changes will be saved"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(275, 420, 45, 25, gettext("OK"));
      o->tooltip(gettext("Write to configuration file"));
      o->box(FL_FLAT_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    { Fl_Browser* o = font_browser = new Fl_Browser(20, 15, 305, 285);
      font_browser->type(2);
      font_browser->box(FL_FLAT_BOX);
      font_browser->color((Fl_Color)55);
      font_browser->selection_color(FL_DARK_RED);
      font_browser->labelfont(8);
      font_browser->callback((Fl_Callback*)cb_font_browser);
      font_browser->when(FL_WHEN_RELEASE);
      font_populate(o);
      //const char* v;
    } // Fl_Browser* font_browser
    { Fl_Output* o = font_name = new Fl_Output(10, 360, 315, 50);
      font_name->box(FL_FLAT_BOX);
      font_name->color((Fl_Color)55);
      font_name->selection_color((Fl_Color)80);
      font_name->labelsize(20);
      font_name->callback((Fl_Callback*)cb_font_name);
      font_name->when(FL_WHEN_RELEASE_ALWAYS);
      get_font(currentElement.c_str(),o);
    } // Fl_Output* font_name
    { Fl_Slider* o = font_size_slider = new Fl_Slider(15, 320, 250, 25);
      font_size_slider->type(1);
      font_size_slider->box(FL_GTK_DOWN_BOX);
      font_size_slider->color((Fl_Color)41);
      font_size_slider->selection_color((Fl_Color)48);
      font_size_slider->minimum(8);
      font_size_slider->maximum(200);
      font_size_slider->step(1);
      font_size_slider->value(12);
      font_size_slider->callback((Fl_Callback*)cb_font_size_slider);
      font_size_slider->when(FL_WHEN_RELEASE);
      int fs = get_font_size();
      o->value(fs);
    } // Fl_Slider* font_size_slider
    { Fl_Value_Output* o = chooser_size = new Fl_Value_Output(275, 320, 45, 25);
      chooser_size->box(FL_FLAT_BOX);
      chooser_size->color((Fl_Color)23);
      chooser_size->minimum(8);
      chooser_size->maximum(200);
      chooser_size->step(1);
      chooser_size->value(12);
      int fs = get_font_size();
      o->value(fs);
    } // Fl_Value_Output* chooser_size
    startup(o);
    font_choosing->xclass("jsm-fonts");
    font_choosing->end();
  } // Fl_Double_Window* font_choosing
  return font_choosing;
}

void FontUI::font_color(Fl_Widget *o, const char * active) {
  flFont f;
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	f.setFontColor(colors, active);
  	unsigned int colorSet = f.getFontColor(active);
  	o->color(colorSet);
  	o->redraw();
  }
}

void FontUI::window_font_color(Fl_Widget *o, int Active1_Inactive2) {
  flWindow window;
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  unsigned int colorSet;
  if(c!=0){ //If color chooser isn't canceled... do stuff
    if(Active1_Inactive2==1){
      window.setActiveFontColor(colors);
      colorSet = window.getActiveFontColor();
     }
     else{
      window.setFontColor(colors);
      colorSet = window.getFontColor();
     }
    o->color(colorSet);
    o->redraw();
  }
}

void FontUI::font_populate(Fl_Browser *o) {
  Fl_Font a;a = Fl::set_fonts("-*");
  std::string v;
  Fl_Font i;
  for (i=1;i!=a;++i){
  	v = Fl::get_font_name(i,0);
  	o->add(v.c_str());
  }
}

void FontUI::get_font(const char* element, Fl_Output *o) {
  std::string result;
  flFont font;
  result = font.getFontName(element);o->value(result.c_str());
}

void FontUI::get_font_color(Fl_Widget *o, const char * whichStyle) {
  flFont font;
  unsigned int colour = font.getFontColor(whichStyle);
  o->color(colour);
}

void FontUI::get_window_font_color(Fl_Widget *o, int Active1_Inactive2) {
  flWindow window;
  unsigned int colorSet;
  if(Active1_Inactive2==1){colorSet = window.getActiveFontColor();}
  else{colorSet = window.getFontColor();}
  o->color(colorSet);
  o->redraw();
}

void FontUI::font_chooser_cb() {
  flFont font;
  const char* fontFamily = font_name->value();
  std::string family = std::string(fontFamily);
  if (family.compare("")!=0){
  	std::transform(family.begin(), family.end(), family.begin(), ::tolower);
  	font.setFontName(family.c_str(), currentElement.c_str());
  	Widget->value(fontFamily);
  	Widget->redraw();
  }
  
  set_font_size();
  saveJWMRC(font_choosing);
}

void FontUI::set_font_size() {
  flFont f;
  unsigned int size = chooser_size->value();
  f.setSize(size,currentElement);
}

int FontUI::get_font_size() {
  flFont f;
  int font_size =f.getFontSize(currentElement);
  return font_size;
  /*font_size_slider->value(font_size);
  Why does this crash everything??
  chooser_size->value(font_size);
  chooser_size->redraw();
  */
}

bool FontUI::newOne() {
  switch (newStyle()){
  case -1:
    return false;
    break;
   case 0:
     return false;
     break;
   case 1:
     return true;
     break;
   default:
     return true;
     break;
  }
}

void FontUI::startup(Fl_Window *o) {
  Config config; config.under_mouse(o);
  o->icon(config.Get_Fl_Icon(jsm_fonts_xpm));
}
