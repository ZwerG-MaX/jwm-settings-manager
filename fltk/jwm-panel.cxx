/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include <libintl.h>
#include "jwm-panel.h"

void PanelUI::cb_panel_chooser_i(Fl_Menu_Button* o, void*) {
  panel_menu_button_label(o);
}
void PanelUI::cb_panel_chooser(Fl_Menu_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_panel_chooser_i(o,v);
}

void PanelUI::cb_Add_i(Fl_Menu_*, void*) {
  if((numPanels())>=4){
  new_panel_window()->show();
}
else{
  addPanel();
  Menu_CB(numPanels());
};
}
void PanelUI::cb_Add(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void PanelUI::cb_Panel_i(Fl_Menu_*, void*) {
  Menu_CB(1);
}
void PanelUI::cb_Panel(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel_i(o,v);
}

void PanelUI::cb_Panel1_i(Fl_Menu_*, void*) {
  Menu_CB(2);
}
void PanelUI::cb_Panel1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel1_i(o,v);
}

void PanelUI::cb_Panel2_i(Fl_Menu_*, void*) {
  Menu_CB(3);
}
void PanelUI::cb_Panel2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel2_i(o,v);
}

void PanelUI::cb_Panel3_i(Fl_Menu_*, void*) {
  Menu_CB(4);
}
void PanelUI::cb_Panel3(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel3_i(o,v);
}

void PanelUI::cb_Remove_i(Fl_Menu_*, void*) {
  deletePanel();
int a = numPanels();
Menu_CB(a);
}
void PanelUI::cb_Remove(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Remove_i(o,v);
}

unsigned char PanelUI::menu_panel_chooser_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_panel_chooser[] = {
 {"Add a Panel  +", 0,  (Fl_Callback*)PanelUI::cb_Add, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 1", 0,  (Fl_Callback*)PanelUI::cb_Panel, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 2", 0,  (Fl_Callback*)PanelUI::cb_Panel1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 3", 0,  (Fl_Callback*)PanelUI::cb_Panel2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 4", 0,  (Fl_Callback*)PanelUI::cb_Panel3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Remove Current  Panel", 0,  (Fl_Callback*)PanelUI::cb_Remove, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb__i(Fl_Button*, void*) {
  remove_app(app_browser);
}
void PanelUI::cb_(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void PanelUI::cb_app_browser_i(Fl_Browser*, void*) {
  unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  //Do I really want to have clicking open the config?
 // config_Item(result);
};
}
void PanelUI::cb_app_browser(Fl_Browser* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_app_browser_i(o,v);
}

void PanelUI::cb_1_i(Fl_Button*, void*) {
  unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  config_Item(result);
};
}
void PanelUI::cb_1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_gear16[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,
2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,48,0,3,0,0,0,2,0,149,
0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,2,0,24,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,20,0,151,0,218,0,79,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,1,0,0,0,
69,0,193,0,96,0,2,0,0,0,0,0,0,0,0,0,0,0,22,0,156,0,251,0,255,0,221,0,75,0,22,0,
169,0,255,0,255,0,255,0,255,0,167,0,22,0,73,0,217,0,255,0,231,0,89,0,2,0,0,0,0,
0,0,0,24,0,162,0,252,0,255,0,255,0,255,0,224,0,199,0,245,0,255,0,255,0,255,0,
255,0,245,0,200,0,225,0,255,0,255,0,255,0,228,0,85,0,2,0,0,0,0,0,46,0,212,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,255,0,196,0,25,0,0,0,0,0,0,0,71,0,219,0,255,0,255,0,255,0,
255,0,255,0,246,0,209,0,172,0,172,0,209,0,246,0,255,0,255,0,255,0,255,0,255,0,
223,0,83,0,3,0,0,0,0,0,0,0,0,0,76,0,227,0,255,0,255,0,255,0,210,0,95,0,25,0,9,0,
10,0,25,0,95,0,210,0,255,0,255,0,255,0,225,0,77,0,1,0,0,0,0,0,2,0,2,0,0,0,23,0,
203,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,0,255,0,202,
0,23,0,0,0,2,0,2,0,147,0,149,0,148,0,169,0,246,0,255,0,246,0,94,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,169,0,148,0,149,0,147,0,254,0,255,
0,255,0,255,0,255,0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,
0,255,0,255,0,255,0,255,0,255,0,254,0,252,0,255,0,255,0,255,0,255,0,255,0,170,
0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,
252,0,252,0,255,0,255,0,255,0,255,0,255,0,170,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,9,0,170,0,255,0,255,0,255,0,255,0,255,0,252,0,254,0,255,0,255,0,255,0,255,
0,255,0,207,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,207,0,255,0,255,0,255,
0,255,0,255,0,254,0,144,0,146,0,144,0,166,0,245,0,255,0,246,0,94,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,94,0,246,0,255,0,246,0,167,0,144,0,146,0,144,0,1,0,1,0,
0,0,36,0,220,0,255,0,255,0,210,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,210,0,255,
0,255,0,193,0,20,0,0,0,1,0,1,0,0,0,0,0,19,0,148,0,249,0,255,0,255,0,255,0,210,
0,95,0,25,0,9,0,10,0,25,0,95,0,210,0,255,0,255,0,255,0,187,0,26,0,0,0,0,0,0,0,
0,0,24,0,156,0,250,0,255,0,255,0,255,0,255,0,255,0,246,0,209,0,172,0,172,0,
209,0,246,0,255,0,255,0,255,0,255,0,253,0,162,0,23,0,0,0,0,0,0,0,96,0,246,0,255,
0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,
0,255,0,255,0,255,0,253,0,142,0,6,0,0,0,0,0,22,0,158,0,252,0,255,0,255,0,250,
0,183,0,191,0,246,0,255,0,255,0,255,0,255,0,244,0,218,0,247,0,255,0,255,0,255,
0,229,0,90,0,2,0,0,0,0,0,0,0,23,0,163,0,253,0,251,0,156,0,22,0,20,0,169,0,255,
0,255,0,255,0,255,0,166,0,33,0,142,0,249,0,255,0,225,0,85,0,2,0,0,0,0,0,0,0,0,
0,0,0,26,0,164,0,149,0,20,0,0,0,2,0,149,0,255,0,255,0,255,0,255,0,147,0,0,0,
16,0,149,0,216,0,80,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,13,0,0,0,0,0,2,0,
149,0,255,0,255,0,255,0,255,0,147,0,2,0,0,0,20,0,46,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,148,0,255,0,252,0,252,0,255,0,146,0,2,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_gear16(idata_gear16, 24, 24, 2, 0);

void PanelUI::cb_choose_apps_i(Fl_Button*, void*) {
  add_to_panel()->show();
}
void PanelUI::cb_choose_apps(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choose_apps_i(o,v);
}

void PanelUI::cb_98_i(Fl_Button*, void*) {
  move_up();
}
void PanelUI::cb_98(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_98_i(o,v);
}

void PanelUI::cb_92_i(Fl_Button*, void*) {
  move_down();
}
void PanelUI::cb_92(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_92_i(o,v);
}

void PanelUI::cb_menu_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"MenuStyle");
}
void PanelUI::cb_menu_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_bg_color_i(o,v);
}

void PanelUI::cb_menu_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"MenuStyle");
}
void PanelUI::cb_menu_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_fg_color_i(o,v);
}

void PanelUI::cb_menu_font_color_i(Fl_Button* o, void*) {
  one_color_Font(o,"MenuStyle");
}
void PanelUI::cb_menu_font_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_font_color_i(o,v);
}

void PanelUI::cb_o_menu_slider_i(Fl_Slider* o, void*) {
  opacity(o_menu_slider_v,o,"MenuStyle");
}
void PanelUI::cb_o_menu_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_i(o,v);
}

void PanelUI::cb_o_menu_slider_v_i(Fl_Value_Input* o, void*) {
  opacity(o,o_menu_slider,"MenuStyle");
}
void PanelUI::cb_o_menu_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_v_i(o,v);
}

void PanelUI::cb_b_color_i(Fl_Button* o, void*) {
  one_color(o, "TrayStyle");
}
void PanelUI::cb_b_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_color_i(o,v);
}

void PanelUI::cb_button_color_i(Fl_Button* o, void*) {
  if(!style_gone()){one_color(o,"TrayButtonStyle");};
}
void PanelUI::cb_button_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_color_i(o,v);
}

void PanelUI::cb_o_slider_i(Fl_Slider*, void*) {
  opacity(o_slider_v,o_slider,"TrayStyle");
}
void PanelUI::cb_o_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_i(o,v);
}

void PanelUI::cb_o_slider_v_i(Fl_Value_Input*, void*) {
  opacity(o_slider_v,o_slider,"TrayStyle");
}
void PanelUI::cb_o_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_v_i(o,v);
}

void PanelUI::cb_Edit_i(Fl_Button*, void*) {
  panel_window->hide();
showMenu();
}
void PanelUI::cb_Edit(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Edit_i(o,v);
}

void PanelUI::cb_top_i(Fl_Menu_*, void*) {
  change_panel_position("top");
}
void PanelUI::cb_top(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top_i(o,v);
}

void PanelUI::cb_bottom_i(Fl_Menu_*, void*) {
  change_panel_position("bottom");
}
void PanelUI::cb_bottom(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom_i(o,v);
}

void PanelUI::cb_right_i(Fl_Menu_*, void*) {
  change_panel_position("right");
}
void PanelUI::cb_right(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right_i(o,v);
}

void PanelUI::cb_left_i(Fl_Menu_*, void*) {
  change_panel_position("left");
}
void PanelUI::cb_left(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left_i(o,v);
}

unsigned char PanelUI::menu_Panel_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_Panel[] = {
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_top1_i(Fl_Menu_*, void*) {
  autohide_position("top");
}
void PanelUI::cb_top1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top1_i(o,v);
}

void PanelUI::cb_bottom1_i(Fl_Menu_*, void*) {
  autohide_position("bottom");
}
void PanelUI::cb_bottom1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom1_i(o,v);
}

void PanelUI::cb_right1_i(Fl_Menu_*, void*) {
  autohide_position("right");
}
void PanelUI::cb_right1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right1_i(o,v);
}

void PanelUI::cb_left1_i(Fl_Menu_*, void*) {
  autohide_position("left");
}
void PanelUI::cb_left1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left1_i(o,v);
}

void PanelUI::cb_off_i(Fl_Menu_*, void*) {
  autohide_position("off");
}
void PanelUI::cb_off(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_off_i(o,v);
}

unsigned char PanelUI::menu_choose_autohide_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_choose_autohide[] = {
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"off", 0,  (Fl_Callback*)PanelUI::cb_off, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_autohide_check_i(Fl_Check_Button* o, void*) {
  int autohide=o->value();
if(autohide==0){
  setElementAttribute(currentPanel(),"Tray","autohide","false");
}
else{
  setElementAttribute(currentPanel(),"Tray","autohide","true");
};
}
void PanelUI::cb_autohide_check(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_autohide_check_i(o,v);
}

void PanelUI::cb_w_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,width_input,"width");
}
void PanelUI::cb_w_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_w_slider_i(o,v);
}

void PanelUI::cb_width_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(w_slider,o,"width");
}
void PanelUI::cb_width_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_width_input_i(o,v);
}

void PanelUI::cb_h_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,height_input,"height");
}
void PanelUI::cb_h_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_h_slider_i(o,v);
}

void PanelUI::cb_height_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(h_slider,o,"height");
}
void PanelUI::cb_height_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_height_input_i(o,v);
}

void PanelUI::cb_X_i(Fl_Value_Input* o, void*) {
  coordinate("x",o,2);
}
void PanelUI::cb_X(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

void PanelUI::cb_Y_i(Fl_Value_Input* o, void*) {
  coordinate("y",o,2);
}
void PanelUI::cb_Y(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Y_i(o,v);
}

void PanelUI::cb_border_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,border_input,"border");
}
void PanelUI::cb_border_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_border_slider_i(o,v);
}

void PanelUI::cb_border_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(border_slider,o,"border");
}
void PanelUI::cb_border_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_border_input_i(o,v);
}

void PanelUI::cb_fixed_i(Fl_Menu_*, void*) {
  panel_h(1,halign);
}
void PanelUI::cb_fixed(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_fixed_i(o,v);
}

void PanelUI::cb_left2_i(Fl_Menu_*, void*) {
  panel_h(2,halign);
}
void PanelUI::cb_left2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left2_i(o,v);
}

void PanelUI::cb_center_i(Fl_Menu_*, void*) {
  panel_h(3,halign);
}
void PanelUI::cb_center(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_center_i(o,v);
}

void PanelUI::cb_right2_i(Fl_Menu_*, void*) {
  panel_h(4,halign);
}
void PanelUI::cb_right2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right2_i(o,v);
}

unsigned char PanelUI::menu_halign_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_halign[] = {
 {"fixed", 0,  (Fl_Callback*)PanelUI::cb_fixed, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center", 0,  (Fl_Callback*)PanelUI::cb_center, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_fixed1_i(Fl_Menu_*, void*) {
  panel_v(1,valign);
}
void PanelUI::cb_fixed1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_fixed1_i(o,v);
}

void PanelUI::cb_top2_i(Fl_Menu_*, void*) {
  panel_v(2,valign);
}
void PanelUI::cb_top2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top2_i(o,v);
}

void PanelUI::cb_center1_i(Fl_Menu_*, void*) {
  panel_v(3,valign);
}
void PanelUI::cb_center1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_center1_i(o,v);
}

void PanelUI::cb_bottom2_i(Fl_Menu_*, void*) {
  panel_v(4,valign);
}
void PanelUI::cb_bottom2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom2_i(o,v);
}

unsigned char PanelUI::menu_valign_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_valign[] = {
 {"fixed", 0,  (Fl_Callback*)PanelUI::cb_fixed1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"center", 0,  (Fl_Callback*)PanelUI::cb_center1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_horizontal_i(Fl_Menu_*, void*) {
  layout("horizontal",layOut);
}
void PanelUI::cb_horizontal(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_horizontal_i(o,v);
}

void PanelUI::cb_vertical_i(Fl_Menu_*, void*) {
  layout("vertical",layOut);
}
void PanelUI::cb_vertical(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_vertical_i(o,v);
}

unsigned char PanelUI::menu_layout_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_layout[] = {
 {"horizontal", 0,  (Fl_Callback*)PanelUI::cb_horizontal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"vertical", 0,  (Fl_Callback*)PanelUI::cb_vertical, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_below_i(Fl_Menu_*, void*) {
  change_layer("below",layer);
}
void PanelUI::cb_below(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_below_i(o,v);
}

void PanelUI::cb_normal_i(Fl_Menu_*, void*) {
  change_layer("normal",layer);
}
void PanelUI::cb_normal(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_normal_i(o,v);
}

void PanelUI::cb_above_i(Fl_Menu_*, void*) {
  change_layer("above",layer);
}
void PanelUI::cb_above(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_above_i(o,v);
}

unsigned char PanelUI::menu_layer_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_layer[] = {
 {"below", 0,  (Fl_Callback*)PanelUI::cb_below, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"normal", 0,  (Fl_Callback*)PanelUI::cb_normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"above", 0,  (Fl_Callback*)PanelUI::cb_above, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel_button();
}
void PanelUI::cb_Cancel(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void PanelUI::cb_save_button_i(Fl_Button*, void*) {
  ok();
}
void PanelUI::cb_save_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void PanelUI::cb_OK_i(Fl_Button*, void*) {
  indicator_win->hide();
}
void PanelUI::cb_OK(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void PanelUI::cb_CLOSE_i(Fl_Button*, void*) {
  indicator_win->hide();
}
void PanelUI::cb_CLOSE(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_CLOSE_i(o,v);
}

void PanelUI::cb_2_i(Fl_Button*, void*) {
  if(checkFlBrowserItem(add_indicator_browser)){
  const char* item=add_indicator_browser->text(add_indicator_browser->value());
  addIndicator(item);
  getIndicators(indicator_browser);
};
}
void PanelUI::cb_2(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void PanelUI::cb_OK1_i(Fl_Button*, void*) {
  saveChanges();
add_2_panel->hide();
refresh_app_browser(app_browser);
}
void PanelUI::cb_OK1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void PanelUI::cb_3_i(Fl_Button*, void*) {
  add_item();
}
void PanelUI::cb_3(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void PanelUI::cb_CLOSE1_i(Fl_Button*, void*) {
  add_2_panel->hide();
}
void PanelUI::cb_CLOSE1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_CLOSE1_i(o,v);
}

void PanelUI::cb_OK2_i(Fl_Button*, void*) {
  save_user_clock();
}
void PanelUI::cb_OK2(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_OK2_i(o,v);
}

void PanelUI::cb_clock_style_i(Fl_Input* o, void*) {
  const char* style = o->value();
std::string result = getClock(style);
clock_display->redraw_label();
clock_display->copy_label(result.c_str());
clock_display->redraw();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_clock_style(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_clock_style_i(o,v);
}

void PanelUI::cb_4_i(Fl_Browser* o, void*) {
  std::string item=o->text(o->value());
item= item.substr(0,2);
clock_style->insert(item.c_str());
//std::cerr<<"Click Clock: "<<item<<std::endl;
}
void PanelUI::cb_4(Fl_Browser* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void PanelUI::cb_Notes_i(Fl_Button*, void*) {
  clock_notes_window()->show();
}
void PanelUI::cb_Notes(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Notes_i(o,v);
}

void PanelUI::cb_Modifier_i(Fl_Button*, void*) {
  clock_info_window()->show();
}
void PanelUI::cb_Modifier(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Modifier_i(o,v);
}

void PanelUI::cb_CLOSE2_i(Fl_Button*, void*) {
  clock_info->hide();
}
void PanelUI::cb_CLOSE2(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_CLOSE2_i(o,v);
}

void PanelUI::cb_CLOSE3_i(Fl_Button*, void*) {
  clock_modifier_notes->hide();
}
void PanelUI::cb_CLOSE3(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_CLOSE3_i(o,v);
}

void PanelUI::cb_See_i(Fl_Button*, void*) {
  int thissys = system("bash -c 'xterm -geometry 90x24 -fa default -fs 10 -T \"ctime Manual\" -e \"man ctime\" & '");
if(thissys !=0){std::cerr<< "command did not return 0"<<std::endl;};
}
void PanelUI::cb_See(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_See_i(o,v);
}

void PanelUI::cb_OK3_i(Fl_Button*, void*) {
  conf_applist_window->hide();
}
void PanelUI::cb_OK3(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK3_i(o,v);
}

void PanelUI::cb_task_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"TaskListStyle");
}
void PanelUI::cb_task_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_task_bg_color_i(o,v);
}

void PanelUI::cb_task_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"TaskListStyle");
}
void PanelUI::cb_task_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_task_fg_color_i(o,v);
}

void PanelUI::cb_Day_i(Fl_Menu_*, void*) {
  changeClock("Day");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_Day(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Day_i(o,v);
}

void PanelUI::cb_24_i(Fl_Menu_*, void*) {
  changeClock("24");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_24(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_24_i(o,v);
}

void PanelUI::cb_12_i(Fl_Menu_*, void*) {
  changeClock("12");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_12(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_12_i(o,v);
}

void PanelUI::cb_Year_i(Fl_Menu_*, void*) {
  changeClock("Year");
std::string result = getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_Year(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Year_i(o,v);
}

void PanelUI::cb_Advanced_i(Fl_Menu_*, void*) {
  clock_window()->show();
}
void PanelUI::cb_Advanced(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Advanced_i(o,v);
}

unsigned char PanelUI::menu_clock_menu_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_clock_menu[] = {
 {"Day name Month Day 12 Hour", 0,  (Fl_Callback*)PanelUI::cb_Day, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"24 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_24, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"12 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Year Month Day 24 Hour clock", 0,  (Fl_Callback*)PanelUI::cb_Year, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"(Advanced) User Defined", 0,  (Fl_Callback*)PanelUI::cb_Advanced, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_OK4_i(Fl_Button*, void*) {
  conf_clock_window->hide();
}
void PanelUI::cb_OK4(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK4_i(o,v);
}

void PanelUI::cb_OK5_i(Fl_Button*, void*) {
  conf_indicator_window->hide();
}
void PanelUI::cb_OK5(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK5_i(o,v);
}

void PanelUI::cb_5_i(Fl_Button*, void*) {
  removeIndicator(indicator_browser);
}
void PanelUI::cb_5(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void PanelUI::cb_6_i(Fl_Button*, void*) {
  add_indicator()->show();
}
void PanelUI::cb_6(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_6_i(o,v);
}

void PanelUI::cb_OK6_i(Fl_Button*, void*) {
  std::string input;
const char* temp1 = manually_in->value();
if(temp1!=NULL)input=temp1;
std::string item;
const char* temp2 = hid_in->value();
if(temp2!=NULL)item=temp2;
change_manual_item(input, item);
conf_manual_window->hide();
}
void PanelUI::cb_OK6(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK6_i(o,v);
}

void PanelUI::cb_7_i(Fl_Button* o, void*) {
  std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0){
  makeWidgetIcon(iconFILE,o,48);
  icon_file->value(iconFILE.c_str());
};
}
void PanelUI::cb_7(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_7_i(o,v);
}

void PanelUI::cb_OK7_i(Fl_Button*, void*) {
  const char* testNum = tester->value();
if(testNum ==NULL){return;}
const char* icon = hidden_icon_name->value();
if(icon ==NULL){icon="application-default";}
const char* newLabel = app_menu->value();
if(newLabel==NULL){newLabel=gettext("Menu");}
labelMenu(testNum,newLabel);
setImageMenu(testNum,icon);
conf_menu_window->hide();
}
void PanelUI::cb_OK7(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK7_i(o,v);
}

void PanelUI::cb_icon_view_i(Fl_Button* o, void*) {
  std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0)makeWidgetIcon(iconFILE,o,48);
}
void PanelUI::cb_icon_view(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_icon_view_i(o,v);
}

void PanelUI::cb_8_i(Fl_Button*, void*) {
  const char* tmpTST =tester->value();
if(tmpTST!=NULL){showMenu(tmpTST);}
else{showMenu();};
}
void PanelUI::cb_8(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_8_i(o,v);
}

void PanelUI::cb_OK8_i(Fl_Button*, void*) {
  conf_swallow_window->hide();
}
void PanelUI::cb_OK8(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK8_i(o,v);
}

void PanelUI::cb_swallow_name_i(Fl_Input* o, void*) {
  const char* name = o->value();
if(name==NULL){return;}
setElementAttribute(currentPanel(),"Tray","Swallow","name",name);
}
void PanelUI::cb_swallow_name(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_swallow_name_i(o,v);
}

void PanelUI::cb_swallow_config_i(Fl_Input* o, void*) {
  const char* name = o->value();
if(name==NULL){return;}
setElementText(currentPanel(),"Tray","Swallow",name);
}
void PanelUI::cb_swallow_config(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_swallow_config_i(o,v);
}

void PanelUI::cb_OK9_i(Fl_Button*, void*) {
  conf_switcher->hide();
}
void PanelUI::cb_OK9(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK9_i(o,v);
}

void PanelUI::cb_Active_i(Fl_Button* o, void*) {
  one_color_Font(o,"PagerStyle");
}
void PanelUI::cb_Active(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Active_i(o,v);
}

void PanelUI::cb_Active1_i(Fl_Button* o, void*) {
  one_color_active(o,"PagerStyle");
}
void PanelUI::cb_Active1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Active1_i(o,v);
}

void PanelUI::cb_9_i(Fl_Button* o, void*) {
  one_color_Font(o,"PagerStyle");
}
void PanelUI::cb_9(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_9_i(o,v);
}

void PanelUI::cb_a_i(Fl_Button* o, void*) {
  one_color(o,"PagerStyle");
}
void PanelUI::cb_a(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_a_i(o,v);
}

void PanelUI::cb_num_desktop_w_i(Fl_Value_Input* o, void*) {
  int width = int((o->value()));
num_desktop_wh_CB("width",width,num_desktop_w,num_desktop_h);
}
void PanelUI::cb_num_desktop_w(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_num_desktop_w_i(o,v);
}

void PanelUI::cb_num_desktop_h_i(Fl_Value_Input* o, void*) {
  int height = int((o->value()));
num_desktop_wh_CB("height",height,num_desktop_w,num_desktop_h);
}
void PanelUI::cb_num_desktop_h(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_num_desktop_h_i(o,v);
}

void PanelUI::cb_Application_i(Fl_Button*, void*) {
  icon_for_desktop(shortcut_browser,app_command,icon_name,tooltip,app_icon_box);
}
void PanelUI::cb_Application(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Application_i(o,v);
}

void PanelUI::cb_app_command_i(Fl_Input* o, void*) {
  app_command_CB(o,app_command);
}
void PanelUI::cb_app_command(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_app_command_i(o,v);
}

void PanelUI::cb_b_i(Fl_Button*, void*) {
  if(add_new_shortcut(shortcut_browser,app_command,tooltip,icon_name,shortcut_border->value())){
  app_command->value("");
  app_command->redraw();
  icon_name->copy_label("");
  tooltip->value("");
  tooltip->redraw();
};
}
void PanelUI::cb_b(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_b_i(o,v);
}

void PanelUI::cb_ok_button_i(Fl_Button*, void*) {
  if(add_new_shortcut(shortcut_browser,app_command,tooltip,icon_name,shortcut_border->value())){
  debug_out("added current item to shortcuts");
}
saveChanges();
shortcut_window->hide();
refresh_app_browser(app_browser);
}
void PanelUI::cb_ok_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_ok_button_i(o,v);
}

void PanelUI::cb_c_i(Fl_Button*, void*) {
  int whichLine = shortcut_browser->value();
const char* lineIS = shortcut_browser->text(whichLine);
if (lineIS == NULL){return;}
std::string prog =lineIS;
if (prog.find("exec:")<prog.length()){
  deleteShortcut(prog);
  getShortcuts(shortcut_browser);
};
}
void PanelUI::cb_c(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_c_i(o,v);
}

void PanelUI::cb_app_icon_box_i(Fl_Button* o, void*) {
  std::string iconFILE=choose_an_icon();
if(iconFILE.compare("")!=0){
  makeWidgetIcon(iconFILE,o,48);
  icon_name->copy_label(iconFILE.c_str());
};
}
void PanelUI::cb_app_icon_box(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_app_icon_box_i(o,v);
}

void PanelUI::cb_CLOSE4_i(Fl_Button*, void*) {
  shortcut_window->hide();
}
void PanelUI::cb_CLOSE4(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_CLOSE4_i(o,v);
}

void PanelUI::cb_OKa_i(Fl_Button*, void*) {
  new_panel->hide();
}
void PanelUI::cb_OKa(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OKa_i(o,v);
}

void PanelUI::clear_shortcuts() {
  app_command->value("");
  app_command->redraw();
  tooltip->value("");
  tooltip->redraw();
  icon_name->copy_label("");
  icon_name->redraw();
}

void PanelUI::display(std::string filename) {
  if(filename.compare("")==0){return;}
  makeWidgetIcon(filename,icon_view,48);
}

Fl_Double_Window* PanelUI::make_window() {
  load();
  { Fl_Double_Window* o = panel_window = new Fl_Double_Window(285, 450, gettext("Panel Settings"));
    panel_window->color(FL_DARK1);
    panel_window->user_data((void*)(this));
    panel_window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 355, 665);
      o->color((Fl_Color)31);
      { Fl_Menu_Button* o = panel_chooser = new Fl_Menu_Button(5, 5, 110, 25);
        panel_chooser->box(FL_FLAT_BOX);
        panel_chooser->down_box(FL_FLAT_BOX);
        panel_chooser->color((Fl_Color)23);
        panel_chooser->selection_color((Fl_Color)51);
        panel_chooser->callback((Fl_Callback*)cb_panel_chooser);
        panel_chooser->when(3);
        { Fl_Menu_Item* o = &menu_panel_chooser[0];
          const char* text=gettext("Add a Panel");
          o->label(text);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[1];
          const char* text=gettext("Panel 1");
          o->label(text);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[2];
          hide_menu(o,2);
          const char* text=gettext("Panel 2");
          o->label(text);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[3];
          hide_menu(o,3);
          const char* text=gettext("Panel 3");
          o->label(text);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[4];
          hide_menu(o,4);
          const char* text=gettext("Panel 4");
          o->label(text);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[5];
          const char* text=gettext("Remove Current  Panel");
          o->label(text);
        }
        if (!menu_panel_chooser_i18n_done) {
          int i=0;
          for ( ; i<6; i++)
            if (menu_panel_chooser[i].label())
              menu_panel_chooser[i].label(gettext(menu_panel_chooser[i].label()));
          menu_panel_chooser_i18n_done = 1;
        }
        panel_chooser->menu(menu_panel_chooser);
        panel_menu_button_label(o);
      } // Fl_Menu_Button* panel_chooser
      { Fl_Tabs* o = new Fl_Tabs(0, 35, 285, 380);
        o->box(FL_FLAT_BOX);
        o->color(FL_DARK1);
        { Fl_Group* o = apps_tab = new Fl_Group(5, 60, 280, 350, gettext("Apps"));
          apps_tab->selection_color(FL_DARK2);
          { Fl_Button* o = new Fl_Button(50, 380, 30, 30, gettext("-"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->labelfont(1);
            o->labelsize(34);
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          { Fl_Browser* o = app_browser = new Fl_Browser(5, 65, 270, 310);
            app_browser->type(2);
            app_browser->box(FL_FLAT_BOX);
            app_browser->selection_color(FL_DARK_RED);
            app_browser->callback((Fl_Callback*)cb_app_browser);
            populateApps(o);
          } // Fl_Browser* app_browser
          { Fl_Button* o = new Fl_Button(95, 380, 30, 30);
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->image(image_gear16);
            o->callback((Fl_Callback*)cb_1);
          } // Fl_Button* o
          { choose_apps = new Fl_Button(5, 380, 30, 30, gettext("@+"));
            choose_apps->box(FL_FLAT_BOX);
            choose_apps->color((Fl_Color)23);
            choose_apps->callback((Fl_Callback*)cb_choose_apps);
          } // Fl_Button* choose_apps
          { Fl_Button* o = new Fl_Button(185, 380, 40, 30, gettext("@+98>"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->selection_color((Fl_Color)40);
            o->callback((Fl_Callback*)cb_98);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(235, 380, 40, 30, gettext("@+92>"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->selection_color((Fl_Color)40);
            o->callback((Fl_Callback*)cb_92);
          } // Fl_Button* o
          const char* text=gettext("Apps");o->label(text);
          apps_tab->end();
        } // Fl_Group* apps_tab
        { Fl_Group* o = new Fl_Group(0, 60, 275, 335, gettext("Appearance"));
          o->selection_color(FL_DARK2);
          o->hide();
          { Fl_Button* o = menu_bg_color = new Fl_Button(10, 102, 60, 25, gettext("Menu Background"));
            menu_bg_color->box(FL_FLAT_BOX);
            menu_bg_color->color((Fl_Color)23);
            menu_bg_color->callback((Fl_Callback*)cb_menu_bg_color);
            menu_bg_color->align(Fl_Align(FL_ALIGN_RIGHT));
            unsigned int c=0;
            unsigned int color = getBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_bg_color
          { Fl_Button* o = menu_fg_color = new Fl_Button(10, 144, 60, 25, gettext("Menu Selection"));
            menu_fg_color->box(FL_FLAT_BOX);
            menu_fg_color->color((Fl_Color)23);
            menu_fg_color->callback((Fl_Callback*)cb_menu_fg_color);
            menu_fg_color->align(Fl_Align(FL_ALIGN_RIGHT));
            unsigned int c=0;
            unsigned int color=getActiveBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_fg_color
          { Fl_Button* o = menu_font_color = new Fl_Button(10, 187, 60, 25, gettext("Menu Font Color"));
            menu_font_color->box(FL_FLAT_BOX);
            menu_font_color->color((Fl_Color)23);
            menu_font_color->callback((Fl_Callback*)cb_menu_font_color);
            menu_font_color->align(Fl_Align(FL_ALIGN_RIGHT));
            unsigned int c=0;
            unsigned int color = getFontColor(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_font_color
          { Fl_Slider* o = o_menu_slider = new Fl_Slider(10, 227, 90, 25, gettext("Opacity of Menu "));
            o_menu_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_menu_slider->type(1);
            o_menu_slider->box(FL_GTK_DOWN_BOX);
            o_menu_slider->color((Fl_Color)42);
            o_menu_slider->selection_color(FL_LIGHT1);
            o_menu_slider->step(0.02);
            o_menu_slider->value(1);
            o_menu_slider->callback((Fl_Callback*)cb_o_menu_slider);
            o_menu_slider->align(Fl_Align(FL_ALIGN_RIGHT));
            o_menu_slider->when(FL_WHEN_RELEASE_ALWAYS);
            const char* text=gettext("Opacity of Menu");o->label(text);
            float h=getOpacity("MenuStyle");
            o->value(h);
          } // Fl_Slider* o_menu_slider
          { Fl_Value_Input* o = o_menu_slider_v = new Fl_Value_Input(225, 227, 40, 25, gettext("%"));
            o_menu_slider_v->box(FL_FLAT_BOX);
            o_menu_slider_v->color((Fl_Color)23);
            o_menu_slider_v->labelsize(10);
            o_menu_slider_v->callback((Fl_Callback*)cb_o_menu_slider_v);
            o_menu_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_menu_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_menu_slider_v
          { Fl_Button* o = b_color = new Fl_Button(10, 272, 60, 25, gettext("Panel Color"));
            b_color->box(FL_FLAT_BOX);
            b_color->color((Fl_Color)23);
            b_color->callback((Fl_Callback*)cb_b_color);
            b_color->align(Fl_Align(FL_ALIGN_RIGHT));
            unsigned int c=0;
            unsigned int color = getBackground(c, "TrayStyle");
            o->color(color);
          } // Fl_Button* b_color
          { Fl_Button* o = button_color = new Fl_Button(10, 315, 60, 25, gettext("Panel Button Color"));
            button_color->box(FL_FLAT_BOX);
            button_color->color((Fl_Color)23);
            button_color->callback((Fl_Callback*)cb_button_color);
            button_color->align(Fl_Align(FL_ALIGN_RIGHT));
            unsigned int c=0;
            if(style_gone()){o->hide();}
            else{unsigned int color = getBackground(c,"TrayButtonStyle");o->color(color);}
          } // Fl_Button* button_color
          { Fl_Slider* o = o_slider = new Fl_Slider(10, 355, 90, 25, gettext("Opacity of Panel  "));
            o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_slider->type(1);
            o_slider->box(FL_GTK_DOWN_BOX);
            o_slider->color((Fl_Color)42);
            o_slider->selection_color(FL_LIGHT1);
            o_slider->step(0.02);
            o_slider->value(1);
            o_slider->callback((Fl_Callback*)cb_o_slider);
            o_slider->align(Fl_Align(FL_ALIGN_RIGHT));
            o_slider->when(FL_WHEN_RELEASE_ALWAYS);
            const char* text=gettext("Opacity of Panel");o->label(text);
            float h = getOpacity("TrayStyle");
            o->value(h);
          } // Fl_Slider* o_slider
          { Fl_Value_Input* o = o_slider_v = new Fl_Value_Input(225, 355, 40, 25, gettext("%"));
            o_slider_v->box(FL_FLAT_BOX);
            o_slider_v->color((Fl_Color)23);
            o_slider_v->labelsize(10);
            o_slider_v->callback((Fl_Callback*)cb_o_slider_v);
            o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_slider_v
          { Fl_Button* o = new Fl_Button(10, 70, 105, 25, gettext("Edit Menus"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->callback((Fl_Callback*)cb_Edit);
            const char* text=gettext("Edit Menus");o->label(text);
          } // Fl_Button* o
          const char* text=gettext("Appearance");o->label(text);
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 65, 280, 350, gettext("Size And Position"));
          o->selection_color(FL_DARK2);
          o->hide();
          { Fl_Menu_Button* o = new Fl_Menu_Button(10, 80, 125, 25, gettext("Panel Position"));
            o->tooltip(gettext("Move the current panel to a new position"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->selection_color((Fl_Color)51);
            { Fl_Menu_Item* o = &menu_Panel[0];
              const char* text=gettext("top");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_Panel[1];
              const char* text=gettext("bottom");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_Panel[2];
              const char* text=gettext("right");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_Panel[3];
              const char* text=gettext("left");o->label(text);
            }
            if (!menu_Panel_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_Panel[i].label())
                  menu_Panel[i].label(gettext(menu_Panel[i].label()));
              menu_Panel_i18n_done = 1;
            }
            o->menu(menu_Panel);
            const char* text=gettext("Panel Position");o->label(text);
          } // Fl_Menu_Button* o
          { Fl_Menu_Button* o = choose_autohide = new Fl_Menu_Button(10, 110, 150, 25, gettext("Autohide Position"));
            choose_autohide->tooltip(gettext("Specifies  the  location  to hide the tray when not\nactivated. Default  is  \
\"off\"  to  disable  hiding.\nPossible  values  are \"left\", \"right\", \"to\
p\", \"bottom\", and \"off\"."));
            choose_autohide->box(FL_FLAT_BOX);
            choose_autohide->color((Fl_Color)23);
            choose_autohide->selection_color((Fl_Color)23);
            { Fl_Menu_Item* o = &menu_choose_autohide[0];
              const char* text=gettext("top");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_choose_autohide[1];
              const char* text=gettext("bottom");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_choose_autohide[2];
              const char* text=gettext("right");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_choose_autohide[3];
              const char* text=gettext("left");o->label(text);
            }
            { Fl_Menu_Item* o = &menu_choose_autohide[4];
              const char* text=gettext("off");o->label(text);
            }
            if (!menu_choose_autohide_i18n_done) {
              int i=0;
              for ( ; i<5; i++)
                if (menu_choose_autohide[i].label())
                  menu_choose_autohide[i].label(gettext(menu_choose_autohide[i].label()));
              menu_choose_autohide_i18n_done = 1;
            }
            choose_autohide->menu(menu_choose_autohide);
            autohide(autohide_check,choose_autohide,autohide_pos);
            const char* text=gettext("Autohide Position");o->label(text);
          } // Fl_Menu_Button* choose_autohide
          { Fl_Check_Button* o = autohide_check = new Fl_Check_Button(165, 110, 95, 25, gettext("Autohide?"));
            autohide_check->tooltip(gettext("This will make the Panel hide when you aren\'t using it."));
            autohide_check->down_box(FL_GTK_DOWN_BOX);
            autohide_check->selection_color((Fl_Color)59);
            autohide_check->callback((Fl_Callback*)cb_autohide_check);
            autohide_check->when(FL_WHEN_CHANGED);
            autohide_check->hide();
            const char* text=gettext("Autohide?");o->label(text);
          } // Fl_Check_Button* autohide_check
          { Fl_Slider* o = w_slider = new Fl_Slider(10, 155, 180, 25, gettext("Width of Panel  "));
            w_slider->tooltip(gettext("0 is Full Length"));
            w_slider->type(1);
            w_slider->box(FL_GTK_DOWN_BOX);
            w_slider->color((Fl_Color)42);
            w_slider->selection_color((Fl_Color)29);
            w_slider->maximum(3000);
            w_slider->step(1);
            w_slider->value(32);
            w_slider->callback((Fl_Callback*)cb_w_slider);
            w_slider->align(Fl_Align(FL_ALIGN_TOP));
            w_slider->when(3);
            const char* text=gettext("Width of Panel");o->label(text);
            int h = getWidth();
            o->value(h);
          } // Fl_Slider* w_slider
          { Fl_Value_Input* o = width_input = new Fl_Value_Input(200, 155, 40, 25, gettext("pixels"));
            width_input->tooltip(gettext("The  width  of  the tray. 0 indicates that the tray\nshould compute an optima\
l width depending  on  what\nit  contains  and the layout. A negative value su\
btracts\nfrom with screen width. 0 is the default."));
            width_input->box(FL_FLAT_BOX);
            width_input->color((Fl_Color)23);
            width_input->labelsize(10);
            width_input->maximum(3000);
            width_input->callback((Fl_Callback*)cb_width_input);
            width_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = w_slider->value();
            o->value(v);
            const char* text=gettext("pixels");o->label(text);
          } // Fl_Value_Input* width_input
          { Fl_Slider* o = h_slider = new Fl_Slider(10, 200, 180, 25, gettext("Height of Panel  "));
            h_slider->tooltip(gettext("0 will base size from the current items in the panel"));
            h_slider->type(1);
            h_slider->box(FL_GTK_DOWN_BOX);
            h_slider->color((Fl_Color)42);
            h_slider->selection_color((Fl_Color)29);
            h_slider->maximum(3000);
            h_slider->step(1);
            h_slider->value(32);
            h_slider->callback((Fl_Callback*)cb_h_slider);
            h_slider->align(Fl_Align(FL_ALIGN_TOP));
            h_slider->when(FL_WHEN_RELEASE_ALWAYS);
            const char* text=gettext("Height of Panel");o->label(text);
            int h = getHeight();
            o->value(h);
          } // Fl_Slider* h_slider
          { Fl_Value_Input* o = height_input = new Fl_Value_Input(200, 200, 40, 25, gettext("pixels"));
            height_input->tooltip(gettext("The height of the tray. 0 indicates that  the  tray\nshould  compute an optim\
al height depending on what\nit contains and the layout. A negative  value  su\
btracts\nfrom the screen height. 0 is the default."));
            height_input->box(FL_FLAT_BOX);
            height_input->color((Fl_Color)23);
            height_input->labelsize(10);
            height_input->maximum(3000);
            height_input->callback((Fl_Callback*)cb_height_input);
            height_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = h_slider->value();
            o->value(v);
            const char* text=gettext("pixels");o->label(text);
          } // Fl_Value_Input* height_input
          { Fl_Box* o = new Fl_Box(5, 235, 185, 30, gettext("Advanced Options"));
            o->labelfont(1);
            o->labelsize(18);
            const char* text=gettext("Advanced Options");o->label(text);
          } // Fl_Box* o
          { Fl_Value_Input* o = new Fl_Value_Input(10, 265, 25, 25, gettext("X position"));
            o->tooltip(gettext("The x-coordinate of the tray. This may be  negative\nto indicate an offset fr\
om the right of the screen."));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_X);
            o->align(Fl_Align(FL_ALIGN_RIGHT));
            coordinate("x",o,1);
            const char* text=gettext("X position of panel");o->label(text);
          } // Fl_Value_Input* o
          { Fl_Value_Input* o = new Fl_Value_Input(155, 265, 25, 25, gettext("Y position"));
            o->tooltip(gettext("The  y-coordinate of the tray. This may be negative\nto indicate  an  offset \
 from  the  bottom  of  the\nscreen."));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_Y);
            o->align(Fl_Align(FL_ALIGN_RIGHT));
            coordinate("y",o,1);
            const char* text=gettext("Y position of panel");o->label(text);
          } // Fl_Value_Input* o
          { Fl_Slider* o = border_slider = new Fl_Slider(10, 380, 180, 25, gettext("Width of Panel Border"));
            border_slider->type(1);
            border_slider->box(FL_GTK_DOWN_BOX);
            border_slider->color((Fl_Color)42);
            border_slider->selection_color((Fl_Color)29);
            border_slider->maximum(32);
            border_slider->step(1);
            border_slider->callback((Fl_Callback*)cb_border_slider);
            border_slider->align(Fl_Align(FL_ALIGN_TOP));
            border_slider->when(FL_WHEN_RELEASE_ALWAYS);
            const char* text=gettext("Width of Panel Border");o->label(text);
            int border =getBorder();
            o->value(border);
          } // Fl_Slider* border_slider
          { Fl_Value_Input* o = border_input = new Fl_Value_Input(200, 380, 40, 25, gettext("pixels"));
            border_input->box(FL_FLAT_BOX);
            border_input->color((Fl_Color)23);
            border_input->labelsize(10);
            border_input->maximum(3000);
            border_input->callback((Fl_Callback*)cb_border_input);
            border_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = border_slider->value();
            o->value(v);
            const char* text=gettext("pixels");o->label(text);
          } // Fl_Value_Input* border_input
          { Fl_Output* o = halign = new Fl_Output(155, 330, 60, 25);
            halign->tooltip(gettext("The horizontal alignment of the Panel"));
            halign->box(FL_FLAT_BOX);
            halign->align(Fl_Align(FL_ALIGN_TOP));
            std::string val=getElementAttribute(currentPanel(),"Tray","halign");
            if(val.compare("")!=0){o->value(val.c_str());}
          } // Fl_Output* halign
          { Fl_Output* o = autohide_pos = new Fl_Output(165, 110, 105, 25);
            autohide_pos->tooltip(gettext("current autohide position (if any)"));
            autohide_pos->box(FL_FLAT_BOX);
            std::string val=getElementAttribute(currentPanel(),"Tray","autohide");
            if(val.compare("")!=0){o->value(val.c_str());}
          } // Fl_Output* autohide_pos
          { Fl_Output* o = valign = new Fl_Output(220, 330, 60, 25);
            valign->tooltip(gettext("The vertical alignment of the Panel"));
            valign->box(FL_FLAT_BOX);
            valign->align(Fl_Align(FL_ALIGN_TOP));
            std::string val=getElementAttribute(currentPanel(),"Tray","valign");
            if(val.compare("")!=0){o->value(val.c_str());}
          } // Fl_Output* valign
          { Fl_Menu_Button* o = new Fl_Menu_Button(155, 295, 60, 25, gettext("halign"));
            o->tooltip(gettext("Use \'Panel Position\' for easy configuration"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_halign_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_halign[i].label())
                  menu_halign[i].label(gettext(menu_halign[i].label()));
              menu_halign_i18n_done = 1;
            }
            o->menu(menu_halign);
          } // Fl_Menu_Button* o
          { Fl_Menu_Button* o = new Fl_Menu_Button(220, 295, 60, 25, gettext("valign"));
            o->tooltip(gettext("Use \'Panel Position\' for easy configuration"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_valign_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_valign[i].label())
                  menu_valign[i].label(gettext(menu_valign[i].label()));
              menu_valign_i18n_done = 1;
            }
            o->menu(menu_valign);
          } // Fl_Menu_Button* o
          { Fl_Menu_Button* o = new Fl_Menu_Button(80, 295, 60, 25, gettext("layout"));
            o->tooltip(gettext("Use \'Panel Position\' for easy configuration"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_layout_i18n_done) {
              int i=0;
              for ( ; i<2; i++)
                if (menu_layout[i].label())
                  menu_layout[i].label(gettext(menu_layout[i].label()));
              menu_layout_i18n_done = 1;
            }
            o->menu(menu_layout);
          } // Fl_Menu_Button* o
          { Fl_Output* o = layOut = new Fl_Output(80, 330, 60, 25);
            layOut->tooltip(gettext("The layout of the tray. The default is horizontal."));
            layOut->box(FL_FLAT_BOX);
            layOut->align(Fl_Align(FL_ALIGN_TOP));
            std::string val=getElementAttribute(currentPanel(),"Tray","layout");
            if(val.compare("")!=0){o->value(val.c_str());}
          } // Fl_Output* layOut
          { Fl_Menu_Button* o = new Fl_Menu_Button(10, 295, 60, 25, gettext("layer"));
            o->tooltip(gettext("Use \'Panel Position\' for easy configuration"));
            o->box(FL_FLAT_BOX);
            o->color((Fl_Color)23);
            if (!menu_layer_i18n_done) {
              int i=0;
              for ( ; i<3; i++)
                if (menu_layer[i].label())
                  menu_layer[i].label(gettext(menu_layer[i].label()));
              menu_layer_i18n_done = 1;
            }
            o->menu(menu_layer);
          } // Fl_Menu_Button* o
          { Fl_Output* o = layer = new Fl_Output(10, 330, 60, 25);
            layer->tooltip(gettext("The layer of the tray. The default is above."));
            layer->box(FL_FLAT_BOX);
            layer->align(Fl_Align(FL_ALIGN_TOP));
            std::string val=getElementAttribute(currentPanel(),"Tray","layer");
            if(val.compare("")!=0){o->value(val.c_str());}
          } // Fl_Output* layer
          const char* text=gettext("Size And Position");o->label(text);
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(165, 420, 57, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
        const char* text=gettext("Cancel");o->label(text);
      } // Fl_Button* o
      { Fl_Button* o = save_button = new Fl_Button(231, 420, 45, 25, gettext("OK"));
        save_button->tooltip(gettext("Write to configuration file"));
        save_button->box(FL_FLAT_BOX);
        save_button->color((Fl_Color)61);
        save_button->selection_color((Fl_Color)59);
        save_button->labelcolor((Fl_Color)55);
        save_button->callback((Fl_Callback*)cb_save_button);
        const char* text=gettext("OK");o->label(text);
      } // Fl_Button* save_button
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_panel_xpm);
    panel_window->xclass("jsm-panel");
    panel_window->end();
    panel_window->resizable(panel_window);
  } // Fl_Double_Window* panel_window
  return panel_window;
}

Fl_Double_Window* PanelUI::add_indicator() {
  { Fl_Double_Window* o = indicator_win = new Fl_Double_Window(155, 185, gettext("Add Indicator"));
    indicator_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(105, 140, 45, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(45, 140, 55, 30, gettext("CLOSE"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)64);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CLOSE);
    } // Fl_Button* o
    { Fl_Browser* o = add_indicator_browser = new Fl_Browser(5, 5, 145, 130);
      add_indicator_browser->type(2);
      add_indicator_browser->box(FL_FLAT_BOX);
      add_indicator_browser->selection_color(FL_DARK_RED);
      listIndicators(o);
    } // Fl_Browser* add_indicator_browser
    { Fl_Button* o = new Fl_Button(10, 140, 30, 30, gettext("@+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_2);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    indicator_win->end();
  } // Fl_Double_Window* indicator_win
  return indicator_win;
}

Fl_Double_Window* PanelUI::add_to_panel() {
  { Fl_Double_Window* o = add_2_panel = new Fl_Double_Window(175, 265, gettext("Add to Panel"));
    add_2_panel->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(120, 225, 45, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)62);
      o->selection_color(FL_DARK_GREEN);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK1);
      const char* text=gettext("OK");o->label(text);
    } // Fl_Button* o
    { Fl_Browser* o = panel_items_browser = new Fl_Browser(5, 5, 160, 215);
      panel_items_browser->type(2);
      panel_items_browser->box(FL_FLAT_BOX);
      panel_items_browser->selection_color(FL_DARK_RED);
      new_panel_items(o);
    } // Fl_Browser* panel_items_browser
    { Fl_Button* o = new Fl_Button(5, 225, 30, 30, gettext("@+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(55, 225, 60, 30, gettext("CLOSE"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)64);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CLOSE1);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    const char* text=gettext("Add to Panel");o->label(text);
    add_2_panel->xclass("jsm-panel");
    add_2_panel->end();
  } // Fl_Double_Window* add_2_panel
  return add_2_panel;
}

Fl_Double_Window* PanelUI::clock_window() {
  { Fl_Double_Window* o = clock_config_window = new Fl_Double_Window(460, 540, gettext("Configure Clock"));
    clock_config_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 455, 540);
      { Fl_Button* o = new Fl_Button(380, 505, 75, 30, gettext("OK"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)61);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_OK2);
        Fl_Group::current()->resizable(o);
        const char* text=gettext("OK");o->label(text);
      } // Fl_Button* o
      { Fl_Input* o = clock_style = new Fl_Input(45, 505, 290, 30, gettext("style"));
        clock_style->box(FL_FLAT_BOX);
        clock_style->selection_color(FL_DARK_RED);
        clock_style->callback((Fl_Callback*)cb_clock_style);
        clock_style->when(3);
        const char* text=gettext("style");o->label(text);
      } // Fl_Input* clock_style
      { Fl_Browser* o = new Fl_Browser(5, 5, 450, 405);
        o->type(2);
        o->box(FL_FLAT_BOX);
        o->selection_color(FL_DARK_RED);
        o->callback((Fl_Callback*)cb_4);
        populateClocks(o);
      } // Fl_Browser* o
      { clock_display = new Fl_Output(10, 470, 445, 25);
        clock_display->box(FL_FLAT_BOX);
        clock_display->labelfont(1);
        clock_display->labelsize(18);
        clock_display->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Output* clock_display
      { Fl_Button* o = new Fl_Button(5, 415, 75, 30, gettext("Notes"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Notes);
        const char* text=gettext("Notes");o->label(text);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 415, 110, 30, gettext("Modifier Notes"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)23);
        o->callback((Fl_Callback*)cb_Modifier);
        const char* text=gettext("Modifier Notes");o->label(text);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    startup(o,jsm_panel_xpm);
    const char* text=gettext("Configure Clock");o->label(text);
    clock_config_window->xclass("jsm-panel");
    clock_config_window->end();
    clock_config_window->resizable(clock_config_window);
  } // Fl_Double_Window* clock_config_window
  return clock_config_window;
}

Fl_Double_Window* PanelUI::clock_notes_window() {
  { Fl_Double_Window* o = clock_info = new Fl_Double_Window(350, 435, gettext("Notes"));
    clock_info->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(5, 5, 345, 400);
      { Fl_Box* o = new Fl_Box(5, 5, 335, 390, gettext("ISO 8601 week dates %G,  %g,  and  %V yield values calculated from the week-b\
ased year defined by the ISO 8601 standard.  In this system, weeks start  on a\
  Monday,  and are numbered from 01, for the first week, up to 52 or 53, for t\
he last week.  Week 1 is the first week where four  or more  days fall within \
the new year (or, synonymously, week 01 is: the first week of the year that co\
ntains a Thursday; or, the  week that  has 4 January in it).  When three of fe\
wer days of the first calendar week of the new year fall within that year, the\
n the  ISO 8601 week-based system counts those days as part of week 53 of the \
preceding year.  For example, 1 January 2010 is a Friday,  meaning that  just \
 three  days of that calendar week fall in 2010.  Thus, the ISO 8601 week-base\
d system considers these days to be part  of week  53 (%V) of the year 2009 (%\
G); week 01 of ISO 8601 year 2010 starts on Monday, 4 January 2010."));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)55);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      o->end();
    } // Fl_Scroll* o
    { Fl_Button* o = new Fl_Button(150, 400, 60, 30, gettext("CLOSE"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)64);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CLOSE2);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    clock_info->xclass("jsm-panel");
    clock_info->end();
    clock_info->resizable(clock_info);
  } // Fl_Double_Window* clock_info
  return clock_info;
}

Fl_Double_Window* PanelUI::clock_info_window() {
  { Fl_Double_Window* o = clock_modifier_notes = new Fl_Double_Window(350, 400, gettext("Modifier Notes"));
    clock_modifier_notes->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(5, 5, 350, 395);
      { Fl_Box* o = new Fl_Box(5, 5, 340, 350, gettext("Some conversion specifications can be modified  by  preceding  the conversion\
  specifier character by the E or O modifier to indicate that an alternative f\
ormat should be  used.   If  the  alternative format or specification does not\
 exist for the current locale, the behavior will be as if  the  unmodified  co\
nversion  specification were  used.  (SU) The Single UNIX Specification mentio\
ns %Ec, %EC, %Ex, %EX, %Ey, %EY, %Od, %Oe, %OH, %OI, %Om, %OM, %OS,  %Ou,  %OU\
, %OV,  %Ow,  %OW, %Oy, where the effect of the O modifier is to use alternati\
ve numeric symbols (say, roman numerals), and that of the E  modifier  is  to \
use a locale-dependent alternative representation.\nThe broken-down time struc\
ture tm is  defined  in  <time.h>."));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)55);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(285, 360, 60, 30, gettext("CLOSE"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)64);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_CLOSE3);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    { Fl_Button* o = new Fl_Button(5, 360, 130, 30, gettext("See also ctime"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_See);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    clock_modifier_notes->xclass("jsm-panel");
    clock_modifier_notes->end();
    clock_modifier_notes->resizable(clock_modifier_notes);
  } // Fl_Double_Window* clock_modifier_notes
  return clock_modifier_notes;
}

Fl_Double_Window* PanelUI::config_applist_window() {
  { Fl_Double_Window* o = conf_applist_window = new Fl_Double_Window(235, 70, gettext("Running App List"));
    conf_applist_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(165, 35, 60, 25, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK3);
    } // Fl_Button* o
    { Fl_Button* o = task_bg_color = new Fl_Button(95, 35, 60, 25, gettext("Open Apps"));
      task_bg_color->box(FL_FLAT_BOX);
      task_bg_color->color((Fl_Color)23);
      task_bg_color->callback((Fl_Callback*)cb_task_bg_color);
      task_bg_color->align(Fl_Align(FL_ALIGN_LEFT));
      getColorFromItem(true,"TaskListStyle","Background",o);
    } // Fl_Button* task_bg_color
    { Fl_Button* o = task_fg_color = new Fl_Button(95, 5, 60, 25, gettext("Current App"));
      task_fg_color->box(FL_FLAT_BOX);
      task_fg_color->color((Fl_Color)23);
      task_fg_color->callback((Fl_Callback*)cb_task_fg_color);
      task_fg_color->align(Fl_Align(FL_ALIGN_LEFT));
      getColorFromItem(true,"TaskListStyle","Foreground",o);
    } // Fl_Button* task_fg_color
    startup(o,jsm_panel_xpm);
    conf_applist_window->xclass("jsm-panel");
    conf_applist_window->end();
  } // Fl_Double_Window* conf_applist_window
  return conf_applist_window;
}

Fl_Double_Window* PanelUI::config_clock_window() {
  { Fl_Double_Window* o = conf_clock_window = new Fl_Double_Window(305, 70, gettext("Configure Clock"));
    conf_clock_window->user_data((void*)(this));
    { clock_menu = new Fl_Menu_Button(5, 5, 130, 25, gettext("Clock Format"));
      clock_menu->box(FL_FLAT_BOX);
      clock_menu->color((Fl_Color)23);
      clock_menu->selection_color((Fl_Color)23);
      { Fl_Menu_Item* o = &menu_clock_menu[0];
        const char* text=gettext("Day name Month Day 12 Hour");
        o->label(text);
      }
      { Fl_Menu_Item* o = &menu_clock_menu[1];
        const char* text=gettext("24 Hour Clock");
        o->label(text);
      }
      { Fl_Menu_Item* o = &menu_clock_menu[2];
        const char* text=gettext("12 Hour Clock");
        o->label(text);
      }
      { Fl_Menu_Item* o = &menu_clock_menu[3];
        const char* text=gettext("Year Month Day 24 Hour clock");
        o->label(text);
      }
      { Fl_Menu_Item* o = &menu_clock_menu[4];
        const char* text=gettext("(Advanced) User Defined");
        o->label(text);
      }
      if (!menu_clock_menu_i18n_done) {
        int i=0;
        for ( ; i<5; i++)
          if (menu_clock_menu[i].label())
            menu_clock_menu[i].label(gettext(menu_clock_menu[i].label()));
        menu_clock_menu_i18n_done = 1;
      }
      clock_menu->menu(menu_clock_menu);
    } // Fl_Menu_Button* clock_menu
    { Fl_Button* o = new Fl_Button(235, 35, 60, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK4);
    } // Fl_Button* o
    { Fl_Output* o = clock_displayer = new Fl_Output(140, 30, 160, 30);
      clock_displayer->box(FL_NO_BOX);
      clock_displayer->align(Fl_Align(FL_ALIGN_TOP));
      std::string clock_text = getClock();
      o->copy_label(clock_text.c_str());
      o->redraw_label();
    } // Fl_Output* clock_displayer
    { Fl_Input* o = new Fl_Input(155, 55, 185, 25, gettext("Program to Launch"));
      o->tooltip(gettext("Usually used for a calendar or analog clock"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color(FL_DARK_RED);
      o->hide();
      o->deactivate();
      o->value("xclock");
    } // Fl_Input* o
    startup(o,jsm_panel_xpm);
    conf_clock_window->xclass("jsm-panel");
    conf_clock_window->end();
  } // Fl_Double_Window* conf_clock_window
  return conf_clock_window;
}

Fl_Double_Window* PanelUI::config_indicator_window() {
  { Fl_Double_Window* o = conf_indicator_window = new Fl_Double_Window(260, 215, gettext("Configure Indicators"));
    conf_indicator_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(195, 180, 60, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK5);
    } // Fl_Button* o
    { Fl_Browser* o = indicator_browser = new Fl_Browser(5, 5, 250, 170);
      indicator_browser->type(2);
      indicator_browser->box(FL_FLAT_BOX);
      indicator_browser->selection_color((Fl_Color)80);
      getIndicators(o);
    } // Fl_Browser* indicator_browser
    { Fl_Button* o = new Fl_Button(50, 180, 30, 30, gettext("-"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->labelfont(1);
      o->labelsize(34);
      o->callback((Fl_Callback*)cb_5);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(5, 180, 30, 30, gettext("@+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_6);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    conf_indicator_window->xclass("jsm-panel");
    conf_indicator_window->end();
  } // Fl_Double_Window* conf_indicator_window
  return conf_indicator_window;
}

Fl_Double_Window* PanelUI::configure_manually_window(std::string icon) {
  { Fl_Double_Window* o = conf_manual_window = new Fl_Double_Window(360, 195, gettext("Manual Editing"));
    conf_manual_window->user_data((void*)(this));
    { Fl_Input* o = manually_in = new Fl_Input(10, 10, 340, 30);
      manually_in->box(FL_FLAT_BOX);
      o->value();
    } // Fl_Input* manually_in
    { Fl_Button* o = new Fl_Button(300, 165, 50, 25, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK6);
    } // Fl_Button* o
    { label_input = new Fl_Input(105, 90, 245, 30, gettext("Label"));
      label_input->tooltip(gettext("The text that pops up when you hover"));
      label_input->box(FL_FLAT_BOX);
      label_input->selection_color((Fl_Color)80);
    } // Fl_Input* label_input
    { Fl_Button* o = new Fl_Button(10, 45, 50, 50);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_7);
      if(icon.compare("")!=0)makeWidgetIcon(icon,o,48);
    } // Fl_Button* o
    { hid_in = new Fl_Input(10, 10, 340, 30);
      hid_in->box(FL_FLAT_BOX);
      hid_in->hide();
    } // Fl_Input* hid_in
    { icon_file = new Fl_Input(105, 50, 245, 30, gettext("Icon"));
      icon_file->box(FL_FLAT_BOX);
    } // Fl_Input* icon_file
    { tooltip_label = new Fl_Input(105, 130, 245, 30, gettext("Tooltip"));
      tooltip_label->tooltip(gettext("The text that pops up when you hover"));
      tooltip_label->box(FL_FLAT_BOX);
      tooltip_label->selection_color((Fl_Color)80);
    } // Fl_Input* tooltip_label
    startup(o,jsm_panel_xpm);
    conf_manual_window->xclass("jsm-panel");
    conf_manual_window->end();
  } // Fl_Double_Window* conf_manual_window
  return conf_manual_window;
}

Fl_Double_Window* PanelUI::config_menu_window(std::string file) {
  { Fl_Double_Window* o = conf_menu_window = new Fl_Double_Window(235, 120, gettext("Configure Menu"));
    conf_menu_window->labelfont(14);
    conf_menu_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(170, 90, 60, 25, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)69);
      o->labelfont(1);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK7);
    } // Fl_Button* o
    { app_menu = new Fl_Input(95, 5, 130, 25, gettext("Button Text"));
      app_menu->tooltip(gettext("Text for the Button that shows the menu"));
      app_menu->box(FL_FLAT_BOX);
      app_menu->color((Fl_Color)55);
      app_menu->selection_color(FL_DARK_RED);
      app_menu->when(FL_WHEN_CHANGED);
    } // Fl_Input* app_menu
    { Fl_Button* o = icon_view = new Fl_Button(45, 35, 50, 50, gettext("Icon"));
      icon_view->tooltip(gettext("Choose an Icon"));
      icon_view->box(FL_FLAT_BOX);
      icon_view->color((Fl_Color)23);
      icon_view->callback((Fl_Callback*)cb_icon_view);
      icon_view->align(Fl_Align(644));
      if(file.compare("")!=0)makeWidgetIcon(file,o,48);
    } // Fl_Button* icon_view
    { hidden_icon_name = new Fl_Input(5, 90, 155, 25);
      hidden_icon_name->tooltip(gettext("The icon file name"));
      hidden_icon_name->box(FL_FLAT_BOX);
      hidden_icon_name->color((Fl_Color)23);
    } // Fl_Input* hidden_icon_name
    { tester = new Fl_Output(150, 40, 25, 25, gettext("Menu"));
      tester->tooltip(gettext("The root menu the button is tied to"));
      tester->box(FL_FLAT_BOX);
      tester->color((Fl_Color)55);
    } // Fl_Output* tester
    { Fl_Button* o = new Fl_Button(180, 35, 30, 30);
      o->tooltip(gettext("Configure the menu items"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->image(image_gear16);
      o->callback((Fl_Callback*)cb_8);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    conf_menu_window->xclass("jsm-panel");
    conf_menu_window->end();
  } // Fl_Double_Window* conf_menu_window
  return conf_menu_window;
}

Fl_Double_Window* PanelUI::config_swallow_window() {
  { Fl_Double_Window* o = conf_swallow_window = new Fl_Double_Window(465, 70, gettext("Configure Swallowed Application"));
    conf_swallow_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(395, 40, 60, 25, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK8);
    } // Fl_Button* o
    { Fl_Input* o = swallow_name = new Fl_Input(85, 40, 155, 25, gettext("App Name"));
      swallow_name->tooltip(gettext("This MUST be the same as the executable\'s name"));
      swallow_name->box(FL_FLAT_BOX);
      swallow_name->color((Fl_Color)53);
      swallow_name->selection_color(FL_DARK_RED);
      swallow_name->callback((Fl_Callback*)cb_swallow_name);
      swallow_name->when(FL_WHEN_CHANGED);
      std::string name = getElementAttribute(currentPanel(),"Tray","Swallow","name");
      o->value(name.c_str());
    } // Fl_Input* swallow_name
    { Fl_Input* o = swallow_config = new Fl_Input(85, 10, 370, 25, gettext("Configure"));
      swallow_config->box(FL_FLAT_BOX);
      swallow_config->color((Fl_Color)53);
      swallow_config->selection_color(FL_DARK_RED);
      swallow_config->callback((Fl_Callback*)cb_swallow_config);
      swallow_config->when(FL_WHEN_CHANGED);
      std::string name=getElementText(currentPanel(),"Tray","Swallow");
      o->value(name.c_str());
    } // Fl_Input* swallow_config
    { Fl_Value_Input* o = new Fl_Value_Input(285, 40, 25, 25, gettext("Width"));
      o->tooltip(gettext("The  width of the swallowed program. 0 indicates\nthat the width  should  be \
 determined\nfrom  the  tray  and size requested from the\nprogram. 0 is the d\
efault."));
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_DARK_RED);
      o->deactivate();
    } // Fl_Value_Input* o
    { Fl_Value_Input* o = new Fl_Value_Input(365, 40, 25, 25, gettext("Height"));
      o->tooltip(gettext("The  height of the swallowed program. 0 indicates\nthat the height  should  b\
e  determined\nfrom  the  tray  and size requested from the\nprogram. 0 is the\
 default."));
      o->box(FL_FLAT_BOX);
      o->selection_color(FL_DARK_RED);
      o->deactivate();
    } // Fl_Value_Input* o
    startup(o,jsm_panel_xpm);
    conf_swallow_window->xclass("jsm-panel");
    conf_swallow_window->end();
  } // Fl_Double_Window* conf_swallow_window
  return conf_swallow_window;
}

Fl_Double_Window* PanelUI::config_switcher_window() {
  { Fl_Double_Window* o = conf_switcher = new Fl_Double_Window(215, 200, gettext("Configure Switcher"));
    conf_switcher->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(150, 165, 60, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK9);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(85, 50, 90, 30, gettext("Foreground"));
      o->box(FL_FLAT_BOX);
      if(style_gone()){o->hide();}
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(90, 100, 90, 30, gettext("Background"));
      o->box(FL_FLAT_BOX);
      if(style_gone()){o->hide();}
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(55, 75, 75, 30, gettext("Active"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Active);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      if(style_gone()){o->hide();}
      else{getColorFromItem(true,"PagerStyle","Foreground",o);}
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(55, 125, 75, 30, gettext("Active"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_Active1);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      if(style_gone()){o->hide();}
      else{getColorFromItem(true,"PagerStyle","Background",o);}
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(135, 75, 75, 30);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_9);
      if(style_gone()){o->hide();}
      else{getColorFromItem(false,"PagerStyle","Foreground",o);}
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(135, 125, 75, 30);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->callback((Fl_Callback*)cb_a);
      if(style_gone()){o->hide();}
      else{getColorFromItem(false,"PagerStyle","Background",o);}
    } // Fl_Button* o
    { Fl_Value_Input* o = num_desktop_w = new Fl_Value_Input(190, 1, 20, 24, gettext("Number of Desktops Wide"));
      num_desktop_w->box(FL_FLAT_BOX);
      num_desktop_w->color((Fl_Color)53);
      num_desktop_w->callback((Fl_Callback*)cb_num_desktop_w);
      int width = getIntAttribute("Desktops","width");
      o->value(width);
    } // Fl_Value_Input* num_desktop_w
    { Fl_Value_Input* o = num_desktop_h = new Fl_Value_Input(190, 30, 20, 25, gettext("Number of Desktops High "));
      num_desktop_h->box(FL_FLAT_BOX);
      num_desktop_h->color((Fl_Color)53);
      num_desktop_h->callback((Fl_Callback*)cb_num_desktop_h);
      int height = getIntAttribute("Desktops","height");
      o->value(height);
    } // Fl_Value_Input* num_desktop_h
    startup(o,jsm_panel_xpm);
    conf_switcher->xclass("jsm-panel");
    conf_switcher->end();
  } // Fl_Double_Window* conf_switcher
  return conf_switcher;
}

Fl_Double_Window* PanelUI::make_shortcut_window() {
  { Fl_Double_Window* o = shortcut_window = new Fl_Double_Window(305, 335, gettext("Choose an application to add"));
    shortcut_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(5, 5, 105, 25, gettext("Application"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color((Fl_Color)40);
      o->callback((Fl_Callback*)cb_Application);
    } // Fl_Button* o
    { app_command = new Fl_Input(115, 5, 185, 25);
      app_command->tooltip(gettext("You can add arguments here"));
      app_command->box(FL_FLAT_BOX);
      app_command->selection_color((Fl_Color)80);
      app_command->callback((Fl_Callback*)cb_app_command);
      app_command->align(Fl_Align(FL_ALIGN_RIGHT));
      app_command->when(FL_WHEN_ENTER_KEY);
    } // Fl_Input* app_command
    { tooltip = new Fl_Input(115, 35, 185, 25, gettext("Tooltip Label"));
      tooltip->box(FL_FLAT_BOX);
      tooltip->selection_color((Fl_Color)80);
    } // Fl_Input* tooltip
    { Fl_Button* o = new Fl_Button(5, 300, 30, 30, gettext("@+"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color((Fl_Color)40);
      o->callback((Fl_Callback*)cb_b);
    } // Fl_Button* o
    { ok_button = new Fl_Button(250, 300, 50, 30, gettext("SAVE"));
      ok_button->tooltip(gettext("Write to configuration file"));
      ok_button->box(FL_FLAT_BOX);
      ok_button->color((Fl_Color)61);
      ok_button->selection_color((Fl_Color)59);
      ok_button->labelcolor((Fl_Color)55);
      ok_button->callback((Fl_Callback*)cb_ok_button);
    } // Fl_Button* ok_button
    { shortcut_border = new Fl_Check_Button(10, 355, 265, 25, gettext("Show a Border around the Button?"));
      shortcut_border->tooltip(gettext("The button you are adding can be borderless, if you like"));
      shortcut_border->box(FL_FLAT_BOX);
      shortcut_border->down_box(FL_GTK_DOWN_BOX);
      shortcut_border->selection_color(FL_DARK_GREEN);
      shortcut_border->hide();
      shortcut_border->deactivate();
    } // Fl_Check_Button* shortcut_border
    { Fl_Browser* o = shortcut_browser = new Fl_Browser(5, 115, 295, 180, gettext("Current Panel Buttons"));
      shortcut_browser->type(2);
      shortcut_browser->box(FL_FLAT_BOX);
      shortcut_browser->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
      shortcut_browser->when(FL_WHEN_NEVER);
      getShortcuts(o);
    } // Fl_Browser* shortcut_browser
    { Fl_Button* o = new Fl_Button(40, 300, 30, 30, gettext("-"));
      o->tooltip(gettext("Remove application launcher"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)23);
      o->selection_color((Fl_Color)40);
      o->labelfont(1);
      o->labelsize(45);
      o->callback((Fl_Callback*)cb_c);
    } // Fl_Button* o
    { icon_name = new Fl_Box(115, 65, 185, 25, gettext("Icon File Name"));
      icon_name->box(FL_FLAT_BOX);
      icon_name->color(FL_BACKGROUND2_COLOR);
    } // Fl_Box* icon_name
    { app_icon_box = new Fl_Button(5, 55, 55, 55);
      app_icon_box->box(FL_FLAT_BOX);
      app_icon_box->color((Fl_Color)23);
      app_icon_box->selection_color((Fl_Color)41);
      app_icon_box->callback((Fl_Callback*)cb_app_icon_box);
    } // Fl_Button* app_icon_box
    { Fl_Button* o = new Fl_Button(185, 300, 60, 30, gettext("CLOSE"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)64);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_CLOSE4);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    shortcut_window->xclass("jsm-panel");
    shortcut_window->end();
    shortcut_window->resizable(shortcut_window);
  } // Fl_Double_Window* shortcut_window
  return shortcut_window;
}

Fl_Double_Window* PanelUI::new_panel_window() {
  { Fl_Double_Window* o = new_panel = new Fl_Double_Window(235, 85, gettext("Add a Panel"));
    new_panel->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(0, 0, 240, 50, gettext("Only Four Panels are supported"));
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(85, 45, 55, 30, gettext("OK"));
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)62);
      o->selection_color((Fl_Color)58);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OKa);
    } // Fl_Button* o
    startup(o,jsm_panel_xpm);
    new_panel->xclass("jsm-panel");
    new_panel->end();
  } // Fl_Double_Window* new_panel
  return new_panel;
}

Fl_Double_Window* PanelUI::no_config() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(190, 35, gettext("Nothing to Configure"));
    w = o;
    o->user_data((void*)(this));
    { new Fl_Box(5, 5, 175, 20, gettext("Nothing to Configure"));
    } // Fl_Box* o
    startup(o,jsm_panel_xpm);
    o->xclass("jsm-panel");
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void PanelUI::add_item() {
  unsigned int line = panel_items_browser->value();
  switch (line){
    case 1:
      //Menu
      add_new_menu();
      break;
    case 2:
      //Clock
      addClock();
      config_clock_window()->show();
      break;
    case 3:
      //Desktop Switcher
      addPager();
      config_switcher_window()->show();
      break;
    case 4:
      //Indicators
      config_indicator_window()->show();
      add_indicator()->show();
      break;
    case 5:
      //Running App List
      addTaskList();
      config_applist_window()->show();
      break;
    case 6:
      //Launcher
      make_shortcut_window()->show();
      break;
    case 7:
      //Swallow
      //app.
      std::cout<<"swallow"<<std::endl;
      break;
  }
  populateApps(app_browser);
}

void PanelUI::cancel_button() {
  setJSMItem("panel","1");
  cancel();
  panel_window->hide();
  //UI ux;ux.showSettings();
}

void PanelUI::change_manual_item(std::string input, std::string old_input) {
  std::string tooltip;
  const char* TT=tooltip_label->value();
  if(TT!=NULL)tooltip=TT;
  std::string icon;
  const char* IC = icon_file->value();
  if(IC!=NULL)icon=IC;
  std::string label;
  const char* LBL=label_input->value();
  if(LBL!=NULL)label=LBL;
  switchButton(old_input,input,tooltip,icon,label);
}

void PanelUI::coordinate(const char* xy, Fl_Value_Input *o, int get1_set2) {
  if(get1_set2 == 1){
    int x = getCoordinate(xy);
    o->value(x);
  }
  else if (get1_set2 == 2){
    int value=o->value();
    setCoordinate(xy,value);
  }
  else{
  std::cerr<<"coordinate() function called incorrectly"<<std::endl;
  }
}

void PanelUI::config_Item(std::string whichItem) {
  std::string RUNNINGAPPLIST=gettext("Running App List");
  std::string INDICATORS=gettext("Indicators");
  std::string CLOCK=gettext("Clock");
  std::string SWALLOW=gettext("Swallow");
  std::string MENU=gettext("Menu");
  std::string DESKSWITCH=gettext("Desktop Switcher");
  std::string LAUNCHER=gettext("Launcher");
  std::string rootMenu="root:";
  unsigned found = whichItem.find(MENU);
  if(found<whichItem.length()){
    std::string temp=whichItem;
    if(temp.length()>MENU.length()+1){temp=temp.erase(0,MENU.length()+1);}
    std::string icon = getImageMenu(temp);
    config_menu_window(icon)->show();
    std::string temptest=temp;
    if(temptest.length()>rootMenu.length()){temptest=temptest.erase(0,rootMenu.length());}
    tester->value(temptest.c_str());
    std::string l= getLabelMenu(temp);
    hidden_icon_name->value(icon.c_str());
    app_menu->value(l.c_str());
  }
  else{
    if(whichItem.compare(DESKSWITCH)==0){config_switcher_window()->show();}
    else if(whichItem.compare(RUNNINGAPPLIST)==0){
      if(!style_gone()){config_applist_window()->show();}
      else{no_config()->show();}
    }
    else if(whichItem.compare(INDICATORS)==0){config_indicator_window()->show();}
    else if(whichItem.compare(CLOCK)==0){config_clock_window()->show();}
    else if(whichItem.find(LAUNCHER)<whichItem.length()){
      std::string temp=whichItem;
      if(temp.length()>LAUNCHER.length()+1){temp=temp.erase(0,LAUNCHER.length()+1);}
      std::string icon = getImageMenu(temp);
      configure_manually_window(icon)->show();
      icon_file->value(icon.c_str());
      std::string l= getLabelMenu(temp);
      manually_in->value(temp.c_str());
    }
    else if(whichItem.compare("")==0){no_config()->show();}
    else if(whichItem.find(SWALLOW)<whichItem.length()){config_swallow_window()->show();}
    else{
      configure_manually_window("")->show();
      manually_in->value(whichItem.c_str());
     }
  }
}

void PanelUI::displayAPPicon(std::string filename,Fl_Widget* widget) {
  makeWidgetIcon(filename,widget,48);
  //widget->redraw();
}

void PanelUI::Menu_CB(int num) {
  std::string LABEL = Menu_Label(num);
  panel_chooser->copy_label(LABEL.c_str());
  panel_chooser->redraw();
  populateApps(app_browser);
  //panel_window->hide();
}

void PanelUI::move_up() {
  unsigned int appLine=app_browser->value();
  unsigned int size =app_browser->size();
  if(appLine <= size && appLine !=0){
    moveUp(appLine);
    populateApps(app_browser);
  }
  if(appLine-1 != 0 )app_browser->select(appLine-1);
  else app_browser->select(1);
}

void PanelUI::move_down() {
  unsigned int appLine=app_browser->value();
  unsigned int size =app_browser->size();
  if(appLine <= size && appLine !=0){
    moveDown(appLine);
    populateApps(app_browser);
  }
  size =app_browser->size();
  if(appLine+1 < size )app_browser->select(appLine+1);
  else app_browser->select(size);
}

void PanelUI::ok() {
  saveChanges();
  exit(0);
  /*panel_window->hide();
  UI ux;ux.showSettings();*/
}

void PanelUI::remove_indicator() {
  unsigned int line_item = indicator_browser->value();
  std::string item = indicator_browser->text(line_item);
  //std::cout<<item<<std::endl;
  if(item.compare("Network")==0){deleteNetworkMonitor();}
  else if(item.compare("Battery")==0){deleteBattery();}
  else if(item.compare("Volume")==0){deleteVolume();}
}

void PanelUI::save_user_clock() {
  const char* result = clock_style->value();
  if(result==NULL){return;}
  changeClock(result);
  clock_config_window->hide();
}

void PanelUI::change_panel_position(std::string position) {
  panel_position(position);
  std::string vval=getElementAttribute(currentPanel(),"Tray","valign");
  if(vval.compare("")!=0){
    valign->value(vval.c_str());
    halign->redraw();
  }
  std::string hval=getElementAttribute(currentPanel(),"Tray","halign");
  if(hval.compare("")!=0){
    halign->value(hval.c_str());
    halign->redraw();
  }
}
