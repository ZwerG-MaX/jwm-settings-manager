/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-panel.h"

#include <FL/Fl_Image.H>
static unsigned char idata_jsm[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,0,0,0,10,28,31,54,100,46,52,78,207,46,52,76,217,46,52,76,217,46,52,76,
217,46,52,78,217,46,52,78,217,46,52,78,217,46,52,78,217,46,52,78,217,46,52,78,
217,46,52,78,217,46,53,78,217,46,53,78,217,46,53,78,217,46,53,78,217,46,53,78,
217,46,53,78,217,46,53,78,217,46,53,78,217,46,53,78,217,46,53,78,217,46,53,78,
217,46,53,78,217,46,53,78,217,46,53,78,217,46,52,78,217,46,52,78,217,46,52,78,
217,46,52,78,217,46,52,78,217,46,52,78,217,46,52,78,217,46,52,76,217,46,52,76,
217,46,52,76,217,46,52,78,207,28,31,54,100,0,0,0,10,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,28,36,54,100,38,39,41,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,255,37,37,37,
255,37,37,37,255,37,37,37,255,38,39,41,255,28,36,54,100,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,48,54,80,207,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,38,
38,38,255,38,38,38,255,38,38,38,255,38,38,38,255,48,54,80,207,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,49,55,80,217,41,41,41,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,43,255,43,43,
43,255,43,43,43,255,43,43,43,255,43,43,43,255,41,41,41,255,49,55,80,217,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,52,58,82,217,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,
48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,48,48,48,255,52,58,82,217,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,55,61,85,218,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,
50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,50,50,50,255,55,61,
85,218,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,56,62,87,218,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,255,51,51,51,
255,56,62,87,218,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,57,63,88,218,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,53,53,53,255,
53,53,53,255,57,63,88,218,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,58,64,89,218,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,
54,54,255,54,54,54,255,58,64,89,218,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,60,66,90,
218,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,255,54,54,54,
255,54,54,54,255,54,54,54,255,60,66,90,218,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,72,
88,145,180,100,121,202,255,100,122,203,255,101,122,203,255,101,122,203,255,101,
122,203,255,101,122,204,255,101,123,204,255,101,123,204,255,102,123,204,255,102,
123,204,255,102,123,204,255,102,123,204,255,102,123,204,255,102,123,204,255,102,
124,205,255,102,124,205,255,102,124,205,255,102,124,205,255,102,124,205,255,102,
124,205,255,102,124,205,255,102,124,205,255,102,124,205,255,102,124,205,255,102,
123,204,255,102,123,204,255,102,123,204,255,102,123,204,255,102,123,204,255,102,
123,204,255,101,123,204,255,101,123,204,255,101,122,204,255,101,122,203,255,101,
122,203,255,101,122,203,255,100,122,203,255,100,121,202,255,72,88,145,180,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,72,88,146,180,101,122,203,255,101,123,204,255,101,
123,204,255,102,123,204,255,102,123,204,255,102,123,204,255,102,124,205,255,102,
124,205,255,103,124,205,255,103,124,205,255,103,124,205,255,103,124,205,255,103,
124,205,255,103,125,205,255,103,125,206,255,103,125,206,255,103,125,206,255,103,
125,206,255,103,125,206,255,103,125,206,255,103,125,206,255,103,125,206,255,103,
125,206,255,103,125,206,255,103,125,205,255,103,124,205,255,103,124,205,255,103,
124,205,255,103,124,205,255,103,124,205,255,102,124,205,255,102,124,205,255,102,
123,204,255,102,123,204,255,102,123,204,255,101,123,204,255,101,123,204,255,101,
122,203,255,72,88,146,180,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,74,89,146,180,102,
123,204,255,102,123,204,255,102,124,205,255,103,124,205,255,103,124,205,255,103,
124,205,255,103,125,206,255,103,125,206,255,104,125,206,255,104,125,206,255,104,
125,206,255,104,125,206,255,104,126,206,255,104,126,206,255,104,126,206,255,104,
126,206,255,104,126,206,255,104,126,207,255,104,126,207,255,104,126,207,255,104,
126,207,255,104,126,206,255,104,126,206,255,104,126,206,255,104,126,206,255,104,
126,206,255,104,125,206,255,104,125,206,255,104,125,206,255,104,125,206,255,103,
125,206,255,103,125,206,255,103,124,205,255,103,124,205,255,103,124,205,255,102,
124,205,255,102,123,204,255,102,123,204,255,74,89,146,180,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,70,85,145,179,98,120,203,255,98,121,203,255,98,121,204,255,99,121,204,
255,99,121,204,255,99,122,204,255,99,122,204,255,99,122,205,255,100,122,205,255,
100,122,205,255,100,122,205,255,100,123,205,255,100,123,205,255,100,123,205,255,
100,123,205,255,100,123,205,255,100,123,205,255,100,123,205,255,100,123,205,255,
100,123,205,255,100,123,205,255,100,123,205,255,100,123,205,255,100,123,205,255,
100,123,205,255,100,123,205,255,100,123,205,255,100,122,205,255,100,122,205,255,
100,122,205,255,99,122,205,255,99,122,204,255,99,122,204,255,99,121,204,255,99,
121,204,255,98,121,204,255,98,121,203,255,98,120,203,255,70,85,145,179,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,71,87,145,179,99,121,204,255,99,122,204,255,99,122,204,
255,100,122,205,255,100,122,205,255,100,123,205,255,100,123,205,255,100,123,205,
255,101,123,206,255,101,123,206,255,101,124,206,255,101,124,206,255,101,124,206,
255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,
255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,
255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,255,101,124,206,
255,101,123,206,255,101,123,206,255,100,123,205,255,100,123,205,255,100,123,205,
255,100,122,205,255,100,122,205,255,99,122,204,255,99,122,204,255,99,121,204,
255,71,87,145,179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,71,87,147,179,100,122,205,
255,100,123,205,255,100,123,205,255,101,123,206,255,101,123,206,255,101,124,206,
255,101,124,206,255,101,124,206,255,102,124,207,255,102,124,207,255,102,125,207,
255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,
255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,
255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,
255,102,125,207,255,102,125,207,255,102,124,207,255,102,124,207,255,101,124,206,
255,101,124,206,255,101,124,206,255,101,123,206,255,101,123,206,255,100,123,205,
255,100,123,205,255,100,122,205,255,71,87,147,179,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,71,88,147,179,101,123,206,255,101,124,206,255,101,124,206,255,101,124,206,
255,102,124,207,255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,
255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,
255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,
255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,
255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,255,103,126,208,
255,102,125,207,255,102,125,207,255,102,125,207,255,102,125,207,255,102,124,207,
255,101,124,206,255,101,124,206,255,101,124,206,255,101,123,206,255,71,88,147,
179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,73,88,147,179,102,124,207,255,102,125,207,
255,102,125,207,255,102,125,207,255,103,126,208,255,103,126,208,255,103,126,208,
255,103,126,208,255,103,126,208,255,104,127,208,255,104,127,209,255,104,127,209,
255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,
255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,
255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,255,104,127,209,
255,104,127,209,255,104,127,208,255,103,126,208,255,103,126,208,255,103,126,208,
255,103,126,208,255,103,126,208,255,102,125,207,255,102,125,207,255,102,125,207,
255,102,124,207,255,73,88,147,179,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,73,90,148,179,
103,125,207,255,103,126,208,255,103,126,208,255,103,126,208,255,104,127,208,255,
104,127,209,255,104,127,209,255,104,127,209,255,104,128,209,255,105,128,209,255,
105,128,209,255,105,128,210,255,105,128,210,255,105,128,210,255,105,128,210,255,
105,128,210,255,105,128,210,255,105,129,210,255,105,129,210,255,105,129,210,255,
105,129,210,255,105,128,210,255,105,128,210,255,105,128,210,255,105,128,210,255,
105,128,210,255,105,128,210,255,105,128,209,255,105,128,209,255,104,128,209,255,
104,127,209,255,104,127,209,255,104,127,209,255,104,127,208,255,103,126,208,255,
103,126,208,255,103,126,208,255,103,125,207,255,73,90,148,179,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,74,90,148,179,103,126,208,255,104,127,209,255,104,127,209,255,104,
127,209,255,105,128,209,255,105,128,210,255,105,128,210,255,105,128,210,255,105,
129,210,255,106,129,210,255,106,129,210,255,106,129,210,255,106,129,211,255,106,
129,211,255,106,129,211,255,106,130,211,255,106,130,211,255,106,130,211,255,106,
130,211,255,106,130,211,255,106,130,211,255,106,130,211,255,106,130,211,255,106,
129,211,255,106,129,211,255,106,129,211,255,106,129,210,255,106,129,210,255,106,
129,210,255,105,129,210,255,105,128,210,255,105,128,210,255,105,128,210,255,105,
128,209,255,104,127,209,255,104,127,209,255,104,127,209,255,103,126,208,255,74,
90,148,179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,74,91,150,179,104,127,209,255,105,
128,209,255,105,128,210,255,105,128,210,255,105,129,210,255,106,129,210,255,106,
129,211,255,106,129,211,255,106,130,211,255,106,130,211,255,107,130,211,255,107,
130,211,255,107,130,212,255,107,130,212,255,107,131,212,255,107,131,212,255,107,
131,212,255,107,131,212,255,107,131,212,255,107,131,212,255,107,131,212,255,107,
131,212,255,107,131,212,255,107,131,212,255,107,130,212,255,107,130,212,255,107,
130,211,255,107,130,211,255,106,130,211,255,106,130,211,255,106,129,211,255,106,
129,211,255,106,129,210,255,105,129,210,255,105,128,210,255,105,128,210,255,105,
128,209,255,104,127,209,255,74,91,150,179,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,76,
91,150,179,105,129,210,255,106,129,210,255,106,129,211,255,106,129,211,255,106,
130,211,255,107,130,211,255,107,130,212,255,107,131,212,255,107,131,212,255,108,
131,212,255,108,131,212,255,108,131,212,255,108,131,212,255,108,131,213,255,108,
132,213,255,108,132,213,255,108,132,213,255,108,132,213,255,108,132,213,255,108,
132,213,255,108,132,213,255,108,132,213,255,108,132,213,255,108,132,213,255,108,
131,213,255,108,131,212,255,108,131,212,255,108,131,212,255,108,131,212,255,107,
131,212,255,107,131,212,255,107,130,212,255,107,130,211,255,106,130,211,255,106,
129,211,255,106,129,211,255,106,129,210,255,105,129,210,255,76,91,150,179,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,76,93,151,179,106,130,211,255,107,130,211,255,107,
130,211,255,107,131,212,255,107,131,212,255,108,131,212,255,108,131,212,255,108,
131,213,255,108,132,213,255,109,132,213,255,109,132,213,255,109,132,213,255,109,
132,213,255,109,133,213,255,109,133,213,255,109,133,214,255,109,133,214,255,109,
133,214,255,109,133,214,255,109,133,214,255,109,133,214,255,109,133,214,255,109,
133,214,255,109,133,213,255,109,133,213,255,109,132,213,255,109,132,213,255,109,
132,213,255,109,132,213,255,108,132,213,255,108,131,213,255,108,131,212,255,108,
131,212,255,107,131,212,255,107,131,212,255,107,130,211,255,107,130,211,255,106,
130,211,255,76,93,151,179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,77,93,151,179,107,
131,212,255,108,131,212,255,108,131,212,255,108,131,213,255,108,132,213,255,109,
132,213,255,109,132,213,255,109,133,213,255,109,133,214,255,109,133,214,255,110,
133,214,255,110,133,214,255,110,133,214,255,110,134,214,255,110,134,214,255,110,
134,215,255,110,134,215,255,110,134,215,255,110,134,215,255,110,134,215,255,110,
134,215,255,110,134,215,255,110,134,215,255,110,134,214,255,110,134,214,255,110,
133,214,255,110,133,214,255,110,133,214,255,109,133,214,255,109,133,214,255,109,
133,213,255,109,132,213,255,109,132,213,255,108,132,213,255,108,131,213,255,108,
131,212,255,108,131,212,255,107,131,212,255,77,93,151,179,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,77,94,151,179,108,131,213,255,108,132,213,255,109,132,213,255,109,132,
213,255,109,133,214,255,110,133,214,255,110,133,214,255,110,134,214,255,110,134,
215,255,110,134,215,255,111,134,215,255,111,134,215,255,111,135,215,255,111,135,
215,255,111,135,215,255,111,135,215,255,111,135,215,255,111,135,216,255,111,135,
216,255,111,135,216,255,111,135,216,255,111,135,215,255,111,135,215,255,111,135,
215,255,111,135,215,255,111,135,215,255,111,134,215,255,111,134,215,255,110,134,
215,255,110,134,215,255,110,134,214,255,110,133,214,255,110,133,214,255,109,133,
214,255,109,132,213,255,109,132,213,255,108,132,213,255,108,131,213,255,77,94,
151,179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,78,94,152,179,109,132,213,255,109,133,
214,255,110,133,214,255,110,133,214,255,110,134,215,255,110,134,215,255,111,134,
215,255,111,135,215,255,111,135,215,255,111,135,216,255,112,135,216,255,112,136,
216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,
216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,
216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,216,255,112,136,
216,255,112,135,216,255,111,135,216,255,111,135,215,255,111,135,215,255,111,134,
215,255,110,134,215,255,110,134,215,255,110,133,214,255,110,133,214,255,109,133,
214,255,109,132,213,255,78,94,152,179,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,78,95,152,
179,110,133,214,255,110,134,215,255,111,134,215,255,111,135,215,255,111,135,215,
255,111,135,216,255,112,135,216,255,112,136,216,255,112,136,216,255,112,136,216,
255,113,136,217,255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,
255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,
255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,
255,113,137,217,255,113,137,217,255,113,136,217,255,112,136,216,255,112,136,216,
255,112,136,216,255,112,135,216,255,111,135,216,255,111,135,215,255,111,135,215,
255,111,134,215,255,110,134,215,255,110,133,214,255,78,95,152,179,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,78,95,154,179,111,134,215,255,111,135,215,255,111,135,216,
255,112,136,216,255,112,136,216,255,112,136,216,255,113,137,217,255,113,137,217,
255,113,137,217,255,113,137,217,255,113,137,218,255,114,138,218,255,114,138,218,
255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,
255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,
255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,255,113,137,218,
255,113,137,217,255,113,137,217,255,113,137,217,255,113,137,217,255,112,136,216,
255,112,136,216,255,112,136,216,255,111,135,216,255,111,135,215,255,111,134,215,
255,78,95,154,179,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,82,99,155,181,112,135,216,
255,112,136,216,255,112,136,216,255,113,137,217,255,113,137,217,255,113,137,217,
255,114,138,218,255,114,138,218,255,114,138,218,255,114,138,218,255,115,139,219,
255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,
255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,
255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,255,115,139,219,
255,115,139,219,255,115,139,219,255,114,138,218,255,114,138,218,255,114,138,218,
255,114,138,218,255,113,137,217,255,113,137,217,255,113,137,217,255,112,136,216,
255,112,136,216,255,112,135,216,255,82,99,155,181,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,86,103,158,186,113,136,217,255,113,137,217,255,113,137,217,255,114,138,
218,255,114,138,218,255,114,138,218,255,115,139,219,255,115,139,219,255,115,139,
219,255,115,139,219,255,116,140,220,255,116,140,220,255,116,140,220,255,116,140,
220,255,116,140,220,255,116,140,220,255,116,140,220,255,117,141,221,255,117,141,
221,255,117,141,221,255,117,141,221,255,116,140,220,255,116,140,220,255,116,140,
220,255,116,140,220,255,116,140,220,255,116,140,220,255,116,140,220,255,115,139,
219,255,115,139,219,255,115,139,219,255,115,139,219,255,114,138,218,255,114,138,
218,255,114,138,218,255,113,137,217,255,113,137,217,255,113,136,217,255,86,103,
158,186,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,88,104,159,186,113,137,217,255,114,
138,218,255,114,138,218,255,115,139,219,255,115,139,219,255,115,139,219,255,116,
140,220,255,116,140,220,255,116,140,220,255,116,140,220,255,117,141,221,255,117,
141,221,255,117,141,221,255,117,141,221,255,117,141,221,255,117,141,221,255,117,
141,222,255,118,142,222,255,118,142,222,255,118,142,222,255,118,142,222,255,117,
141,222,255,117,141,221,255,117,141,221,255,117,141,221,255,117,141,221,255,117,
141,221,255,117,141,221,255,116,140,220,255,116,140,220,255,116,140,220,255,116,
140,220,255,115,139,219,255,115,139,219,255,115,139,219,255,114,138,218,255,114,
138,218,255,113,137,217,255,88,104,159,186,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,88,
104,159,186,114,138,218,255,115,139,219,255,115,139,219,255,116,140,220,255,116,
140,220,255,116,140,220,255,117,141,221,255,117,141,221,255,117,141,221,255,117,
141,222,255,118,142,222,255,118,142,222,255,118,142,222,255,118,142,222,255,118,
142,222,255,118,142,223,255,119,143,223,255,119,143,223,255,119,143,223,255,119,
143,223,255,119,143,223,255,119,143,223,255,118,142,223,255,118,142,222,255,118,
142,222,255,118,142,222,255,118,142,222,255,118,142,222,255,117,141,222,255,117,
141,221,255,117,141,221,255,117,141,221,255,116,140,220,255,116,140,220,255,116,
140,220,255,115,139,219,255,115,139,219,255,114,138,218,255,88,104,159,186,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,89,106,160,186,115,139,219,255,116,140,220,255,116,
140,220,255,117,141,221,255,117,141,221,255,117,141,221,255,118,142,222,255,118,
142,222,255,118,142,222,255,118,142,223,255,119,143,223,255,119,143,223,255,119,
143,223,255,119,143,223,255,119,143,224,255,120,144,224,255,120,144,224,255,120,
144,224,255,120,144,224,255,120,144,224,255,120,144,224,255,120,144,224,255,120,
144,224,255,119,143,224,255,119,143,223,255,119,143,223,255,119,143,223,255,119,
143,223,255,118,142,223,255,118,142,222,255,118,142,222,255,118,142,222,255,117,
141,221,255,117,141,221,255,117,141,221,255,116,140,220,255,116,140,220,255,115,
139,219,255,89,106,160,186,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,89,106,160,186,
116,140,220,255,117,141,221,255,117,141,221,255,117,141,222,255,118,142,222,255,
118,142,222,255,119,143,223,255,119,143,223,255,119,143,223,255,120,144,224,255,
120,144,224,255,120,144,224,255,120,144,224,255,120,144,225,255,121,145,225,255,
121,145,225,255,121,145,225,255,121,145,225,255,121,145,225,255,121,145,225,255,
121,145,225,255,121,145,225,255,121,145,225,255,121,145,225,255,120,144,225,255,
120,144,224,255,120,144,224,255,120,144,224,255,120,144,224,255,119,143,223,255,
119,143,223,255,119,143,223,255,118,142,222,255,118,142,222,255,117,141,222,255,
117,141,221,255,117,141,221,255,116,140,220,255,89,106,160,186,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,90,107,162,186,117,141,221,255,117,141,222,255,118,142,222,
255,118,142,223,255,119,143,223,255,119,143,223,255,120,144,224,255,120,144,224,
255,120,144,225,255,121,145,225,255,121,145,225,255,121,145,225,255,121,145,226,
255,121,145,226,255,122,146,226,255,122,146,226,255,122,146,226,255,122,146,226,
255,122,146,226,255,122,146,226,255,122,146,226,255,122,146,226,255,122,146,226,
255,122,146,226,255,121,145,226,255,121,145,226,255,121,145,225,255,121,145,225,
255,121,145,225,255,120,144,225,255,120,144,224,255,120,144,224,255,119,143,223,
255,119,143,223,255,118,142,223,255,118,142,222,255,117,141,222,255,117,141,221,
255,90,107,162,186,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,90,106,163,185,118,142,222,
255,118,142,223,255,119,143,223,255,119,143,223,255,120,144,224,255,120,144,224,
255,121,145,225,255,121,145,225,255,121,145,226,255,122,146,226,255,122,146,226,
255,122,146,226,255,122,146,227,255,123,147,227,255,123,147,227,255,123,147,227,
255,123,147,227,255,123,147,227,255,123,147,227,255,123,147,227,255,123,147,227,
255,123,147,227,255,123,147,227,255,123,147,227,255,123,147,227,255,122,146,227,
255,122,146,226,255,122,146,226,255,122,146,226,255,121,145,226,255,121,145,225,
255,121,145,225,255,120,144,224,255,120,144,224,255,119,143,223,255,119,143,223,
255,118,142,223,255,118,142,222,255,90,106,163,185,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,89,106,162,183,119,143,223,255,119,143,223,255,120,144,224,255,120,144,
225,255,121,145,225,255,121,145,225,255,122,146,226,255,122,146,226,255,122,146,
227,255,123,147,227,255,123,147,227,255,123,147,227,255,123,147,228,255,124,148,
228,255,124,148,228,255,124,148,228,255,124,148,228,255,124,148,228,255,124,148,
228,255,124,148,228,255,124,148,228,255,124,148,228,255,124,148,228,255,124,148,
228,255,124,148,228,255,123,147,228,255,123,147,227,255,123,147,227,255,123,147,
227,255,122,146,227,255,122,146,226,255,122,146,226,255,121,145,225,255,121,145,
225,255,120,144,225,255,120,144,224,255,119,143,223,255,119,143,223,255,89,106,
162,183,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,64,64,64,4,79,95,145,178,120,144,224,255,120,144,
224,255,121,145,225,255,121,145,225,255,122,146,226,255,122,146,226,255,123,147,
227,255,123,147,227,255,123,147,228,255,124,148,228,255,124,148,228,255,124,148,
229,255,125,149,229,255,125,149,229,255,125,149,229,255,125,149,229,255,125,149,
229,255,125,149,229,255,125,149,230,255,125,149,230,255,125,149,229,255,125,149,
229,255,125,149,229,255,125,149,229,255,125,149,229,255,125,149,229,255,124,148,
229,255,124,148,228,255,124,148,228,255,123,147,228,255,123,147,227,255,123,147,
227,255,122,146,226,255,122,146,226,255,121,145,225,255,121,145,225,255,120,144,
224,255,120,144,224,255,79,95,145,178,64,64,64,4,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,18,18,18,14,26,26,26,50,31,36,49,140,
119,144,222,252,121,145,225,255,122,146,226,255,122,146,226,255,123,147,227,255,
123,147,227,255,124,148,228,255,124,148,228,255,124,148,229,255,125,149,229,255,
125,149,229,255,125,149,230,255,125,149,230,255,126,150,230,255,126,150,230,255,
126,150,230,255,126,150,231,255,126,150,231,255,126,150,231,255,126,150,231,255,
126,150,231,255,126,150,231,255,126,150,230,255,126,150,230,255,126,150,230,255,
125,149,230,255,125,149,230,255,125,149,229,255,125,149,229,255,124,148,229,255,
124,148,228,255,124,148,228,255,123,147,227,255,123,147,227,255,122,146,226,255,
122,146,226,255,121,145,225,255,119,144,222,252,31,36,49,140,26,26,26,50,18,18,
18,14,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,18,18,18,14,26,
26,26,50,22,22,22,91,29,34,45,157,71,85,129,207,78,92,140,213,78,92,140,213,79,
93,141,213,79,93,141,213,79,93,141,213,79,93,141,213,79,93,142,213,80,95,142,
213,80,95,142,213,80,95,142,213,80,95,142,213,80,95,142,213,80,95,142,213,80,95,
142,213,80,95,144,213,80,95,144,213,80,95,144,213,80,95,144,213,80,95,144,213,
80,95,144,213,80,95,142,213,80,95,142,213,80,95,142,213,80,95,142,213,80,95,
142,213,80,95,142,213,80,95,142,213,79,93,142,213,79,93,141,213,79,93,141,213,
79,93,141,213,79,93,141,213,78,92,140,213,78,92,140,213,71,85,129,207,29,34,45,
157,22,22,22,91,26,26,26,50,18,18,18,14,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,64,64,64,4,20,20,20,25,28,28,28,37,26,26,26,39,
26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,
26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,
26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,
26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,
26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,26,39,26,26,
26,39,26,26,26,39,26,26,26,39,28,28,28,37,20,20,20,25,64,64,64,4,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0};
static Fl_RGB_Image image_jsm(idata_jsm, 48, 48, 4, 0);

void PanelUI::cb_panel_chooser_i(Fl_Menu_Button* o, void*) {
  Config conf;
std::string panel = conf.convert(conf.currentPanel());
std::string LABEL = "Panel ";
LABEL +=panel;
o->copy_label(LABEL.c_str());
}
void PanelUI::cb_panel_chooser(Fl_Menu_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_panel_chooser_i(o,v);
}

void PanelUI::cb_Add_i(Fl_Menu_*, void*) {
  flPanel panel;panel.loadTemp();
int a = panel.numPanels();
if(a==4){
new_panel_window()->show();
}
else{
panel.addPanel();
a = panel.numPanels();
Menu_CB(a);
};
}
void PanelUI::cb_Add(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void PanelUI::cb_Panel_i(Fl_Menu_*, void*) {
  Menu_CB(1);
}
void PanelUI::cb_Panel(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel_i(o,v);
}

void PanelUI::cb_Panel1_i(Fl_Menu_*, void*) {
  Menu_CB(2);
}
void PanelUI::cb_Panel1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel1_i(o,v);
}

void PanelUI::cb_Panel2_i(Fl_Menu_*, void*) {
  Menu_CB(3);
}
void PanelUI::cb_Panel2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel2_i(o,v);
}

void PanelUI::cb_Panel3_i(Fl_Menu_*, void*) {
  Menu_CB(4);
}
void PanelUI::cb_Panel3(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel3_i(o,v);
}

void PanelUI::cb_Remove_i(Fl_Menu_*, void*) {
  flPanel panel;panel.loadTemp();
panel.deletePanel();
int a = panel.numPanels();
Menu_CB(a);
}
void PanelUI::cb_Remove(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Remove_i(o,v);
}

unsigned char PanelUI::menu_panel_chooser_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_panel_chooser[] = {
 {"Add a Panel  +", 0,  (Fl_Callback*)PanelUI::cb_Add, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 1", 0,  (Fl_Callback*)PanelUI::cb_Panel, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 2", 0,  (Fl_Callback*)PanelUI::cb_Panel1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 3", 0,  (Fl_Callback*)PanelUI::cb_Panel2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 4", 0,  (Fl_Callback*)PanelUI::cb_Panel3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Remove Current  Panel", 0,  (Fl_Callback*)PanelUI::cb_Remove, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_Main_i(Fl_Button*, void*) {
  flPanel fl_panel;fl_panel.cancel();
panel_window->hide();
UI ux;
ux.showSettings();
}
void PanelUI::cb_Main(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Main_i(o,v);
}

void PanelUI::cb_c_shortcuts_i(Fl_Check_Button* o, void*) {
  Apps apps;
apps.loadTemp();
int shortcuts=o->value();
bool shorty = apps.isShortcuts();
if(shorty){o->value(1);}else{o->value(0);}
if(shortcuts==1){
	make_shortcut_window()->show();
}
else{apps.deleteALLshortcuts();};
}
void PanelUI::cb_c_shortcuts(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_shortcuts_i(o,v);
}

void PanelUI::cb_c_clock_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int is=o->value();
if(is==1){apps.addClock();}
else{apps.deleteClock();};
}
void PanelUI::cb_c_clock(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_clock_i(o,v);
}

void PanelUI::cb_CPU_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int xl=o->value();
if(xl==1){apps.addAppXload();}
else{apps.deleteAppXload();};
}
void PanelUI::cb_CPU(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_CPU_i(o,v);
}

void PanelUI::cb_c_desktop_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int p=o->value();
if(p == 1){apps.addPager();}
else{apps.deletePager();}
o->redraw();
}
void PanelUI::cb_c_desktop(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_desktop_i(o,v);
}

void PanelUI::cb_c_tasklist_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int tl=o->value();
if(tl == 1){apps.addTaskList();}
else{apps.deleteTaskList();};
}
void PanelUI::cb_c_tasklist(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_tasklist_i(o,v);
}

void PanelUI::cb_c_shutdown_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int sd=o->value();
if(sd==1){
	apps.addShutdown();
	shutdown_icon->activate();
}
else{
	apps.deleteShutdown();
	shutdown_icon->activate();
};
}
void PanelUI::cb_c_shutdown(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_shutdown_i(o,v);
}

void PanelUI::cb_c_indicators_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int d=o->value();
if(d ==1){apps.addDock();}
else{apps.deleteDock();};
}
void PanelUI::cb_c_indicators(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_indicators_i(o,v);
}

void PanelUI::cb_c_places_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int placesValue=o->value();
if(placesValue==1){apps.addPlaces();}
else if(placesValue==0){apps.deletePlaces();}
else{std::cout<<"Error in the places menu\n";};
}
void PanelUI::cb_c_places(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_places_i(o,v);
}

void PanelUI::cb_c_battery_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int d=o->value();
if(d==1){apps.addBattery();}
else{apps.deleteBattery();};
}
void PanelUI::cb_c_battery(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_battery_i(o,v);
}

void PanelUI::cb_c_volume_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int d=o->value();
if(d==1){apps.addVolume();}
else{apps.deleteVolume();};
}
void PanelUI::cb_c_volume(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_volume_i(o,v);
}

void PanelUI::cb_c_network_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int d=o->value();
if(d==1){apps.addNetworkMonitor();}
else{apps.deleteNetworkMonitor();};
}
void PanelUI::cb_c_network(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_c_network_i(o,v);
}

void PanelUI::cb_choose_apps_i(Fl_Button*, void*) {
  make_shortcut_window()->show();
}
void PanelUI::cb_choose_apps(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choose_apps_i(o,v);
}

void PanelUI::cb_clock_menu_i(Fl_Menu_Button*, void*) {
  Apps apps;apps.loadTemp();
apps.saveChangesTemp();
}
void PanelUI::cb_clock_menu(Fl_Menu_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_clock_menu_i(o,v);
}

void PanelUI::cb_Day_i(Fl_Menu_*, void*) {
  Apps apps;apps.loadTemp();
apps.changeClock("Day");
apps.saveChangesTemp();
}
void PanelUI::cb_Day(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Day_i(o,v);
}

void PanelUI::cb_24_i(Fl_Menu_*, void*) {
  Apps apps;apps.loadTemp();
apps.changeClock("24");
apps.saveChangesTemp();
}
void PanelUI::cb_24(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_24_i(o,v);
}

void PanelUI::cb_12_i(Fl_Menu_*, void*) {
  Apps apps;apps.loadTemp();
apps.changeClock("12");
apps.saveChangesTemp();
}
void PanelUI::cb_12(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_12_i(o,v);
}

void PanelUI::cb_Year_i(Fl_Menu_*, void*) {
  Apps apps;apps.loadTemp();
apps.changeClock("Year");
apps.saveChangesTemp();
}
void PanelUI::cb_Year(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Year_i(o,v);
}

void PanelUI::cb_Advanced_i(Fl_Menu_*, void*) {
  Apps apps;apps.loadTemp();
//fl_panel.changeClock(//userInput);
}
void PanelUI::cb_Advanced(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Advanced_i(o,v);
}

unsigned char PanelUI::menu_clock_menu_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_clock_menu[] = {
 {"Day name Month Day 12 Hour", 0,  (Fl_Callback*)PanelUI::cb_Day, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"24 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_24, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"12 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Year Month Day 24 Hour clock", 0,  (Fl_Callback*)PanelUI::cb_Year, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"(Advanced) User Defined", 0,  (Fl_Callback*)PanelUI::cb_Advanced, 0, 1, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_shutdown_icon_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{svg,SVG,xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	apps.setShutdownImage(result);
};
}
void PanelUI::cb_shutdown_icon(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_shutdown_icon_i(o,v);
}

void PanelUI::cb_app_menu_i(Fl_Input* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
std::cout<<o->value();
const char * label=o->value();
fl_panel.menuLabel(label);
}
void PanelUI::cb_app_menu(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_app_menu_i(o,v);
}

void PanelUI::cb_icon_view_i(Fl_Button*, void*) {
  flPanel panel;panel.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	panel.setMenuImage(result);
	display(result);
};
}
void PanelUI::cb_icon_view(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_icon_view_i(o,v);
}

void PanelUI::cb_button_color_i(Fl_Button* o, void*) {
  one_color(o,"TrayButtonStyle");
}
void PanelUI::cb_button_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_color_i(o,v);
}

void PanelUI::cb_o_slider_i(Fl_Slider* o, void*) {
  flPanel panel;
panel.loadTemp();
float opacity=o->value();
panel.setOpacity(opacity,"TrayStyle");
o_slider_v->value(opacity*100);
panel.saveChangesTemp();
}
void PanelUI::cb_o_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_i(o,v);
}

void PanelUI::cb_o_slider_v_i(Fl_Value_Input* o, void*) {
  flPanel panel;
panel.loadTemp();
float opacity=o->value();
panel.setOpacity(opacity,"TrayStyle");
o_slider->value(opacity);
panel.saveChangesTemp();
}
void PanelUI::cb_o_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_v_i(o,v);
}

void PanelUI::cb_menu_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"MenuStyle");
}
void PanelUI::cb_menu_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_bg_color_i(o,v);
}

void PanelUI::cb_menu_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"MenuStyle");
}
void PanelUI::cb_menu_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_fg_color_i(o,v);
}

void PanelUI::cb_task_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"TaskListStyle");
}
void PanelUI::cb_task_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_task_bg_color_i(o,v);
}

void PanelUI::cb_task_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"TaskListStyle");
}
void PanelUI::cb_task_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_task_fg_color_i(o,v);
}

void PanelUI::cb_b_color_i(Fl_Button* o, void*) {
  one_color(o, "TrayStyle");
}
void PanelUI::cb_b_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_color_i(o,v);
}

void PanelUI::cb_o_menu_slider_i(Fl_Slider* o, void*) {
  flPanel panel;
panel.loadTemp();
float opacity=o->value();
panel.setOpacity(opacity,"MenuStyle");
o_menu_slider_v->value(opacity*100);
panel.saveChangesTemp();
}
void PanelUI::cb_o_menu_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_i(o,v);
}

void PanelUI::cb_o_menu_slider_v_i(Fl_Value_Input* o, void*) {
  flPanel panel;
panel.loadTemp();
float opacity=o->value();
panel.setOpacity(opacity,"MenuStyle");
o_menu_slider->value(opacity);
panel.saveChangesTemp();
}
void PanelUI::cb_o_menu_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_v_i(o,v);
}

void PanelUI::cb_Applications_i(Fl_Check_Button* o, void*) {
  Apps apps;apps.loadTemp();
int xl=o->value();
if(xl == 1){apps.addAppMenu();
//apps.saveChangesTemp();
//panel_window->hide();
//UI ux;
//ux.showPanel();
}
else if(xl == 0){apps.deleteAppMenu();}
else {std::cout<<"error with App Menu"<<std::endl;};
}
void PanelUI::cb_Applications(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Applications_i(o,v);
}

void PanelUI::cb_Y_i(Fl_Value_Input* o, void*) {
  flPanel panel;panel.loadTemp();
int y=o->value();
panel.setCoordinate("y",y);
panel.saveChangesTemp();
}
void PanelUI::cb_Y(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Y_i(o,v);
}

void PanelUI::cb_X_i(Fl_Value_Input* o, void*) {
  flPanel panel;panel.loadTemp();
int x=o->value();
panel.setCoordinate("x",x);
panel.saveChangesTemp();
}
void PanelUI::cb_X(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

void PanelUI::cb_top_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionVert("top");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_top(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top_i(o,v);
}

void PanelUI::cb_bottom_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionVert("bottom");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_bottom(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom_i(o,v);
}

void PanelUI::cb_right_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionHoriz("right");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_right(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right_i(o,v);
}

void PanelUI::cb_left_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionHoriz("left");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_left(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left_i(o,v);
}

void PanelUI::cb_center_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionVert("center");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_center(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_center_i(o,v);
}

void PanelUI::cb_fixed_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionVert("fixed");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_fixed(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_fixed_i(o,v);
}

void PanelUI::cb_center1_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionHoriz("center");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_center1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_center1_i(o,v);
}

void PanelUI::cb_fixed1_i(Fl_Menu_*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.panelPositionHoriz("fixed");
fl_panel.saveChangesTemp();
}
void PanelUI::cb_fixed1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_fixed1_i(o,v);
}

unsigned char PanelUI::menu_Panel_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_Panel[] = {
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Vertical Alignment", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"center", 0,  (Fl_Callback*)PanelUI::cb_center, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"fixed", 0,  (Fl_Callback*)PanelUI::cb_fixed, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Horizontal Alignment", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"center", 0,  (Fl_Callback*)PanelUI::cb_center1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"fixed", 0,  (Fl_Callback*)PanelUI::cb_fixed1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_w_slider_i(Fl_Slider* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int panelSize=o->value();
fl_panel.panelWidth(panelSize);
fl_panel.saveChangesTemp();
width_input->value(panelSize);
}
void PanelUI::cb_w_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_w_slider_i(o,v);
}

void PanelUI::cb_h_slider_i(Fl_Slider* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int panelSize=o->value();
fl_panel.panelHeight(panelSize);
fl_panel.saveChangesTemp();
height_input->value(panelSize);
}
void PanelUI::cb_h_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_h_slider_i(o,v);
}

void PanelUI::cb_height_input_i(Fl_Value_Input* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int panelSize=o->value();
fl_panel.panelHeight(panelSize);
fl_panel.saveChangesTemp();
h_slider->value(panelSize);
}
void PanelUI::cb_height_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_height_input_i(o,v);
}

void PanelUI::cb_border_slider_i(Fl_Slider* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int panelSize=o->value();
fl_panel.borderWidth(panelSize);
fl_panel.saveChangesTemp();
border_slider_v->value(panelSize);
}
void PanelUI::cb_border_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_border_slider_i(o,v);
}

void PanelUI::cb_width_input_i(Fl_Value_Input* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int panelSize=o->value();
fl_panel.panelHeight(panelSize);
fl_panel.saveChangesTemp();
w_slider->value(panelSize);
}
void PanelUI::cb_width_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_width_input_i(o,v);
}

void PanelUI::cb_Autohide_i(Fl_Check_Button* o, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
int autohide=o->value();
bool autohideValue = bool(autohide);
fl_panel.panelAutohide(autohideValue);
}
void PanelUI::cb_Autohide(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Autohide_i(o,v);
}

void PanelUI::cb_Cancel_i(Fl_Button*, void*) {
  flPanel fl_panel;fl_panel.cancel();
panel_window->hide();
UI ux;
ux.showSettings();
}
void PanelUI::cb_Cancel(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void PanelUI::cb_save_button_i(Fl_Button*, void*) {
  flPanel fl_panel;
fl_panel.loadTemp();
fl_panel.saveChanges();
panel_window->hide();
UI ux;
ux.showSettings();
}
void PanelUI::cb_save_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void PanelUI::cb_Application_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char * f = "/usr/bin/";
const char * m="Choose a program";
const char *p="*";
int r = 0;
const char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	std::string icon = result;
	unsigned found = icon.find_last_of("//");
	icon=icon.erase(0,found+1);
	result = icon.c_str();
	app_command->value(result);
	tooltip->value(result);
	icon+=".png";
	std::string iconPath = "/usr/share/pixmaps/"+icon;
	displayAPPicon(iconPath.c_str());
	app_icon_box->redraw();
	icon_name->value(icon.c_str());
};
}
void PanelUI::cb_Application(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Application_i(o,v);
}

void PanelUI::cb_Icon_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{xbm,XBM,xpm,XPM,png,PNG}";
int r = 0;
const char * program = app_command->value();
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL && program !=NULL){
	icon_name->value(result);
	displayAPPicon(result);
};
}
void PanelUI::cb_Icon(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Icon_i(o,v);
}

void PanelUI::cb_app_command_i(Fl_Input* o, void*) {
  const char* result = o->value();
if(result!=NULL){
	std::string icon = result;
	unsigned found = icon.find_last_of("//");
	icon=icon.erase(0,found+1);
	result = icon.c_str();
	app_command->value(result);
	tooltip->value(result);
	icon+=".png";
	std::string iconPath = "/usr/share/pixmaps/"+icon;
	displayAPPicon(iconPath.c_str());
	app_icon_box->redraw();
	icon_name->value(icon.c_str());
};
}
void PanelUI::cb_app_command(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_app_command_i(o,v);
}

void PanelUI::cb_Add1_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char* icon = icon_name->value();
const char* program = app_command->value();
const char* popup = tooltip->value();
int border = shortcut_border->value();
apps.addShortcut(icon,program,popup, border);
c_shortcuts->value(1);
shortcut_browser->add(program);
shortcut_browser->redraw();
apps.saveChangesTemp();
}
void PanelUI::cb_Add1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Add1_i(o,v);
}

void PanelUI::cb_ok_button_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
apps.saveChanges();
shortcut_window->hide();
}
void PanelUI::cb_ok_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_ok_button_i(o,v);
}

void PanelUI::cb_Remove1_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char* program = shortcut_browser->text(shortcut_browser->value());
apps.deleteShortcut(program);
shortcut_browser->redraw();
if(!apps.isShortcuts()){
c_shortcuts->value(0);
};
}
void PanelUI::cb_Remove1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Remove1_i(o,v);
}

void PanelUI::cb_HELP_i(Fl_Text_Display*, void*) {
  const char* text ="Hi, this is the help\nYou will notice it is quite empty\nSorry... we are working on this :)\n";
}
void PanelUI::cb_HELP(Fl_Text_Display* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_HELP_i(o,v);
}

void PanelUI::cb_OK_i(Fl_Button*, void*) {
  help_window->hide();
}
void PanelUI::cb_OK(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void PanelUI::cb_OK1_i(Fl_Button*, void*) {
  new_panel->hide();
}
void PanelUI::cb_OK1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

Fl_Double_Window* PanelUI::make_window() {
  flPanel panel;  panel.load();
  panel.saveChangesTemp();
  //panel.recoverJSM();
  { Fl_Double_Window* o = panel_window = new Fl_Double_Window(335, 665, gettext("Panel Settings"));
    panel_window->color((Fl_Color)31);
    panel_window->selection_color((Fl_Color)22);
    panel_window->user_data((void*)(this));
    panel_window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 340, 665);
      o->color((Fl_Color)31);
      { Fl_Box* o = new Fl_Box(60, 5, 230, 60, gettext("Panel Settings  "));
        o->image(image_jsm);
        o->labelfont(1);
        o->labelsize(18);
        o->labelcolor((Fl_Color)35);
        o->align(Fl_Align(288));
      } // Fl_Box* o
      { Fl_Menu_Button* o = panel_chooser = new Fl_Menu_Button(20, 50, 115, 25);
        panel_chooser->box(FL_GTK_UP_BOX);
        panel_chooser->selection_color((Fl_Color)80);
        panel_chooser->callback((Fl_Callback*)cb_panel_chooser);
        panel_chooser->when(3);
        { Fl_Menu_Item* o = &menu_panel_chooser[2];
          hide_menu(o,2);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[3];
          hide_menu(o,3);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[4];
          hide_menu(o,4);
        }
        if (!menu_panel_chooser_i18n_done) {
          int i=0;
          for ( ; i<6; i++)
            if (menu_panel_chooser[i].label())
              menu_panel_chooser[i].label(gettext(menu_panel_chooser[i].label()));
          menu_panel_chooser_i18n_done = 1;
        }
        panel_chooser->menu(menu_panel_chooser);
        Config conf;int n = conf.currentPanel();
        std::string panel = conf.convert(n);
        std::string LABEL = "Panel ";LABEL +=panel;
        o->copy_label(LABEL.c_str());
      } // Fl_Menu_Button* panel_chooser
      { Fl_Button* o = new Fl_Button(10, 625, 185, 25, gettext("@<-  Main Settings Window"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)46);
        o->callback((Fl_Callback*)cb_Main);
      } // Fl_Button* o
      { Fl_Box* o = new Fl_Box(130, 80, 190, 25);
        o->box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)42);
        o->hide();
      } // Fl_Box* o
      { Fl_Output* o = vh_display = new Fl_Output(215, 80, 90, 25);
        vh_display->box(FL_NO_BOX);
        vh_display->selection_color(FL_DARK_RED);
        vh_display->textcolor(FL_LIGHT2);
        vh_display->hide();
        Config config; config.loadTemp();
        const char* l = config.checkLayout();
        o->value(l);
      } // Fl_Output* vh_display
      { Fl_Output* o = layout_display = new Fl_Output(135, 80, 90, 25, gettext("Current Panel: "));
        layout_display->box(FL_NO_BOX);
        layout_display->selection_color((Fl_Color)73);
        layout_display->textcolor(FL_LIGHT2);
        layout_display->hide();
        Config config; config.loadTemp();
        const char* l = config.getPanelLayout();
        o->value(l);
      } // Fl_Output* layout_display
      { Fl_Tabs* o = new Fl_Tabs(5, 115, 335, 490);
        o->box(FL_PLASTIC_THIN_UP_BOX);
        { Fl_Group* o = new Fl_Group(5, 145, 330, 425, gettext("Apps"));
          o->hide();
          { Fl_Box* o = new Fl_Box(85, 145, 150, 45, gettext("Panel Apps"));
            o->labelfont(1);
            o->labelsize(18);
          } // Fl_Box* o
          { Fl_Check_Button* o = c_shortcuts = new Fl_Check_Button(20, 200, 125, 25, gettext("App Shortcuts"));
            c_shortcuts->down_box(FL_GTK_DOWN_BOX);
            c_shortcuts->value(1);
            c_shortcuts->selection_color(FL_DARK_GREEN);
            c_shortcuts->callback((Fl_Callback*)cb_c_shortcuts);
            c_shortcuts->when(FL_WHEN_RELEASE_ALWAYS);
            Apps apps; apps.loadTemp();
            bool shortcuts = apps.isShortcuts();
            if(shortcuts){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_shortcuts
          { Fl_Check_Button* o = c_clock = new Fl_Check_Button(20, 230, 60, 25, gettext("Clock"));
            c_clock->tooltip(gettext("Show a clock in the panel"));
            c_clock->down_box(FL_GTK_DOWN_BOX);
            c_clock->value(1);
            c_clock->selection_color(FL_DARK_GREEN);
            c_clock->callback((Fl_Callback*)cb_c_clock);
            c_clock->when(3);
            Apps apps;apps.loadTemp();
            bool is = apps.isClock();
            if(is){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_clock
          { Fl_Check_Button* o = new Fl_Check_Button(20, 255, 110, 25, gettext("CPU monitor"));
            o->tooltip(gettext("This shows a graph in the Panel of your CPU usage"));
            o->down_box(FL_GTK_DOWN_BOX);
            o->value(1);
            o->selection_color(FL_DARK_GREEN);
            o->callback((Fl_Callback*)cb_CPU);
            o->when(3);
            Apps apps;apps.loadTemp();
            bool lx = apps.xloadLoaded();
            if(lx){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* o
          { Fl_Check_Button* o = c_desktop = new Fl_Check_Button(20, 276, 200, 25, gettext("Desktop Switcher"));
            c_desktop->tooltip(gettext("Use this to show the Desktop Switcher in the Panel"));
            c_desktop->down_box(FL_GTK_DOWN_BOX);
            c_desktop->value(1);
            c_desktop->selection_color(FL_DARK_GREEN);
            c_desktop->callback((Fl_Callback*)cb_c_desktop);
            Apps apps;apps.loadTemp();
            bool p = apps.isPager();
            if(p){o->value(1);}else{o->value(0);}
            //Pager
          } // Fl_Check_Button* c_desktop
          { Fl_Check_Button* o = c_tasklist = new Fl_Check_Button(20, 297, 155, 25, gettext("Running App List"));
            c_tasklist->tooltip(gettext("This shows the running applications in the Panel"));
            c_tasklist->down_box(FL_GTK_DOWN_BOX);
            c_tasklist->value(1);
            c_tasklist->selection_color(FL_DARK_GREEN);
            c_tasklist->callback((Fl_Callback*)cb_c_tasklist);
            Apps apps;apps.loadTemp();
            bool tl = apps.isTaskList();
            if(tl){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_tasklist
          { Fl_Check_Button* o = c_shutdown = new Fl_Check_Button(20, 318, 140, 25, gettext("Shutdown Menu"));
            c_shutdown->tooltip(gettext("This includes the Shutdown Menu on the right side of your panel"));
            c_shutdown->down_box(FL_GTK_DOWN_BOX);
            c_shutdown->value(1);
            c_shutdown->selection_color(FL_DARK_GREEN);
            c_shutdown->callback((Fl_Callback*)cb_c_shutdown);
            Apps apps;apps.loadTemp();
            bool sd = apps.isShutdown();
            if(sd){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_shutdown
          { Fl_Check_Button* o = c_indicators = new Fl_Check_Button(20, 339, 125, 25, gettext("Indicators"));
            c_indicators->tooltip(gettext("This is a dock for system notifications"));
            c_indicators->down_box(FL_GTK_DOWN_BOX);
            c_indicators->value(1);
            c_indicators->selection_color(FL_DARK_GREEN);
            c_indicators->callback((Fl_Callback*)cb_c_indicators);
            Apps apps;apps.loadTemp();
            bool d = apps.isDock();
            if(d){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_indicators
          { Fl_Check_Button* o = c_places = new Fl_Check_Button(20, 360, 160, 25, gettext("Home Folder Menu"));
            c_places->tooltip(gettext("This adds in your Home Folder, and some Favorite folders."));
            c_places->down_box(FL_GTK_DOWN_BOX);
            c_places->value(1);
            c_places->selection_color(FL_DARK_GREEN);
            c_places->callback((Fl_Callback*)cb_c_places);
            Apps apps;apps.loadTemp();
            bool places = apps.isPlaces();
            if(places){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_places
          { Fl_Check_Button* o = c_battery = new Fl_Check_Button(20, 395, 190, 25, gettext("Battery Applet"));
            c_battery->tooltip(gettext("This can monitor your Laptop Battery and display it in the panel"));
            c_battery->down_box(FL_GTK_DOWN_BOX);
            c_battery->value(1);
            c_battery->selection_color(FL_DARK_GREEN);
            c_battery->callback((Fl_Callback*)cb_c_battery, (void*)("battery"));
            Apps apps;apps.loadTemp();
            bool d = apps.isBattery();
            if(d){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_battery
          { Fl_Check_Button* o = c_volume = new Fl_Check_Button(20, 425, 190, 25, gettext("Volume control"));
            c_volume->tooltip(gettext("This will add a volume icon to the panel"));
            c_volume->down_box(FL_GTK_DOWN_BOX);
            c_volume->value(1);
            c_volume->selection_color(FL_DARK_GREEN);
            c_volume->callback((Fl_Callback*)cb_c_volume);
            Apps apps;apps.loadTemp();
            bool d = apps.isVolume();
            if(d){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_volume
          { Fl_Check_Button* o = c_network = new Fl_Check_Button(20, 455, 135, 20, gettext("Network applet"));
            c_network->tooltip(gettext("Choose this to show the Network applet in the panel"));
            c_network->down_box(FL_GTK_DOWN_BOX);
            c_network->value(1);
            c_network->selection_color(FL_DARK_GREEN);
            c_network->callback((Fl_Callback*)cb_c_network);
            Apps apps;apps.loadTemp();
            bool d = apps.isNetworkMonitor();
            if(d){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* c_network
          { choose_apps = new Fl_Button(150, 200, 70, 25, gettext("Choose"));
            choose_apps->box(FL_GTK_UP_BOX);
            choose_apps->callback((Fl_Callback*)cb_choose_apps);
          } // Fl_Button* choose_apps
          { clock_menu = new Fl_Menu_Button(85, 230, 130, 25, gettext("Clock Format"));
            clock_menu->box(FL_GTK_UP_BOX);
            clock_menu->selection_color(FL_DARK_RED);
            clock_menu->callback((Fl_Callback*)cb_clock_menu);
            if (!menu_clock_menu_i18n_done) {
              int i=0;
              for ( ; i<5; i++)
                if (menu_clock_menu[i].label())
                  menu_clock_menu[i].label(gettext(menu_clock_menu[i].label()));
              menu_clock_menu_i18n_done = 1;
            }
            clock_menu->menu(menu_clock_menu);
          } // Fl_Menu_Button* clock_menu
          { shutdown_icon = new Fl_Button(170, 315, 125, 25, gettext("Choose Icon"));
            shutdown_icon->box(FL_GTK_UP_BOX);
            shutdown_icon->callback((Fl_Callback*)cb_shutdown_icon);
          } // Fl_Button* shutdown_icon
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 140, 335, 455, gettext("Appearance"));
          o->hide();
          { Fl_Box* o = new Fl_Box(15, 160, 310, 100);
            o->box(FL_GTK_DOWN_BOX);
            o->color(FL_DARK2);
          } // Fl_Box* o
          { Fl_Input* o = app_menu = new Fl_Input(105, 175, 130, 25, gettext("Menu Label"));
            app_menu->box(FL_GTK_DOWN_BOX);
            app_menu->color((Fl_Color)53);
            app_menu->selection_color(FL_DARK_RED);
            app_menu->callback((Fl_Callback*)cb_app_menu);
            app_menu->when(FL_WHEN_CHANGED);
            flPanel fl_panel;fl_panel.loadTemp();
            std::string l= fl_panel.getMenuLabel();
            o->value(l.c_str());
          } // Fl_Input* app_menu
          { new Fl_Box(20, 230, 85, 15, gettext("Menu Icon   "));
          } // Fl_Box* o
          { icon_view = new Fl_Button(130, 205, 50, 50);
            icon_view->box(FL_GTK_DOWN_BOX);
            icon_view->callback((Fl_Callback*)cb_icon_view);
            icon_view->align(Fl_Align(FL_ALIGN_WRAP));
            flPanel f;f.loadTemp();
            std::string icon =f.getMenuImage();
            display(icon.c_str());
          } // Fl_Button* icon_view
          { new Fl_Box(20, 305, 135, 15, gettext("Panel Button Color "));
          } // Fl_Box* o
          { Fl_Button* o = button_color = new Fl_Button(165, 300, 60, 25);
            button_color->box(FL_GTK_UP_BOX);
            button_color->callback((Fl_Callback*)cb_button_color);
            flPanel panel;panel.loadTemp();unsigned int c;
            unsigned int color = panel.getBackground(c,"TrayButtonStyle");
            o->color(color);
          } // Fl_Button* button_color
          { Fl_Slider* o = o_slider = new Fl_Slider(145, 335, 90, 25, gettext("Opacity of Panel  "));
            o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_slider->type(1);
            o_slider->box(FL_GTK_DOWN_BOX);
            o_slider->color((Fl_Color)42);
            o_slider->selection_color(FL_LIGHT1);
            o_slider->step(0.02);
            o_slider->value(1);
            o_slider->callback((Fl_Callback*)cb_o_slider);
            o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            o_slider->when(FL_WHEN_RELEASE);
            flPanel panel;panel.loadTemp();
            float h = panel.getOpacity("TrayStyle");
            o->value(h);
          } // Fl_Slider* o_slider
          { Fl_Value_Input* o = o_slider_v = new Fl_Value_Input(245, 335, 40, 25, gettext("%"));
            o_slider_v->box(FL_GTK_DOWN_BOX);
            o_slider_v->labelsize(10);
            o_slider_v->callback((Fl_Callback*)cb_o_slider_v);
            o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_slider_v
          { new Fl_Box(15, 390, 150, 25, gettext("Menu Background"));
          } // Fl_Box* o
          { Fl_Button* o = menu_bg_color = new Fl_Button(165, 389, 60, 25);
            menu_bg_color->box(FL_GTK_UP_BOX);
            menu_bg_color->callback((Fl_Callback*)cb_menu_bg_color);
            flPanel fl_panel;fl_panel.loadTemp();unsigned int c;
            unsigned int color = fl_panel.getBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_bg_color
          { Fl_Button* o = menu_fg_color = new Fl_Button(165, 420, 60, 25);
            menu_fg_color->box(FL_GTK_UP_BOX);
            menu_fg_color->callback((Fl_Callback*)cb_menu_fg_color);
            flPanel panel;panel.loadTemp();unsigned int c;
            unsigned int color = panel.getActiveBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_fg_color
          { Fl_Box* o = new Fl_Box(75, 500, 135, 25, gettext("Running Apps"));
            o->labelfont(1);
            o->labelsize(16);
          } // Fl_Box* o
          { Fl_Button* o = task_bg_color = new Fl_Button(165, 565, 60, 25);
            task_bg_color->box(FL_GTK_UP_BOX);
            task_bg_color->callback((Fl_Callback*)cb_task_bg_color);
            flPanel panel;panel.loadTemp();unsigned int c;
            unsigned int color = panel.getBackground(c,"TaskListStyle");
            o->color(color);
          } // Fl_Button* task_bg_color
          { Fl_Button* o = task_fg_color = new Fl_Button(165, 530, 60, 25);
            task_fg_color->box(FL_GTK_UP_BOX);
            task_fg_color->callback((Fl_Callback*)cb_task_fg_color);
            flPanel panel;panel.loadTemp();unsigned int c;
            unsigned int color = panel.getActiveBackground(c,"TaskListStyle");
            o->color(color);
          } // Fl_Button* task_fg_color
          { new Fl_Box(20, 265, 85, 15, gettext("Panel Color "));
          } // Fl_Box* o
          { Fl_Button* o = b_color = new Fl_Button(165, 265, 60, 25);
            b_color->box(FL_GTK_UP_BOX);
            b_color->callback((Fl_Callback*)cb_b_color);
            flPanel fl_panel;fl_panel.loadTemp();unsigned int c;
            unsigned int color = fl_panel.getBackground(c, "TrayStyle");
            o->color(color);
          } // Fl_Button* b_color
          { Fl_Slider* o = o_menu_slider = new Fl_Slider(140, 450, 90, 25, gettext("Opacity of Menu"));
            o_menu_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_menu_slider->type(1);
            o_menu_slider->box(FL_GTK_DOWN_BOX);
            o_menu_slider->color((Fl_Color)42);
            o_menu_slider->selection_color(FL_LIGHT1);
            o_menu_slider->step(0.02);
            o_menu_slider->value(1);
            o_menu_slider->callback((Fl_Callback*)cb_o_menu_slider);
            o_menu_slider->align(Fl_Align(FL_ALIGN_LEFT));
            o_menu_slider->when(FL_WHEN_RELEASE);
            flPanel panel;panel.loadTemp();
            float h = panel.getOpacity("MenuStyle");
            o->value(h);
          } // Fl_Slider* o_menu_slider
          { Fl_Value_Input* o = o_menu_slider_v = new Fl_Value_Input(245, 450, 40, 25, gettext("%"));
            o_menu_slider_v->box(FL_GTK_DOWN_BOX);
            o_menu_slider_v->labelsize(10);
            o_menu_slider_v->callback((Fl_Callback*)cb_o_menu_slider_v);
            o_menu_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_menu_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_menu_slider_v
          { new Fl_Box(20, 420, 120, 25, gettext("Menu Selection"));
          } // Fl_Box* o
          { new Fl_Box(55, 565, 95, 25, gettext("Open Apps"));
          } // Fl_Box* o
          { new Fl_Box(55, 530, 95, 25, gettext("Current App"));
          } // Fl_Box* o
          { Fl_Check_Button* o = new Fl_Check_Button(200, 215, 110, 25, gettext("Applications Menu"));
            o->tooltip(gettext("Add Applications menu to the panel"));
            o->down_box(FL_GTK_DOWN_BOX);
            o->value(1);
            o->selection_color(FL_DARK_GREEN);
            o->callback((Fl_Callback*)cb_Applications);
            o->align(Fl_Align(132|FL_ALIGN_INSIDE));
            o->when(FL_WHEN_CHANGED);
            Apps apps;apps.loadTemp();
            bool lx = apps.isAppMenu();
            if(lx){o->value(1);}else{o->value(0);}
          } // Fl_Check_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 140, 330, 465, gettext("Size And Position"));
          { Fl_Box* o = new Fl_Box(65, 345, 185, 30, gettext("Advanced Options"));
            o->labelfont(1);
            o->labelsize(18);
          } // Fl_Box* o
          { Fl_Value_Input* o = new Fl_Value_Input(185, 440, 25, 25, gettext("Y position of panel"));
            o->box(FL_GTK_DOWN_BOX);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_Y);
            flPanel panel;panel.loadTemp();
            int y = panel.getCoordinate("y");
            o->value(y);
          } // Fl_Value_Input* o
          { Fl_Value_Input* o = new Fl_Value_Input(185, 395, 25, 25, gettext("X position of panel"));
            o->box(FL_GTK_DOWN_BOX);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_X);
            flPanel panel;panel.loadTemp();
            int x = panel.getCoordinate("x");
            o->value(x);
          } // Fl_Value_Input* o
          { Fl_Menu_Button* o = new Fl_Menu_Button(20, 190, 125, 25, gettext("Panel Position"));
            o->box(FL_GTK_UP_BOX);
            o->selection_color((Fl_Color)80);
            if (!menu_Panel_i18n_done) {
              int i=0;
              for ( ; i<11; i++)
                if (menu_Panel[i].label())
                  menu_Panel[i].label(gettext(menu_Panel[i].label()));
              menu_Panel_i18n_done = 1;
            }
            o->menu(menu_Panel);
          } // Fl_Menu_Button* o
          { Fl_Slider* o = w_slider = new Fl_Slider(140, 243, 90, 25, gettext("Width of Panel  "));
            w_slider->tooltip(gettext("0 is Full Length"));
            w_slider->type(1);
            w_slider->box(FL_GTK_DOWN_BOX);
            w_slider->color((Fl_Color)42);
            w_slider->selection_color((Fl_Color)29);
            w_slider->maximum(2000);
            w_slider->step(2);
            w_slider->value(32);
            w_slider->callback((Fl_Callback*)cb_w_slider);
            w_slider->align(Fl_Align(FL_ALIGN_LEFT));
            w_slider->when(FL_WHEN_RELEASE);
            flPanel panel;panel.loadTemp();
            int h = panel.getWidth();
            o->value(h);
          } // Fl_Slider* w_slider
          { Fl_Slider* o = h_slider = new Fl_Slider(140, 290, 90, 25, gettext("Height of Panel  "));
            h_slider->tooltip(gettext("Panel Size between 14 and 78"));
            h_slider->type(1);
            h_slider->box(FL_GTK_DOWN_BOX);
            h_slider->color((Fl_Color)42);
            h_slider->selection_color((Fl_Color)29);
            h_slider->maximum(78);
            h_slider->step(2);
            h_slider->value(32);
            h_slider->callback((Fl_Callback*)cb_h_slider);
            h_slider->align(Fl_Align(FL_ALIGN_LEFT));
            h_slider->when(FL_WHEN_RELEASE);
            flPanel panel;panel.loadTemp();
            int h = panel.getHeight();
            o->value(h);
          } // Fl_Slider* h_slider
          { Fl_Value_Input* o = height_input = new Fl_Value_Input(235, 290, 35, 25, gettext("pixels"));
            height_input->box(FL_GTK_DOWN_BOX);
            height_input->labelsize(10);
            height_input->callback((Fl_Callback*)cb_height_input);
            height_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = h_slider->value();
            o->value(v);
          } // Fl_Value_Input* height_input
          { Fl_Slider* o = border_slider = new Fl_Slider(190, 495, 90, 25, gettext("Width of Panel Border"));
            border_slider->type(1);
            border_slider->box(FL_GTK_DOWN_BOX);
            border_slider->color((Fl_Color)42);
            border_slider->selection_color((Fl_Color)29);
            border_slider->maximum(32);
            border_slider->step(1);
            border_slider->callback((Fl_Callback*)cb_border_slider);
            border_slider->align(Fl_Align(FL_ALIGN_LEFT));
            border_slider->when(FL_WHEN_RELEASE);
            flPanel panel;panel.loadTemp();
            int h = panel.getBorder();
            o->value(h);
          } // Fl_Slider* border_slider
          { Fl_Value_Output* o = border_slider_v = new Fl_Value_Output(205, 530, 35, 25, gettext("pixels"));
            border_slider_v->box(FL_GTK_DOWN_BOX);
            border_slider_v->labelsize(10);
            border_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = border_slider->value();
            o->value(v);
          } // Fl_Value_Output* border_slider_v
          { Fl_Value_Input* o = width_input = new Fl_Value_Input(240, 245, 35, 25, gettext("pixels"));
            width_input->box(FL_GTK_DOWN_BOX);
            width_input->labelsize(10);
            width_input->callback((Fl_Callback*)cb_width_input);
            width_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = w_slider->value();
            o->value(v);
          } // Fl_Value_Input* width_input
          { Fl_Check_Button* o = new Fl_Check_Button(205, 190, 95, 25, gettext("Autohide?"));
            o->tooltip(gettext("This will make the Panel hide when you aren\'t using it."));
            o->down_box(FL_GTK_DOWN_BOX);
            o->selection_color((Fl_Color)59);
            o->callback((Fl_Callback*)cb_Autohide);
            o->when(FL_WHEN_CHANGED);
            flPanel fl_panel;fl_panel.loadTemp();
            std::string a = fl_panel.getAutohide();
            if(a=="true"){o->value(1);}
            else{o->value(0);}
          } // Fl_Check_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(209, 625, 57, 25, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { save_button = new Fl_Button(275, 625, 45, 25, gettext("OK"));
        save_button->tooltip(gettext("Write to configuration file"));
        save_button->box(FL_GTK_UP_BOX);
        save_button->color((Fl_Color)61);
        save_button->selection_color((Fl_Color)59);
        save_button->labelcolor((Fl_Color)55);
        save_button->callback((Fl_Callback*)cb_save_button);
      } // Fl_Button* save_button
      o->end();
    } // Fl_Scroll* o
    //o->icon("/usr/share/icons/jsm-panel.png");
    panel_window->end();
    panel_window->resizable(panel_window);
  } // Fl_Double_Window* panel_window
  return panel_window;
}

Fl_Double_Window* PanelUI::make_shortcut_window() {
  { shortcut_window = new Fl_Double_Window(500, 255, gettext("Choose an application to add"));
    shortcut_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(25, 25, 105, 25, gettext("Application"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Application);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(20, 100, 65, 25, gettext("Icon"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Icon);
    } // Fl_Button* o
    { app_command = new Fl_Input(135, 25, 125, 25);
      app_command->tooltip(gettext("You can add arguments here"));
      app_command->box(FL_GTK_DOWN_BOX);
      app_command->selection_color((Fl_Color)80);
      app_command->callback((Fl_Callback*)cb_app_command);
      app_command->align(Fl_Align(FL_ALIGN_RIGHT));
      app_command->when(FL_WHEN_ENTER_KEY);
    } // Fl_Input* app_command
    { app_icon_box = new Fl_Box(30, 137, 48, 48);
      app_icon_box->box(FL_GTK_DOWN_BOX);
      app_icon_box->color((Fl_Color)42);
    } // Fl_Box* app_icon_box
    { tooltip = new Fl_Input(135, 60, 125, 25, gettext("Tooltip Label"));
      tooltip->box(FL_GTK_DOWN_BOX);
      tooltip->selection_color((Fl_Color)80);
    } // Fl_Input* tooltip
    { icon_name = new Fl_Output(115, 100, 140, 25);
      icon_name->box(FL_GTK_DOWN_BOX);
      icon_name->selection_color((Fl_Color)80);
    } // Fl_Output* icon_name
    { Fl_Button* o = new Fl_Button(95, 145, 125, 35, gettext("@+  Add to panel"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Add1);
    } // Fl_Button* o
    { ok_button = new Fl_Button(225, 220, 45, 25, gettext("SAVE"));
      ok_button->tooltip(gettext("Write to configuration file"));
      ok_button->box(FL_GTK_UP_BOX);
      ok_button->color((Fl_Color)61);
      ok_button->selection_color((Fl_Color)59);
      ok_button->labelcolor((Fl_Color)55);
      ok_button->callback((Fl_Callback*)cb_ok_button);
    } // Fl_Button* ok_button
    { shortcut_border = new Fl_Check_Button(10, 195, 265, 25, gettext("Show a Border around the Button?"));
      shortcut_border->tooltip(gettext("The button you are adding can be borderless, if you like"));
      shortcut_border->down_box(FL_GTK_DOWN_BOX);
      shortcut_border->selection_color(FL_DARK_GREEN);
      shortcut_border->deactivate();
    } // Fl_Check_Button* shortcut_border
    { Fl_Browser* o = shortcut_browser = new Fl_Browser(305, 15, 170, 150);
      shortcut_browser->box(FL_GTK_DOWN_BOX);
      shortcut_browser->when(FL_WHEN_NEVER);
      Apps apps;apps.loadTemp();o->type(FL_SELECT_BROWSER);
      apps.getShortcuts(o);o->redraw();
    } // Fl_Browser* shortcut_browser
    { Fl_Button* o = new Fl_Button(310, 175, 170, 35, gettext("@  Remove from panel"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Remove1);
    } // Fl_Button* o
    shortcut_window->end();
  } // Fl_Double_Window* shortcut_window
  return shortcut_window;
}

Fl_Double_Window* PanelUI::make_help_window() {
  { help_window = new Fl_Double_Window(380, 505);
    help_window->user_data((void*)(this));
    { Fl_Text_Display* o = new Fl_Text_Display(40, 40, 295, 400, gettext("HELP"));
      o->box(FL_GTK_DOWN_BOX);
      o->selection_color(FL_DARK_RED);
      o->callback((Fl_Callback*)cb_HELP);
    } // Fl_Text_Display* o
    { Fl_Button* o = new Fl_Button(155, 470, 45, 25, gettext("OK"));
      o->tooltip(gettext("Close the Help Window"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    help_window->end();
  } // Fl_Double_Window* help_window
  return help_window;
}

void PanelUI::one_color(Fl_Widget *o, const char* whichElement) {
  flPanel panel;panel.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	panel.setBackground(colors, whichElement);
  	unsigned int unusedColor;
  	unsigned int colorSet = panel.getBackground(unusedColor, whichElement);
  	o->color(colorSet);
  	o->redraw();
  	panel.saveChangesTemp();
  }
}

void PanelUI::display(const char* filename) {
  std::string extention, filenameStr;
  filenameStr = filename;
  if (filenameStr.length() == 0)return;
  extention = filenameStr.substr((strlen(filename)-4),4);
  //std::cout<<extention<<"\n";
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  Fl_Image* image;
  std::string png =".png";
  std::string xpm =".xpm";
  std::string svg =".svg";
  if (extention.compare(png) ==0){
  	image = new Fl_PNG_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	icon_view->image(image2);
  	icon_view->redraw();
  }
  else if(extention.compare(xpm) ==0){
  	image = new Fl_XPM_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	icon_view->image(image2);
  	icon_view->redraw();
  }
  else if(extention.compare(svg) ==0){
  return;
  }
  else {
  	icon_view->label("FLTK cannot display");
  }
}

void PanelUI::displayAPPicon(const char* filename) {
  std::string extention, filenameStr;
  filenameStr = filename;
  extention = filenameStr.substr((strlen(filename)-4),4);
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  Fl_Image* image;
  std::string png =".png";
  std::string xpm =".xpm";
  if (extention.compare(png) ==0){
  	image = new Fl_PNG_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	app_icon_box->image(image2);
  	app_icon_box->redraw();
  }
  else if(extention.compare(xpm) ==0){
  	image = new Fl_XPM_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	app_icon_box->image(image2);
  	app_icon_box->redraw();
  }
}

void PanelUI::one_color_active(Fl_Widget *o, const char* whichElement) {
  flPanel panel;panel.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	panel.setActiveBackground(colors, whichElement);
  	unsigned int unusedColor;
  	unsigned int colorSet = panel.getActiveBackground(unusedColor, whichElement);
  	panel.saveChangesTemp();
  	o->color(colorSet);
  	o->redraw();
  }
}

void PanelUI::panel_label(Fl_Menu_Button *o) {
  flPanel panel;panel.loadTemp();
  int num = 1;
  std::string x = panel.convert(num);
  std::string l = "Panel ";
  l+=x;
  o->copy_label(l.c_str());
  o->redraw();
}

Fl_Double_Window* PanelUI::new_panel_window() {
  { new_panel = new Fl_Double_Window(290, 115, gettext("Add a Panel"));
    new_panel->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(25, 25, 240, 50, gettext("Only Four Panels are supported Currently"));
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(85, 80, 105, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    new_panel->end();
  } // Fl_Double_Window* new_panel
  return new_panel;
}

unsigned int PanelUI::switch_panel(Fl_Menu_Item *o) {
  flPanel panel; panel.loadTemp();
  unsigned int whichPanel = o->value();
  return whichPanel;
}

void PanelUI::Menu_CB(int num) {
  flPanel panel;
  panel.recoverJSM(num);
  panel.loadTemp();
  panel.saveChanges();
  int n = panel.currentPanel();
  std::string l = panel.convert(n);
  std::string LABEL = "Panel ";LABEL +=l;
  panel_chooser->copy_label(LABEL.c_str());
  panel_window->hide();
  //panel_window->show();
  UI ux;
  ux.showPanel();
}

void PanelUI::hide_menu(Fl_Menu_Item * o, int whichOne) {
  flPanel panel;
  panel.loadTemp();
  int num = panel.numPanels();
  if (whichOne > num) o->hide();
  else o->show();
}
