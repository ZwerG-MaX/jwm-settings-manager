/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-panel.h"

void PanelUI::cb_panel_chooser_i(Fl_Menu_Button* o, void*) {
  flPanel panel;
std::string panelLabel = panel.convert(panel.currentPanel());
std::string LABEL = "Panel ";
LABEL +=panelLabel;
o->copy_label(LABEL.c_str());
}
void PanelUI::cb_panel_chooser(Fl_Menu_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_panel_chooser_i(o,v);
}

void PanelUI::cb_Add_i(Fl_Menu_*, void*) {
  flPanel panel;
if((panel.numPanels())>=4){
  new_panel_window()->show();
}
else{
  panel.addPanel();
  Menu_CB(panel.numPanels());
};
}
void PanelUI::cb_Add(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void PanelUI::cb_Panel_i(Fl_Menu_*, void*) {
  Menu_CB(1);
}
void PanelUI::cb_Panel(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel_i(o,v);
}

void PanelUI::cb_Panel1_i(Fl_Menu_*, void*) {
  Menu_CB(2);
}
void PanelUI::cb_Panel1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel1_i(o,v);
}

void PanelUI::cb_Panel2_i(Fl_Menu_*, void*) {
  Menu_CB(3);
}
void PanelUI::cb_Panel2(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel2_i(o,v);
}

void PanelUI::cb_Panel3_i(Fl_Menu_*, void*) {
  Menu_CB(4);
}
void PanelUI::cb_Panel3(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Panel3_i(o,v);
}

void PanelUI::cb_Remove_i(Fl_Menu_*, void*) {
  flPanel panel;
panel.deletePanel();
int a = panel.numPanels();
Menu_CB(a);
}
void PanelUI::cb_Remove(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Remove_i(o,v);
}

unsigned char PanelUI::menu_panel_chooser_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_panel_chooser[] = {
 {"Add a Panel  +", 0,  (Fl_Callback*)PanelUI::cb_Add, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 1", 0,  (Fl_Callback*)PanelUI::cb_Panel, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 2", 0,  (Fl_Callback*)PanelUI::cb_Panel1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 3", 0,  (Fl_Callback*)PanelUI::cb_Panel2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Panel 4", 0,  (Fl_Callback*)PanelUI::cb_Panel3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Remove Current  Panel", 0,  (Fl_Callback*)PanelUI::cb_Remove, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb__i(Fl_Button*, void*) {
  remove_app();
}
void PanelUI::cb_(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void PanelUI::cb_app_browser_i(Fl_Browser*, void*) {
  unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  //Do I really want to have clicking open the config?
 // config_Item(result);
};
}
void PanelUI::cb_app_browser(Fl_Browser* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_app_browser_i(o,v);
}

void PanelUI::cb_Configure_i(Fl_Button*, void*) {
  unsigned int appLine=app_browser->value();
unsigned int size =app_browser->size();
if(appLine <= size && appLine !=0){
  std::string result=app_browser->text(app_browser->value());
  config_Item(result);
};
}
void PanelUI::cb_Configure(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Configure_i(o,v);
}

void PanelUI::cb_choose_apps_i(Fl_Button*, void*) {
  add_to_panel()->show();
}
void PanelUI::cb_choose_apps(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_choose_apps_i(o,v);
}

void PanelUI::cb_98_i(Fl_Button*, void*) {
  move_up();
}
void PanelUI::cb_98(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_98_i(o,v);
}

void PanelUI::cb_92_i(Fl_Button*, void*) {
  move_down();
}
void PanelUI::cb_92(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_92_i(o,v);
}

void PanelUI::cb_menu_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"MenuStyle");
}
void PanelUI::cb_menu_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_bg_color_i(o,v);
}

void PanelUI::cb_menu_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"MenuStyle");
}
void PanelUI::cb_menu_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_fg_color_i(o,v);
}

void PanelUI::cb_menu_font_color_i(Fl_Button* o, void*) {
  one_color_Font(o,"MenuStyle");
}
void PanelUI::cb_menu_font_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_menu_font_color_i(o,v);
}

void PanelUI::cb_o_menu_slider_i(Fl_Slider* o, void*) {
  opacity(o_menu_slider_v,o,"MenuStyle");
}
void PanelUI::cb_o_menu_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_i(o,v);
}

void PanelUI::cb_o_menu_slider_v_i(Fl_Value_Input* o, void*) {
  opacity(o,o_menu_slider,"MenuStyle");
}
void PanelUI::cb_o_menu_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_menu_slider_v_i(o,v);
}

void PanelUI::cb_b_color_i(Fl_Button* o, void*) {
  one_color(o, "TrayStyle");
}
void PanelUI::cb_b_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_b_color_i(o,v);
}

void PanelUI::cb_button_color_i(Fl_Button* o, void*) {
  one_color(o,"TrayButtonStyle");
}
void PanelUI::cb_button_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_color_i(o,v);
}

void PanelUI::cb_o_slider_i(Fl_Slider*, void*) {
  opacity(o_slider_v,o_slider,"TrayStyle");
}
void PanelUI::cb_o_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_i(o,v);
}

void PanelUI::cb_o_slider_v_i(Fl_Value_Input*, void*) {
  opacity(o_slider_v,o_slider,"TrayStyle");
}
void PanelUI::cb_o_slider_v(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_o_slider_v_i(o,v);
}

void PanelUI::cb_Edit_i(Fl_Button*, void*) {
  UI ux;
ux.showMenu();
}
void PanelUI::cb_Edit(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Edit_i(o,v);
}

void PanelUI::cb_top_i(Fl_Menu_*, void*) {
  panel_position("top");
}
void PanelUI::cb_top(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top_i(o,v);
}

void PanelUI::cb_bottom_i(Fl_Menu_*, void*) {
  panel_position("bottom");
}
void PanelUI::cb_bottom(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom_i(o,v);
}

void PanelUI::cb_right_i(Fl_Menu_*, void*) {
  panel_position("right");
}
void PanelUI::cb_right(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right_i(o,v);
}

void PanelUI::cb_left_i(Fl_Menu_*, void*) {
  panel_position("left");
}
void PanelUI::cb_left(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left_i(o,v);
}

unsigned char PanelUI::menu_Panel_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_Panel[] = {
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_top1_i(Fl_Menu_*, void*) {
  autohide_position("top");
}
void PanelUI::cb_top1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_top1_i(o,v);
}

void PanelUI::cb_bottom1_i(Fl_Menu_*, void*) {
  autohide_position("bottom");
}
void PanelUI::cb_bottom1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_bottom1_i(o,v);
}

void PanelUI::cb_right1_i(Fl_Menu_*, void*) {
  autohide_position("right");
}
void PanelUI::cb_right1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_right1_i(o,v);
}

void PanelUI::cb_left1_i(Fl_Menu_*, void*) {
  autohide_position("left");
}
void PanelUI::cb_left1(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_left1_i(o,v);
}

void PanelUI::cb_none_i(Fl_Menu_*, void*) {
  autohide_position("off");
}
void PanelUI::cb_none(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_none_i(o,v);
}

unsigned char PanelUI::menu_choose_autohide_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_choose_autohide[] = {
 {"top", 0,  (Fl_Callback*)PanelUI::cb_top1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"bottom", 0,  (Fl_Callback*)PanelUI::cb_bottom1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"right", 0,  (Fl_Callback*)PanelUI::cb_right1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"left", 0,  (Fl_Callback*)PanelUI::cb_left1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"none", 0,  (Fl_Callback*)PanelUI::cb_none, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_autohide_check_i(Fl_Check_Button* o, void*) {
  flPanel fl_panel;
int autohide=o->value();
bool autohideValue = bool(autohide);
fl_panel.panelAutohide(autohideValue);
}
void PanelUI::cb_autohide_check(Fl_Check_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_autohide_check_i(o,v);
}

void PanelUI::cb_w_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,width_input,"width");
}
void PanelUI::cb_w_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_w_slider_i(o,v);
}

void PanelUI::cb_width_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(w_slider,o,"width");
}
void PanelUI::cb_width_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_width_input_i(o,v);
}

void PanelUI::cb_h_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,height_input,"height");
}
void PanelUI::cb_h_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_h_slider_i(o,v);
}

void PanelUI::cb_height_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(h_slider,o,"height");
}
void PanelUI::cb_height_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_height_input_i(o,v);
}

void PanelUI::cb_X_i(Fl_Value_Input* o, void*) {
  coordinate("x",o,2);
}
void PanelUI::cb_X(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

void PanelUI::cb_Y_i(Fl_Value_Input* o, void*) {
  coordinate("y",o,2);
}
void PanelUI::cb_Y(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Y_i(o,v);
}

void PanelUI::cb_border_slider_i(Fl_Slider* o, void*) {
  width_height_border(o,border_input,"border");
}
void PanelUI::cb_border_slider(Fl_Slider* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_border_slider_i(o,v);
}

void PanelUI::cb_border_input_i(Fl_Value_Input* o, void*) {
  input_width_height_border(border_slider,o,"border");
}
void PanelUI::cb_border_input(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_border_input_i(o,v);
}

void PanelUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel_button();
}
void PanelUI::cb_Cancel(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void PanelUI::cb_save_button_i(Fl_Button*, void*) {
  ok();
}
void PanelUI::cb_save_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void PanelUI::cb_Battery_i(Fl_Button*, void*) {
  Apps app;
app.addBattery();
app.getIndicators(indicator_browser);
}
void PanelUI::cb_Battery(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Battery_i(o,v);
}

void PanelUI::cb_Volume_i(Fl_Button*, void*) {
  Apps app;
app.addVolume();
app.getIndicators(indicator_browser);
}
void PanelUI::cb_Volume(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Volume_i(o,v);
}

void PanelUI::cb_Network_i(Fl_Button*, void*) {
  Apps app;
app.addNetworkMonitor();
app.getIndicators(indicator_browser);
}
void PanelUI::cb_Network(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Network_i(o,v);
}

void PanelUI::cb_OK_i(Fl_Button*, void*) {
  indicator_win->hide();
}
void PanelUI::cb_OK(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void PanelUI::cb_OK1_i(Fl_Button*, void*) {
  flPanel panel;
panel.saveChanges();
add_2_panel->hide();
refresh_app_browser();
}
void PanelUI::cb_OK1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void PanelUI::cb_1_i(Fl_Button*, void*) {
  add_item();
}
void PanelUI::cb_1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void PanelUI::cb_OK2_i(Fl_Button*, void*) {
  save_user_clock();
}
void PanelUI::cb_OK2(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK2_i(o,v);
}

void PanelUI::cb_clock_style_i(Fl_Input* o, void*) {
  const char* style = o->value();
Apps app;
std::string result = app.getClock(style);
clock_display->redraw_label();
clock_display->copy_label(result.c_str());
clock_display->redraw();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_clock_style(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_clock_style_i(o,v);
}

void PanelUI::cb_2_i(Fl_Browser* o, void*) {
  std::string item=o->text(o->value());
item= item.substr(0,2);
clock_style->insert(item.c_str());
//std::cerr<<"Click Clock: "<<item<<std::endl;
}
void PanelUI::cb_2(Fl_Browser* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void PanelUI::cb_OK3_i(Fl_Button*, void*) {
  conf_applist_window->hide();
}
void PanelUI::cb_OK3(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK3_i(o,v);
}

void PanelUI::cb_task_bg_color_i(Fl_Button* o, void*) {
  one_color(o,"TaskListStyle");
}
void PanelUI::cb_task_bg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_task_bg_color_i(o,v);
}

void PanelUI::cb_task_fg_color_i(Fl_Button* o, void*) {
  one_color_active(o,"TaskListStyle");
}
void PanelUI::cb_task_fg_color(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_task_fg_color_i(o,v);
}

void PanelUI::cb_Day_i(Fl_Menu_*, void*) {
  Apps apps;
apps.changeClock("Day");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_Day(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Day_i(o,v);
}

void PanelUI::cb_24_i(Fl_Menu_*, void*) {
  Apps apps;
apps.changeClock("24");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_24(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_24_i(o,v);
}

void PanelUI::cb_12_i(Fl_Menu_*, void*) {
  Apps apps;
apps.changeClock("12");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_12(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_12_i(o,v);
}

void PanelUI::cb_Year_i(Fl_Menu_*, void*) {
  Apps apps;
apps.changeClock("Year");
std::string result = apps.getClock();
clock_displayer->redraw_label();
clock_displayer->copy_label(result.c_str());
clock_displayer->redraw();
}
void PanelUI::cb_Year(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Year_i(o,v);
}

void PanelUI::cb_Advanced_i(Fl_Menu_*, void*) {
  clock_window()->show();
}
void PanelUI::cb_Advanced(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Advanced_i(o,v);
}

unsigned char PanelUI::menu_clock_menu_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_clock_menu[] = {
 {"Day name Month Day 12 Hour", 0,  (Fl_Callback*)PanelUI::cb_Day, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"24 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_24, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"12 Hour Clock", 0,  (Fl_Callback*)PanelUI::cb_12, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Year Month Day 24 Hour clock", 0,  (Fl_Callback*)PanelUI::cb_Year, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"(Advanced) User Defined", 0,  (Fl_Callback*)PanelUI::cb_Advanced, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_OK4_i(Fl_Button*, void*) {
  conf_clock_window->hide();
}
void PanelUI::cb_OK4(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK4_i(o,v);
}

void PanelUI::cb_OK5_i(Fl_Button*, void*) {
  conf_indicator_window->hide();
}
void PanelUI::cb_OK5(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK5_i(o,v);
}

void PanelUI::cb_3_i(Fl_Button*, void*) {
  remove_indicator();
}
void PanelUI::cb_3(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void PanelUI::cb_4_i(Fl_Button*, void*) {
  add_indicator()->show();
}
void PanelUI::cb_4(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_4_i(o,v);
}

void PanelUI::cb_OK6_i(Fl_Button*, void*) {
  std::string input = manually_in->value();
std::string item = hid_in->value();
change_manual_item(input, item);
conf_manual_window->hide();
}
void PanelUI::cb_OK6(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK6_i(o,v);
}

void PanelUI::cb_Icon_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{xbm,XBM,xpm,XPM,png,PNG,svg,SVG}";
int r = 0;
const char * program = manually_in->value();
char *result = fl_file_chooser(m,p,f,r);
std::string icon = result;
if(result!=NULL && program !=NULL){
	icon_file->value(result);
};
}
void PanelUI::cb_Icon(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Icon_i(o,v);
}

void PanelUI::cb_OK7_i(Fl_Button*, void*) {
  conf_menu_window->hide();
}
void PanelUI::cb_OK7(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK7_i(o,v);
}

void PanelUI::cb_app_menu_i(Fl_Input* o, void*) {
  flPanel panel;
const char * label=o->value();
panel.menuLabel(label);
}
void PanelUI::cb_app_menu(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_app_menu_i(o,v);
}

void PanelUI::cb_icon_view_i(Fl_Button*, void*) {
  const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
flPanel panel;
const char *p="*.{xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	panel.setImageMenu(result,5);
	display(result);
};
}
void PanelUI::cb_icon_view(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_icon_view_i(o,v);
}

void PanelUI::cb_Traditional_i(Fl_Menu_*, void*) {
  change_menu(1);
}
void PanelUI::cb_Traditional(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Traditional_i(o,v);
}

void PanelUI::cb_Gnome_i(Fl_Menu_*, void*) {
  change_menu(2);
}
void PanelUI::cb_Gnome(Fl_Menu_* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Gnome_i(o,v);
}

unsigned char PanelUI::menu_Menu_i18n_done = 0;
Fl_Menu_Item PanelUI::menu_Menu[] = {
 {"Traditional", 0,  (Fl_Callback*)PanelUI::cb_Traditional, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Gnome 2", 0,  (Fl_Callback*)PanelUI::cb_Gnome, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void PanelUI::cb_shutdown_icon_i(Fl_Button*, void*) {
  Apps apps;
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{svg,SVG,xpm,XPM,png,PNG}";
int r = 0;
char *result = fl_file_chooser(m,p,f,r);
if(result!=NULL){
	apps.setShutdownImage(result);
};
}
void PanelUI::cb_shutdown_icon(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_shutdown_icon_i(o,v);
}

void PanelUI::cb_OK8_i(Fl_Button*, void*) {
  conf_shut_window->hide();
}
void PanelUI::cb_OK8(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK8_i(o,v);
}

void PanelUI::cb_OK9_i(Fl_Button*, void*) {
  conf_swallow_window->hide();
}
void PanelUI::cb_OK9(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OK9_i(o,v);
}

void PanelUI::cb_swallow_name_i(Fl_Input* o, void*) {
  flPanel panel;
const char* name = o->value();
panel.setSubElementAttribute("Swallow","name",name);
}
void PanelUI::cb_swallow_name(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_swallow_name_i(o,v);
}

void PanelUI::cb_swallow_config_i(Fl_Input* o, void*) {
  flPanel panel;
const char* name = o->value();
panel.setSubElementText("Swallow",name);
}
void PanelUI::cb_swallow_config(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_swallow_config_i(o,v);
}

void PanelUI::cb_OKa_i(Fl_Button*, void*) {
  conf_switcher->hide();
}
void PanelUI::cb_OKa(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OKa_i(o,v);
}

void PanelUI::cb_5_i(Fl_Button* o, void*) {
  one_color_Font(o,"PagerStyle");
}
void PanelUI::cb_5(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void PanelUI::cb_6_i(Fl_Button* o, void*) {
  one_color_active(o,"PagerStyle");
}
void PanelUI::cb_6(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_6_i(o,v);
}

void PanelUI::cb_7_i(Fl_Button* o, void*) {
  one_color_Font(o,"PagerStyle");
}
void PanelUI::cb_7(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_7_i(o,v);
}

void PanelUI::cb_8_i(Fl_Button* o, void*) {
  one_color(o,"PagerStyle");
}
void PanelUI::cb_8(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_8_i(o,v);
}

void PanelUI::cb_num_desktop_w_i(Fl_Value_Input* o, void*) {
  int width = int((o->value()));
num_desktop_wh_cb("width",width);
}
void PanelUI::cb_num_desktop_w(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_num_desktop_w_i(o,v);
}

void PanelUI::cb_num_desktop_h_i(Fl_Value_Input* o, void*) {
  int height = int((o->value()));
num_desktop_wh_cb("height",height);
}
void PanelUI::cb_num_desktop_h(Fl_Value_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_num_desktop_h_i(o,v);
}

void PanelUI::cb_Application_i(Fl_Button*, void*) {
  icon_for_desktop();
}
void PanelUI::cb_Application(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Application_i(o,v);
}

void PanelUI::cb_Icon1_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
const char * f = "/usr/share/pixmaps";
const char * m="Choose an Icon";
const char *p="*.{xbm,XBM,xpm,XPM,png,PNG,svg,SVG}";
int r = 0;
const char * program = app_command->value();
char *result = fl_file_chooser(m,p,f,r);
std::string icon = result;
if(result!=NULL && program !=NULL){
	icon_name->copy_label(result);
	displayAPPicon(result);
};
}
void PanelUI::cb_Icon1(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_Icon1_i(o,v);
}

void PanelUI::cb_app_command_i(Fl_Input* o, void*) {
  const char* result = o->value();
if(result!=NULL){
	std::string icon = result;
	unsigned found = icon.find_last_of("//");
	icon=icon.erase(0,found+1);
	result = icon.c_str();
	app_command->value(result);
	tooltip->value(result);
	icon+=".png";
	std::string iconPath = "/usr/share/pixmaps/"+icon;
	displayAPPicon(iconPath.c_str());
	app_icon_box->redraw();
	icon_name->copy_label(icon.c_str());
};
}
void PanelUI::cb_app_command(Fl_Input* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_app_command_i(o,v);
}

void PanelUI::cb_9_i(Fl_Button*, void*) {
  clear_shortcuts();
}
void PanelUI::cb_9(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_9_i(o,v);
}

void PanelUI::cb_ok_button_i(Fl_Button*, void*) {
  flPanel panel;
panel.saveJWMRC();
shortcut_window->hide();
refresh_app_browser();
}
void PanelUI::cb_ok_button(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_ok_button_i(o,v);
}

void PanelUI::cb_a_i(Fl_Button*, void*) {
  Apps apps;apps.loadTemp();
std::string prog = "exec:";
int whichLine = shortcut_browser->value();
const char* lineIS = shortcut_browser->text(whichLine);
if (lineIS == NULL){return;}
const char* program = prog.c_str();
std::cerr<<"*"<<program<<"*"<<std::endl;
if (prog.compare("exec:")!=0){
	apps.deleteShortcut(program);
	shortcut_browser->clear();
	apps.getShortcuts(shortcut_browser);
	shortcut_browser->redraw();
};
}
void PanelUI::cb_a(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_a_i(o,v);
}

void PanelUI::cb_OKb_i(Fl_Button*, void*) {
  new_panel->hide();
}
void PanelUI::cb_OKb(Fl_Button* o, void* v) {
  ((PanelUI*)(o->parent()->user_data()))->cb_OKb_i(o,v);
}

Fl_Double_Window* PanelUI::make_window() {
  load();
  saveChangesTemp();
  { Fl_Double_Window* o = panel_window = new Fl_Double_Window(335, 525, gettext("Panel Settings"));
    panel_window->color((Fl_Color)31);
    panel_window->selection_color((Fl_Color)22);
    panel_window->user_data((void*)(this));
    panel_window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 355, 665);
      o->color((Fl_Color)31);
      { Fl_Menu_Button* o = panel_chooser = new Fl_Menu_Button(25, 20, 115, 25);
        panel_chooser->box(FL_GTK_UP_BOX);
        panel_chooser->selection_color((Fl_Color)80);
        panel_chooser->callback((Fl_Callback*)cb_panel_chooser);
        panel_chooser->when(3);
        { Fl_Menu_Item* o = &menu_panel_chooser[2];
          hide_menu(o,2);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[3];
          hide_menu(o,3);
        }
        { Fl_Menu_Item* o = &menu_panel_chooser[4];
          hide_menu(o,4);
        }
        if (!menu_panel_chooser_i18n_done) {
          int i=0;
          for ( ; i<6; i++)
            if (menu_panel_chooser[i].label())
              menu_panel_chooser[i].label(gettext(menu_panel_chooser[i].label()));
          menu_panel_chooser_i18n_done = 1;
        }
        panel_chooser->menu(menu_panel_chooser);
        flPanel panel;int n = panel.currentPanel();
        std::string panelLabel = panel.convert(n);
        std::string LABEL = "Panel ";LABEL +=panelLabel;
        o->copy_label(LABEL.c_str());
      } // Fl_Menu_Button* panel_chooser
      { Fl_Box* o = new Fl_Box(130, 80, 190, 25);
        o->box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)42);
        o->hide();
      } // Fl_Box* o
      { Fl_Tabs* o = new Fl_Tabs(5, 60, 350, 415);
        o->box(FL_PLASTIC_THIN_UP_BOX);
        { Fl_Group* o = new Fl_Group(10, 90, 345, 385, gettext("Apps"));
          { Fl_Box* o = new Fl_Box(90, 90, 150, 45, gettext("Panel Apps"));
            o->labelfont(1);
            o->labelsize(18);
          } // Fl_Box* o
          { Fl_Button* o = new Fl_Button(80, 425, 35, 25, gettext("-"));
            o->box(FL_GTK_UP_BOX);
            o->labelfont(1);
            o->labelsize(34);
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          { Fl_Browser* o = app_browser = new Fl_Browser(30, 130, 290, 275);
            app_browser->type(2);
            app_browser->box(FL_GTK_DOWN_BOX);
            app_browser->selection_color(FL_DARK_RED);
            app_browser->callback((Fl_Callback*)cb_app_browser);
            Apps app;
            app.populate(o);
          } // Fl_Browser* app_browser
          { Fl_Button* o = new Fl_Button(125, 425, 85, 25, gettext("Configure"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Configure);
          } // Fl_Button* o
          { choose_apps = new Fl_Button(35, 425, 35, 25, gettext("@+"));
            choose_apps->box(FL_GTK_UP_BOX);
            choose_apps->callback((Fl_Callback*)cb_choose_apps);
          } // Fl_Button* choose_apps
          { Fl_Button* o = new Fl_Button(230, 425, 40, 30, gettext("@+98>"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_98);
            o->hide();
            o->deactivate();
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(275, 425, 40, 30, gettext("@+92>"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_92);
            o->hide();
            o->deactivate();
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(5, 85, 340, 335, gettext("Appearance"));
          o->hide();
          { new Fl_Box(32, 135, 129, 25, gettext("Menu Background"));
          } // Fl_Box* o
          { Fl_Button* o = menu_bg_color = new Fl_Button(182, 134, 60, 25);
            menu_bg_color->box(FL_GTK_UP_BOX);
            menu_bg_color->callback((Fl_Callback*)cb_menu_bg_color);
            flPanel fl_panel;unsigned int c;
            unsigned int color = fl_panel.getBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_bg_color
          { Fl_Button* o = menu_fg_color = new Fl_Button(182, 176, 60, 25);
            menu_fg_color->box(FL_GTK_UP_BOX);
            menu_fg_color->callback((Fl_Callback*)cb_menu_fg_color);
            flPanel panel;unsigned int c;
            unsigned int color = panel.getActiveBackground(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_fg_color
          { Fl_Button* o = menu_font_color = new Fl_Button(182, 219, 60, 25);
            menu_font_color->box(FL_GTK_UP_BOX);
            menu_font_color->callback((Fl_Callback*)cb_menu_font_color);
            flPanel panel;unsigned int c;
            unsigned int color = panel.getFontColor(c,"MenuStyle");
            o->color(color);
          } // Fl_Button* menu_font_color
          { Fl_Slider* o = o_menu_slider = new Fl_Slider(152, 262, 90, 25, gettext("Opacity of Menu "));
            o_menu_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_menu_slider->type(1);
            o_menu_slider->box(FL_GTK_DOWN_BOX);
            o_menu_slider->color((Fl_Color)42);
            o_menu_slider->selection_color(FL_LIGHT1);
            o_menu_slider->step(0.02);
            o_menu_slider->value(1);
            o_menu_slider->callback((Fl_Callback*)cb_o_menu_slider);
            o_menu_slider->align(Fl_Align(FL_ALIGN_LEFT));
            o_menu_slider->when(FL_WHEN_RELEASE);
            flPanel panel;
            float h = panel.getOpacity("MenuStyle");
            o->value(h);
          } // Fl_Slider* o_menu_slider
          { Fl_Value_Input* o = o_menu_slider_v = new Fl_Value_Input(257, 262, 40, 25, gettext("%"));
            o_menu_slider_v->box(FL_GTK_DOWN_BOX);
            o_menu_slider_v->labelsize(10);
            o_menu_slider_v->callback((Fl_Callback*)cb_o_menu_slider_v);
            o_menu_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_menu_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_menu_slider_v
          { new Fl_Box(31, 175, 112, 25, gettext("Menu Selection"));
          } // Fl_Box* o
          { new Fl_Box(32, 350, 135, 15, gettext("Panel Button Color "));
          } // Fl_Box* o
          { Fl_Button* o = b_color = new Fl_Button(182, 304, 60, 25);
            b_color->box(FL_GTK_UP_BOX);
            b_color->callback((Fl_Callback*)cb_b_color);
            flPanel fl_panel;unsigned int c;
            unsigned int color = fl_panel.getBackground(c, "TrayStyle");
            o->color(color);
          } // Fl_Button* b_color
          { Fl_Button* o = button_color = new Fl_Button(182, 347, 60, 25);
            button_color->box(FL_GTK_UP_BOX);
            button_color->callback((Fl_Callback*)cb_button_color);
            flPanel panel;unsigned int c;
            unsigned int color = panel.getBackground(c,"TrayButtonStyle");
            o->color(color);
          } // Fl_Button* button_color
          { Fl_Slider* o = o_slider = new Fl_Slider(157, 390, 90, 25, gettext("Opacity of Panel  "));
            o_slider->tooltip(gettext("A compositor (like xcompmgr) must be installed"));
            o_slider->type(1);
            o_slider->box(FL_GTK_DOWN_BOX);
            o_slider->color((Fl_Color)42);
            o_slider->selection_color(FL_LIGHT1);
            o_slider->step(0.02);
            o_slider->value(1);
            o_slider->callback((Fl_Callback*)cb_o_slider);
            o_slider->align(Fl_Align(FL_ALIGN_LEFT));
            o_slider->when(FL_WHEN_RELEASE);
            flPanel panel;
            float h = panel.getOpacity("TrayStyle");
            o->value(h);
          } // Fl_Slider* o_slider
          { Fl_Value_Input* o = o_slider_v = new Fl_Value_Input(257, 390, 40, 25, gettext("%"));
            o_slider_v->box(FL_GTK_DOWN_BOX);
            o_slider_v->labelsize(10);
            o_slider_v->callback((Fl_Callback*)cb_o_slider_v);
            o_slider_v->align(Fl_Align(FL_ALIGN_RIGHT));
            float v = o_slider->value();
            o->value(v*100.0f);
          } // Fl_Value_Input* o_slider_v
          { new Fl_Box(32, 310, 85, 15, gettext("Panel Color "));
          } // Fl_Box* o
          { new Fl_Box(30, 220, 120, 25, gettext("Menu Font Color"));
          } // Fl_Box* o
          { Fl_Button* o = new Fl_Button(65, 105, 105, 25, gettext("Edit Menus"));
            o->box(FL_GTK_UP_BOX);
            o->callback((Fl_Callback*)cb_Edit);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(10, 85, 330, 380, gettext("Size And Position"));
          o->hide();
          { Fl_Menu_Button* o = new Fl_Menu_Button(20, 110, 125, 25, gettext("Panel Position"));
            o->box(FL_GTK_UP_BOX);
            o->selection_color((Fl_Color)80);
            if (!menu_Panel_i18n_done) {
              int i=0;
              for ( ; i<4; i++)
                if (menu_Panel[i].label())
                  menu_Panel[i].label(gettext(menu_Panel[i].label()));
              menu_Panel_i18n_done = 1;
            }
            o->menu(menu_Panel);
          } // Fl_Menu_Button* o
          { choose_autohide = new Fl_Menu_Button(170, 110, 150, 25, gettext("Autohide Position"));
            choose_autohide->box(FL_GTK_UP_BOX);
            choose_autohide->selection_color((Fl_Color)80);
            if (!menu_choose_autohide_i18n_done) {
              int i=0;
              for ( ; i<5; i++)
                if (menu_choose_autohide[i].label())
                  menu_choose_autohide[i].label(gettext(menu_choose_autohide[i].label()));
              menu_choose_autohide_i18n_done = 1;
            }
            choose_autohide->menu(menu_choose_autohide);
            autohide();
          } // Fl_Menu_Button* choose_autohide
          { autohide_check = new Fl_Check_Button(195, 140, 95, 25, gettext("Autohide?"));
            autohide_check->tooltip(gettext("This will make the Panel hide when you aren\'t using it."));
            autohide_check->down_box(FL_GTK_DOWN_BOX);
            autohide_check->selection_color((Fl_Color)59);
            autohide_check->callback((Fl_Callback*)cb_autohide_check);
            autohide_check->when(FL_WHEN_CHANGED);
            autohide_check->hide();
          } // Fl_Check_Button* autohide_check
          { Fl_Slider* o = w_slider = new Fl_Slider(20, 190, 200, 25, gettext("Width of Panel  "));
            w_slider->tooltip(gettext("0 is Full Length"));
            w_slider->type(1);
            w_slider->box(FL_GTK_DOWN_BOX);
            w_slider->color((Fl_Color)42);
            w_slider->selection_color((Fl_Color)29);
            w_slider->maximum(3000);
            w_slider->step(1);
            w_slider->value(32);
            w_slider->callback((Fl_Callback*)cb_w_slider);
            w_slider->align(Fl_Align(FL_ALIGN_TOP));
            w_slider->when(FL_WHEN_RELEASE);
            flPanel panel;
            int h = panel.getWidth();
            o->value(h);
          } // Fl_Slider* w_slider
          { Fl_Value_Input* o = width_input = new Fl_Value_Input(230, 190, 55, 25, gettext("pixels"));
            width_input->box(FL_GTK_DOWN_BOX);
            width_input->labelsize(10);
            width_input->maximum(3000);
            width_input->callback((Fl_Callback*)cb_width_input);
            width_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = w_slider->value();
            o->value(v);
          } // Fl_Value_Input* width_input
          { Fl_Slider* o = h_slider = new Fl_Slider(20, 260, 200, 25, gettext("Height of Panel  "));
            h_slider->tooltip(gettext("0 bases the height on the items"));
            h_slider->type(1);
            h_slider->box(FL_GTK_DOWN_BOX);
            h_slider->color((Fl_Color)42);
            h_slider->selection_color((Fl_Color)29);
            h_slider->maximum(3000);
            h_slider->step(1);
            h_slider->value(32);
            h_slider->callback((Fl_Callback*)cb_h_slider);
            h_slider->align(Fl_Align(FL_ALIGN_TOP));
            h_slider->when(FL_WHEN_RELEASE);
            flPanel panel;
            int h = panel.getHeight();
            o->value(h);
          } // Fl_Slider* h_slider
          { Fl_Value_Input* o = height_input = new Fl_Value_Input(230, 260, 55, 25, gettext("pixels"));
            height_input->box(FL_GTK_DOWN_BOX);
            height_input->labelsize(10);
            height_input->maximum(3000);
            height_input->callback((Fl_Callback*)cb_height_input);
            height_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = h_slider->value();
            o->value(v);
          } // Fl_Value_Input* height_input
          { Fl_Box* o = new Fl_Box(85, 295, 185, 30, gettext("Advanced Options"));
            o->labelfont(1);
            o->labelsize(18);
          } // Fl_Box* o
          { Fl_Value_Input* o = new Fl_Value_Input(230, 330, 25, 25, gettext("X position of panel"));
            o->box(FL_GTK_DOWN_BOX);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_X);
            coordinate("x",o,1);
          } // Fl_Value_Input* o
          { Fl_Value_Input* o = new Fl_Value_Input(230, 375, 25, 25, gettext("Y position of panel"));
            o->box(FL_GTK_DOWN_BOX);
            o->minimum(-100);
            o->maximum(2000);
            o->callback((Fl_Callback*)cb_Y);
            coordinate("y",o,1);
          } // Fl_Value_Input* o
          { Fl_Slider* o = border_slider = new Fl_Slider(75, 435, 90, 25, gettext("Width of Panel Border"));
            border_slider->type(1);
            border_slider->box(FL_GTK_DOWN_BOX);
            border_slider->color((Fl_Color)42);
            border_slider->selection_color((Fl_Color)29);
            border_slider->maximum(32);
            border_slider->step(1);
            border_slider->callback((Fl_Callback*)cb_border_slider);
            border_slider->align(Fl_Align(FL_ALIGN_TOP));
            border_slider->when(FL_WHEN_RELEASE);
            flPanel panel;
            int border =panel.getBorder();
            o->value(border);
          } // Fl_Slider* border_slider
          { Fl_Value_Input* o = border_input = new Fl_Value_Input(230, 435, 40, 25, gettext("pixels"));
            border_input->box(FL_GTK_DOWN_BOX);
            border_input->labelsize(10);
            border_input->maximum(3000);
            border_input->callback((Fl_Callback*)cb_border_input);
            border_input->align(Fl_Align(FL_ALIGN_RIGHT));
            int v = border_slider->value();
            o->value(v);
          } // Fl_Value_Input* border_input
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(209, 490, 57, 25, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { save_button = new Fl_Button(275, 490, 45, 25, gettext("OK"));
        save_button->tooltip(gettext("Write to configuration file"));
        save_button->box(FL_GTK_UP_BOX);
        save_button->color((Fl_Color)61);
        save_button->selection_color((Fl_Color)59);
        save_button->labelcolor((Fl_Color)55);
        save_button->callback((Fl_Callback*)cb_save_button);
      } // Fl_Button* save_button
      o->end();
    } // Fl_Scroll* o
    //o->icon("/usr/share/icons/jsm-panel.png");
    Config config; config.under_mouse(o);
    panel_window->xclass("jsm-panel");
    panel_window->end();
    panel_window->resizable(panel_window);
  } // Fl_Double_Window* panel_window
  return panel_window;
}

Fl_Double_Window* PanelUI::add_indicator() {
  { Fl_Double_Window* o = indicator_win = new Fl_Double_Window(230, 185, gettext("Add Indicator"));
    indicator_win->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(65, 15, 90, 30, gettext("Battery"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Battery);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(65, 55, 90, 30, gettext("Volume"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Volume);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(65, 95, 90, 30, gettext("Network"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Network);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(165, 145, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    Config config; config.under_mouse(o);
    indicator_win->end();
  } // Fl_Double_Window* indicator_win
  return indicator_win;
}

Fl_Double_Window* PanelUI::add_to_panel() {
  { Fl_Double_Window* o = add_2_panel = new Fl_Double_Window(190, 290, gettext("Add to Panel"));
    add_2_panel->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(130, 250, 45, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)62);
      o->selection_color(FL_DARK_GREEN);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Button* o
    { Fl_Browser* o = panel_items_browser = new Fl_Browser(20, 25, 160, 215);
      panel_items_browser->type(2);
      panel_items_browser->box(FL_GTK_DOWN_BOX);
      panel_items_browser->selection_color(FL_DARK_RED);
      new_panel_items(o);
    } // Fl_Browser* panel_items_browser
    { Fl_Button* o = new Fl_Button(20, 250, 35, 25, gettext("@+"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_1);
    } // Fl_Button* o
    Config config; config.under_mouse(o);
    add_2_panel->xclass("jsm-panel");
    add_2_panel->end();
  } // Fl_Double_Window* add_2_panel
  return add_2_panel;
}

Fl_Double_Window* PanelUI::clock_window() {
  { Fl_Double_Window* o = clock_config_window = new Fl_Double_Window(480, 580, gettext("Configure Clock"));
    clock_config_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(375, 535, 75, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK2);
      Fl_Group::current()->resizable(o);
    } // Fl_Button* o
    { clock_style = new Fl_Input(70, 535, 290, 30, gettext("style"));
      clock_style->box(FL_GTK_DOWN_BOX);
      clock_style->selection_color(FL_DARK_RED);
      clock_style->callback((Fl_Callback*)cb_clock_style);
      clock_style->when(3);
    } // Fl_Input* clock_style
    { Fl_Browser* o = new Fl_Browser(15, 5, 455, 450);
      o->type(2);
      o->box(FL_GTK_DOWN_BOX);
      o->selection_color(FL_DARK_RED);
      o->callback((Fl_Callback*)cb_2);
      Apps apps;apps.populateClocks(o);
    } // Fl_Browser* o
    { clock_display = new Fl_Output(35, 500, 385, 25);
      clock_display->box(FL_NO_BOX);
      clock_display->labelfont(1);
      clock_display->labelsize(18);
      clock_display->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* clock_display
    Config config; config.under_mouse(o);
    clock_config_window->xclass("jsm-panel");
    clock_config_window->end();
  } // Fl_Double_Window* clock_config_window
  return clock_config_window;
}

Fl_Double_Window* PanelUI::config_applist_window() {
  { Fl_Double_Window* o = conf_applist_window = new Fl_Double_Window(340, 105, gettext("Configure Running App List"));
    conf_applist_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(235, 35, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK3);
    } // Fl_Button* o
    { Fl_Button* o = task_bg_color = new Fl_Button(140, 55, 60, 25);
      task_bg_color->box(FL_GTK_UP_BOX);
      task_bg_color->callback((Fl_Callback*)cb_task_bg_color);
      flPanel panel;unsigned int c;
      unsigned int color = panel.getBackground(c,"TaskListStyle");
      o->color(color);
    } // Fl_Button* task_bg_color
    { Fl_Button* o = task_fg_color = new Fl_Button(140, 20, 60, 25);
      task_fg_color->box(FL_GTK_UP_BOX);
      task_fg_color->callback((Fl_Callback*)cb_task_fg_color);
      flPanel panel;unsigned int c;
      unsigned int color = panel.getActiveBackground(c,"TaskListStyle");
      o->color(color);
    } // Fl_Button* task_fg_color
    { new Fl_Box(30, 55, 95, 25, gettext("Open Apps"));
    } // Fl_Box* o
    { new Fl_Box(30, 20, 95, 25, gettext("Current App"));
    } // Fl_Box* o
    Config config; config.under_mouse(o);
    conf_applist_window->xclass("jsm-panel");
    conf_applist_window->end();
  } // Fl_Double_Window* conf_applist_window
  return conf_applist_window;
}

Fl_Double_Window* PanelUI::config_clock_window() {
  { Fl_Double_Window* o = conf_clock_window = new Fl_Double_Window(355, 130, gettext("Configure Clock"));
    conf_clock_window->user_data((void*)(this));
    { clock_menu = new Fl_Menu_Button(15, 20, 130, 25, gettext("Clock Format"));
      clock_menu->box(FL_GTK_UP_BOX);
      clock_menu->selection_color(FL_DARK_RED);
      if (!menu_clock_menu_i18n_done) {
        int i=0;
        for ( ; i<5; i++)
          if (menu_clock_menu[i].label())
            menu_clock_menu[i].label(gettext(menu_clock_menu[i].label()));
        menu_clock_menu_i18n_done = 1;
      }
      clock_menu->menu(menu_clock_menu);
    } // Fl_Menu_Button* clock_menu
    { Fl_Button* o = new Fl_Button(285, 90, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK4);
    } // Fl_Button* o
    { Fl_Output* o = clock_displayer = new Fl_Output(150, 38, 160, 30);
      clock_displayer->box(FL_NO_BOX);
      clock_displayer->align(Fl_Align(FL_ALIGN_TOP));
      Apps app;
      std::string clock_text = app.getClock();
      o->copy_label(clock_text.c_str());
      o->redraw_label();
    } // Fl_Output* clock_displayer
    { Fl_Input* o = new Fl_Input(155, 60, 185, 25, gettext("Program to Launch"));
      o->tooltip(gettext("Usually used for a calendar or analog clock"));
      o->box(FL_GTK_DOWN_BOX);
      o->selection_color(FL_DARK_RED);
      o->deactivate();
      o->value("xclock");
    } // Fl_Input* o
    Config config; config.under_mouse(o);
    conf_clock_window->xclass("jsm-panel");
    conf_clock_window->end();
  } // Fl_Double_Window* conf_clock_window
  return conf_clock_window;
}

Fl_Double_Window* PanelUI::config_indicator_window() {
  { Fl_Double_Window* o = conf_indicator_window = new Fl_Double_Window(285, 260, gettext("Configure Indicators"));
    conf_indicator_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(210, 215, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK5);
    } // Fl_Button* o
    { Fl_Browser* o = indicator_browser = new Fl_Browser(20, 10, 250, 170);
      indicator_browser->type(2);
      indicator_browser->box(FL_GTK_DOWN_BOX);
      indicator_browser->selection_color((Fl_Color)80);
      Apps app;
      app.getIndicators(o);
    } // Fl_Browser* indicator_browser
    { Fl_Button* o = new Fl_Button(90, 195, 35, 25, gettext("-"));
      o->box(FL_GTK_UP_BOX);
      o->labelfont(1);
      o->labelsize(34);
      o->callback((Fl_Callback*)cb_3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(45, 195, 35, 25, gettext("@+"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_4);
    } // Fl_Button* o
    Config config; config.under_mouse(o);
    conf_indicator_window->xclass("jsm-panel");
    conf_indicator_window->end();
  } // Fl_Double_Window* conf_indicator_window
  return conf_indicator_window;
}

Fl_Double_Window* PanelUI::configure_manually_window(std::string item) {
  { Fl_Double_Window* o = conf_manual_window = new Fl_Double_Window(360, 165, gettext("Manual Editing"));
    conf_manual_window->user_data((void*)(this));
    { Fl_Input* o = manually_in = new Fl_Input(10, 10, 340, 30);
      manually_in->box(FL_GTK_DOWN_BOX);
      o->value(item.c_str());
    } // Fl_Input* manually_in
    { Fl_Button* o = new Fl_Button(300, 135, 50, 25, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK6);
    } // Fl_Button* o
    { tooltip_label = new Fl_Input(105, 50, 245, 30, gettext("Tooltip Label"));
      tooltip_label->box(FL_GTK_DOWN_BOX);
      tooltip_label->selection_color((Fl_Color)80);
    } // Fl_Input* tooltip_label
    { Fl_Button* o = new Fl_Button(10, 100, 65, 25, gettext("Icon"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Icon);
    } // Fl_Button* o
    { icon_file = new Fl_Input(95, 95, 255, 30);
      icon_file->box(FL_GTK_DOWN_BOX);
      icon_file->selection_color((Fl_Color)80);
    } // Fl_Input* icon_file
    { Fl_Input* o = hid_in = new Fl_Input(10, 10, 340, 30);
      hid_in->box(FL_GTK_DOWN_BOX);
      hid_in->hide();
      o->value(item.c_str());
    } // Fl_Input* hid_in
    Config config; config.under_mouse(o);
    conf_manual_window->xclass("jsm-panel");
    conf_manual_window->end();
  } // Fl_Double_Window* conf_manual_window
  return conf_manual_window;
}

Fl_Double_Window* PanelUI::config_menu_window() {
  { Fl_Double_Window* o = conf_menu_window = new Fl_Double_Window(285, 180, gettext("Configure Menu"));
    conf_menu_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(205, 140, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK7);
    } // Fl_Button* o
    { Fl_Input* o = app_menu = new Fl_Input(110, 15, 130, 25, gettext("Menu Label"));
      app_menu->box(FL_GTK_DOWN_BOX);
      app_menu->color((Fl_Color)53);
      app_menu->selection_color(FL_DARK_RED);
      app_menu->callback((Fl_Callback*)cb_app_menu);
      app_menu->when(FL_WHEN_CHANGED);
      flPanel panel;
      std::string l= panel.getLabelMenu(5);
      o->value(l.c_str());
    } // Fl_Input* app_menu
    { icon_view = new Fl_Button(135, 45, 50, 50);
      icon_view->box(FL_GTK_DOWN_BOX);
      icon_view->callback((Fl_Callback*)cb_icon_view);
      icon_view->align(Fl_Align(FL_ALIGN_WRAP));
      flPanel panel;
      std::string icon =panel.getImageMenu(5);
      display(icon.c_str());
    } // Fl_Button* icon_view
    { Fl_Menu_Button* o = new Fl_Menu_Button(40, 125, 105, 30, gettext("Menu Type"));
      o->box(FL_GTK_UP_BOX);
      o->selection_color((Fl_Color)80);
      o->deactivate();
      if (!menu_Menu_i18n_done) {
        int i=0;
        for ( ; i<2; i++)
          if (menu_Menu[i].label())
            menu_Menu[i].label(gettext(menu_Menu[i].label()));
        menu_Menu_i18n_done = 1;
      }
      o->menu(menu_Menu);
    } // Fl_Menu_Button* o
    { new Fl_Box(45, 60, 70, 25, gettext("Icon"));
    } // Fl_Box* o
    Config config; config.under_mouse(o);
    conf_menu_window->xclass("jsm-panel");
    conf_menu_window->end();
  } // Fl_Double_Window* conf_menu_window
  return conf_menu_window;
}

Fl_Double_Window* PanelUI::config_shutdown_window() {
  { Fl_Double_Window* o = conf_shut_window = new Fl_Double_Window(285, 120, gettext("Configure Shutdown"));
    conf_shut_window->user_data((void*)(this));
    { shutdown_icon = new Fl_Button(15, 25, 125, 30, gettext("Shutdown Icon"));
      shutdown_icon->box(FL_GTK_UP_BOX);
      shutdown_icon->callback((Fl_Callback*)cb_shutdown_icon);
    } // Fl_Button* shutdown_icon
    { Fl_Button* o = new Fl_Button(210, 75, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK8);
    } // Fl_Button* o
    Config config; config.under_mouse(o);
    conf_shut_window->xclass("jsm-panel");
    conf_shut_window->end();
  } // Fl_Double_Window* conf_shut_window
  return conf_shut_window;
}

Fl_Double_Window* PanelUI::config_swallow_window() {
  { Fl_Double_Window* o = conf_swallow_window = new Fl_Double_Window(465, 80, gettext("Configure Swallowed Application"));
    conf_swallow_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(370, 40, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OK9);
    } // Fl_Button* o
    { Fl_Input* o = swallow_name = new Fl_Input(85, 40, 260, 25, gettext("App Name"));
      swallow_name->tooltip(gettext("This MUST be the same as the executable\'s name"));
      swallow_name->box(FL_GTK_DOWN_BOX);
      swallow_name->color((Fl_Color)53);
      swallow_name->selection_color(FL_DARK_RED);
      swallow_name->callback((Fl_Callback*)cb_swallow_name);
      swallow_name->when(FL_WHEN_CHANGED);
      flPanel panel;
      const char* name = panel.getSubElementAttribute("Swallow","name");
      o->value(name);
    } // Fl_Input* swallow_name
    { Fl_Input* o = swallow_config = new Fl_Input(85, 10, 370, 25, gettext("Configure"));
      swallow_config->box(FL_GTK_DOWN_BOX);
      swallow_config->color((Fl_Color)53);
      swallow_config->selection_color(FL_DARK_RED);
      swallow_config->callback((Fl_Callback*)cb_swallow_config);
      swallow_config->when(FL_WHEN_CHANGED);
      flPanel panel;
      std::string name = panel.getSubElementText("Swallow");
      o->value(name.c_str());
    } // Fl_Input* swallow_config
    Config config; config.under_mouse(o);
    conf_swallow_window->xclass("jsm-panel");
    conf_swallow_window->end();
  } // Fl_Double_Window* conf_swallow_window
  return conf_swallow_window;
}

Fl_Double_Window* PanelUI::config_switcher_window() {
  { Fl_Double_Window* o = conf_switcher = new Fl_Double_Window(265, 250, gettext("Configure Switcher"));
    conf_switcher->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(190, 205, 60, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_OKa);
    } // Fl_Button* o
    { new Fl_Box(15, 10, 140, 30, gettext("Active Foreground"));
    } // Fl_Box* o
    { new Fl_Box(15, 45, 140, 30, gettext("Active Background"));
    } // Fl_Box* o
    { new Fl_Box(35, 80, 90, 30, gettext("Foreground"));
    } // Fl_Box* o
    { new Fl_Box(35, 115, 90, 30, gettext("Background"));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(160, 5, 75, 30);
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_5);
      o->deactivate();
      flPanel panel;unsigned int c;
      unsigned int color = panel.getFontColor(c,"PagerStyle");
      o->color(color);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 43, 75, 30);
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_6);
      flPanel panel;unsigned int c;
      unsigned int color = panel.getActiveBackground(c,"PagerStyle");
      o->color(color);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 80, 75, 30);
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_7);
      flPanel panel;unsigned int c;
      unsigned int color = panel.getFontColor(c,"PagerStyle");
      o->color(color);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(160, 115, 75, 30);
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_8);
      flPanel panel;unsigned int c;
      unsigned int color = panel.getBackground(c,"PagerStyle");
      o->color(color);
    } // Fl_Button* o
    { Fl_Value_Input* o = num_desktop_w = new Fl_Value_Input(20, 150, 20, 25, gettext("Number of Desktops Wide"));
      num_desktop_w->box(FL_GTK_DOWN_BOX);
      num_desktop_w->color((Fl_Color)53);
      num_desktop_w->callback((Fl_Callback*)cb_num_desktop_w);
      num_desktop_w->align(Fl_Align(FL_ALIGN_RIGHT));
      Config config;
      int width = config.getIntAttribute("Desktops","width");
      o->value(width);
    } // Fl_Value_Input* num_desktop_w
    { Fl_Value_Input* o = num_desktop_h = new Fl_Value_Input(20, 175, 20, 25, gettext("Number of Desktops High "));
      num_desktop_h->box(FL_GTK_DOWN_BOX);
      num_desktop_h->color((Fl_Color)53);
      num_desktop_h->callback((Fl_Callback*)cb_num_desktop_h);
      num_desktop_h->align(Fl_Align(FL_ALIGN_RIGHT));
      Config config;
      int height = config.getIntAttribute("Desktops","height");
      o->value(height);
    } // Fl_Value_Input* num_desktop_h
    Config config; config.under_mouse(o);
    conf_switcher->xclass("jsm-panel");
    conf_switcher->end();
  } // Fl_Double_Window* conf_switcher
  return conf_switcher;
}

Fl_Double_Window* PanelUI::make_shortcut_window() {
  { Fl_Double_Window* o = shortcut_window = new Fl_Double_Window(335, 365, gettext("Choose an application to add"));
    shortcut_window->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(10, 20, 105, 25, gettext("Application"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Application);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(10, 100, 65, 25, gettext("Icon"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_Icon1);
    } // Fl_Button* o
    { app_command = new Fl_Input(120, 20, 185, 25);
      app_command->tooltip(gettext("You can add arguments here"));
      app_command->box(FL_GTK_DOWN_BOX);
      app_command->selection_color((Fl_Color)80);
      app_command->callback((Fl_Callback*)cb_app_command);
      app_command->align(Fl_Align(FL_ALIGN_RIGHT));
      app_command->when(FL_WHEN_ENTER_KEY);
    } // Fl_Input* app_command
    { app_icon_box = new Fl_Box(160, 87, 48, 48);
      app_icon_box->box(FL_GTK_DOWN_BOX);
      app_icon_box->color((Fl_Color)42);
      app_icon_box->align(Fl_Align(288));
    } // Fl_Box* app_icon_box
    { tooltip = new Fl_Input(120, 60, 185, 25, gettext("Tooltip Label"));
      tooltip->box(FL_GTK_DOWN_BOX);
      tooltip->selection_color((Fl_Color)80);
    } // Fl_Input* tooltip
    { Fl_Button* o = new Fl_Button(20, 320, 30, 30, gettext("@+"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_9);
    } // Fl_Button* o
    { ok_button = new Fl_Button(250, 320, 50, 30, gettext("SAVE"));
      ok_button->tooltip(gettext("Write to configuration file"));
      ok_button->box(FL_GTK_UP_BOX);
      ok_button->color((Fl_Color)61);
      ok_button->selection_color((Fl_Color)59);
      ok_button->labelcolor((Fl_Color)55);
      ok_button->callback((Fl_Callback*)cb_ok_button);
    } // Fl_Button* ok_button
    { shortcut_border = new Fl_Check_Button(10, 355, 265, 25, gettext("Show a Border around the Button?"));
      shortcut_border->tooltip(gettext("The button you are adding can be borderless, if you like"));
      shortcut_border->down_box(FL_GTK_DOWN_BOX);
      shortcut_border->selection_color(FL_DARK_GREEN);
      shortcut_border->hide();
      shortcut_border->deactivate();
    } // Fl_Check_Button* shortcut_border
    { Fl_Browser* o = shortcut_browser = new Fl_Browser(10, 140, 295, 175);
      shortcut_browser->type(2);
      shortcut_browser->box(FL_GTK_DOWN_BOX);
      shortcut_browser->when(FL_WHEN_NEVER);
      Apps apps;apps.loadTemp();
      apps.getShortcuts(o);o->redraw();
    } // Fl_Browser* shortcut_browser
    { Fl_Button* o = new Fl_Button(55, 320, 30, 30, gettext("-"));
      o->tooltip(gettext("Remove application launcher"));
      o->box(FL_GTK_UP_BOX);
      o->labelfont(1);
      o->labelsize(45);
      o->callback((Fl_Callback*)cb_a);
    } // Fl_Button* o
    { icon_name = new Fl_Box(85, 100, 220, 25, gettext("Icon File Name"));
      icon_name->box(FL_GTK_DOWN_BOX);
      icon_name->hide();
    } // Fl_Box* icon_name
    Config config; config.under_mouse(o);
    shortcut_window->xclass("jsm-panel");
    shortcut_window->end();
    shortcut_window->resizable(shortcut_window);
  } // Fl_Double_Window* shortcut_window
  return shortcut_window;
}

Fl_Double_Window* PanelUI::new_panel_window() {
  { Fl_Double_Window* o = new_panel = new Fl_Double_Window(290, 115, gettext("Add a Panel"));
    new_panel->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(25, 25, 240, 50, gettext("Only Four Panels are supported Currently"));
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(85, 80, 105, 30, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->callback((Fl_Callback*)cb_OKb);
    } // Fl_Button* o
    Config config; config.under_mouse(o);
    new_panel->xclass("jsm-panel");
    new_panel->end();
  } // Fl_Double_Window* new_panel
  return new_panel;
}

Fl_Double_Window* PanelUI::no_config() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(265, 65, gettext("Nothing to Configure"));
    w = o;
    o->user_data((void*)(this));
    { new Fl_Box(25, 25, 175, 25, gettext("Nothing to Configure"));
    } // Fl_Box* o
    Config config; config.under_mouse(o);
    o->xclass("jsm-panel");
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void PanelUI::add_new_shortcut() {
  Apps apps;apps.loadTemp();
  std::string icon = icon_name->label();
  std::string execLine = "exec:";
  execLine += app_command->value();
  if ((icon.compare("")!=0)&&(execLine.compare("exec:")!=0)){
    const char* program = execLine.c_str();
    const char* popup = tooltip->value();
    int border = shortcut_border->value();
    apps.addShortcut(icon.c_str(),program,popup, border);
    shortcut_browser->clear();
    //shortcut_browser->add(program);
    apps.getShortcuts(shortcut_browser);
    shortcut_browser->redraw();
  }
}

void PanelUI::add_item() {
  unsigned int line = panel_items_browser->value();
  Apps app;
  switch (line){
    case 1:
      //Application Menu
      app.addAppMenu();
      break;
    case 2:
      //Places Menu
      app.addPlaces();
      break;
    case 3:
      //Shutdown Menu
      app.addShutdown();
      break;
    case 4:
      //Clock
      app.addClock();
      config_clock_window()->show();
      break;
    case 5:
      //Desktop Switcher
      app.addPager();
      config_switcher_window()->show();
      break;
    case 6:
      //Indicators
      config_indicator_window()->show();
      add_indicator()->show();
      break;
    case 7:
      //Running App List
      app.addTaskList();
      config_applist_window()->show();
      break;
    case 8:
      //Launcher
      make_shortcut_window()->show();
      break;
    case 9:
      //Swallow
      //app.
      std::cout<<"swallow"<<std::endl;
      break;
  }
  app.populate(app_browser);
}

void PanelUI::autohide() {
  flPanel panel;
  std::string a = panel.getAutohide();
  if(!panel.newStyle()){
    autohide_check->show();
    choose_autohide->hide();
    if(a=="true"){autohide_check->value(1);}
    else{autohide_check->value(0);}
  }
}

void PanelUI::autohide_position(const char* where) {
  flPanel panel;
  panel.panelAutohide(where);
}

void PanelUI::cancel_button() {
  flPanel panel;
  panel.cancel();
  panel_window->hide();
  UI ux;ux.showSettings();
}

void PanelUI::change_menu(int whichStyle) {
  const char* menuName = app_menu->value();
  flPanel panel; panel.switchMenu(whichStyle, menuName);
}

void PanelUI::change_manual_item(std::string input, std::string old_input) {
  std::string tooltip = tooltip_label->value();
  std::string icon = icon_file->value();
  std::string OLD = old_input;
  std::string NEW = input;
  flPanel panel;
  panel.switchButton(OLD,NEW,tooltip,icon);
}

void PanelUI::clear_shortcuts() {
  app_command->value("");
  app_command->redraw();
  tooltip->value("");
  tooltip->redraw();
  icon_name->copy_label("");
  icon_name->redraw();
}

void PanelUI::coordinate(const char* xy, Fl_Value_Input *o, int get1_set2) {
  flPanel panel;
  if(get1_set2 == 1){
    int x = panel.getCoordinate(xy);
    o->value(x);
  }
  else if (get1_set2 == 2){
    int value=o->value();
    panel.setCoordinate(xy,value);
  }
  else{
  std::cerr<<"coordinate() function called incorrectly"<<std::endl;
  }
}

void PanelUI::config_Item(std::string whichItem) {
  if(whichItem.compare("App Menu")==0){
    config_menu_window()->show();
  }
  else if(whichItem.compare("Places Menu")==0){
        no_config()->show();
  }
  else if(whichItem.compare("Shutdown Menu")==0){
    config_shutdown_window()->show();
  }
  else if(whichItem.compare("Desktop Switcher")==0){
    config_switcher_window()->show();
  }
  else if(whichItem.compare("Running App List")==0){
    config_applist_window()->show();
  }
  else if(whichItem.compare("Indicators")==0){
    config_indicator_window()->show();
  }
  else if(whichItem.compare("Clock")==0){
      config_clock_window()->show();
  }
  else if(whichItem.compare("")==0){
    no_config()->show();
  }
  else{
    unsigned found = whichItem.find_first_of(":");
    std::string passinto = whichItem;
    if(found<=whichItem.length()){
      std::string thisItem = whichItem.erase(0,found+1);
      if(thisItem.compare("Swallowed App")==0){
          config_swallow_window()->show();
      }
      else{
        
        configure_manually_window(passinto)->show();
      }
    }
  }
}

void PanelUI::display(const char* filename) {
  std::string extention, filenameStr;
  filenameStr = filename;
  if (filenameStr.length() == 0)return;
  extention = filenameStr.substr((strlen(filename)-4),4);
  //std::cout<<extention<<"\n";
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  Fl_Image* image;
  std::string png =".png";
  std::string xpm =".xpm";
  std::string svg =".svg";
  if (extention.compare(png) ==0){
  	image = new Fl_PNG_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	icon_view->image(image2);
  	icon_view->redraw();
  }
  else if(extention.compare(xpm) ==0){
  	image = new Fl_XPM_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	icon_view->image(image2);
  	icon_view->redraw();
  }
  else if(extention.compare(svg) ==0){
  return;
  }
  else {
  	icon_view->label("FLTK cannot display");
  }
}

void PanelUI::displayAPPicon(const char* filename) {
  std::string extention, filenameStr;
  filenameStr = filename;
  extention = filenameStr.substr((strlen(filename)-4),4);
  std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  Fl_Image* image;
  std::string png =".png";
  std::string xpm =".xpm";
  if (extention.compare(png) ==0){
  	image = new Fl_PNG_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	app_icon_box->image(image2);
  	app_icon_box->redraw();
  	icon_name->hide();
  }
  else if(extention.compare(xpm) ==0){
  	image = new Fl_XPM_Image(filename);
  	Fl_Image * image2 = image->copy(48,48);
  	app_icon_box->image(image2);
  	app_icon_box->redraw();
  	icon_name->hide();
  }
  else{
  	icon_name->copy_label(filename);
  	app_icon_box->hide();
  	icon_name->show();
  	std::cout<<"Other image formats are not supported for preview"<<std::endl;
  }
}

void PanelUI::hide_menu(Fl_Menu_Item * o, int whichOne) {
  flPanel panel;
  int num = panel.numPanels();
  if (whichOne > num) o->hide();
  else o->show();
}

void PanelUI::icon_for_desktop() {
  Apps apps;apps.loadTemp();
  const char * f = "/usr/share/applications";
  const char * m="Choose a program";
  const char *p="*";
  int r = 0;
  const char *result = fl_file_chooser(m,p,f,r);
  if(result==NULL){return;}
  std::string icon2 = result;
  std::string executable = result;
  std::string iconName = result;
  std::string icon = result;
  std::string test = result;
  if(test.compare("")!=0){
    unsigned period = icon.find_last_of(".");
    bool isDESKTOP = false;
    if(period<icon.length()){
      std::string testDesktop = icon.substr(period+1,std::string::npos);
      //std::cerr<<testDesktop<<std::endl;
      if(testDesktop.compare("desktop")==0){isDESKTOP = true;}
    }
    unsigned found = icon.find_last_of("//");
    if(found<icon.length()){icon=icon.erase(0,found+1);}
    unsigned found2 = icon.find_last_of(".");
    if(found2<icon.length()){icon=icon.erase(found2,std::string::npos);}
    result = icon.c_str();	
    if(isDESKTOP){
      std::string desktop = apps.desktopExec(executable);
      std::string name = apps.desktopName(iconName);
      app_command->value(desktop.c_str());
      
      //get the icon name from the desktop file
      std::string deskIcon = apps.desktopIcon(icon2);
      //icon_name is the name we will save into the panel
      icon_name->copy_label(deskIcon.c_str());
      displayAPPicon(deskIcon.c_str());
      tooltip->value(name.c_str());
    }
    else{
      std::string iconLABEL = result;
      std::string EXT = apps.getExtention();
      iconLABEL += EXT;
      icon_name->copy_label(iconLABEL.c_str());
      app_command->value(result);
      tooltip->value(result);
    }
    app_command->redraw();
    add_new_shortcut();
  }
}

void PanelUI::Menu_CB(int num) {
  flPanel panel;
  panel.changePanel(num);
  //panel.loadTemp();
  panel.saveChanges();
  //int n = panel.currentPanel();
  //std::string l = panel.convert(n);
  //std::string LABEL = "Panel ";LABEL +=l;
  //panel_chooser->copy_label(LABEL.c_str());
  panel_window->hide();
  //panel_window->show();
  UI ux;
  ux.showPanel();
}

void PanelUI::move_up() {
  unsigned int appLine=app_browser->value();
  unsigned int size =app_browser->size();
  if(appLine <= size && appLine !=0){
    std::string whichAPP = app_browser->text(appLine);
    if(whichAPP.compare("")!=0){
      flPanel panel;
      panel.moveUp(whichAPP);
      Apps app;
      app.populate(app_browser);
    }
  }
}

void PanelUI::move_down() {
  unsigned int appLine=app_browser->value();
  unsigned int size =app_browser->size();
  if(appLine <= size && appLine !=0){
    std::string whichAPP = app_browser->text(appLine);
    if(whichAPP.compare("")!=0){
      flPanel panel;
      panel.moveDown(whichAPP);
      //Apps app;
      //app.populate(app_browser);
      //app_browser->redraw();
    }
  }
}

void PanelUI::new_panel_items(Fl_Browser *o) {
  o->add("Application Menu");
  o->add("Places Menu");
  o->add("Shutdown Menu");
  o->add("Clock");
  o->add("Desktop Switcher");
  o->add("Indicators");
  o->add("Running App List");
  o->add("Launcher");
  o->add("Swallow");
}

void PanelUI::num_desktop_wh_cb(const char* whichone, int value) {
  Config config;
  config.setAttribute("Desktops",whichone,value);
  int w = int((num_desktop_w->value()));
  int h = int((num_desktop_h->value()));
  int defaultValue = 1;
  if(w==0){config.setAttribute("Desktops","width",defaultValue);}
  if(h==0){config.setAttribute("Desktops","height",defaultValue);}
}

void PanelUI::one_color_Font(Fl_Widget *o, const char* whichElement) {
  flPanel panel;panel.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	panel.setFontColor(colors, whichElement);
  	unsigned int unusedColor;
  	unsigned int colorSet = panel.getFontColor(unusedColor, whichElement);
  	panel.saveChangesTemp();
  	o->color(colorSet);
  	o->redraw();
  }
}

void PanelUI::ok() {
  flPanel panel;
  panel.saveJWMRC();
  panel_window->hide();
  UI ux;ux.showSettings();
}

void PanelUI::one_color(Fl_Widget *o, const char* whichElement) {
  flPanel panel;
  //loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	panel.setBackground(colors, whichElement);
  	unsigned int unusedColor;
  	unsigned int colorSet = panel.getBackground(unusedColor, whichElement);
  	o->color(colorSet);
  	o->redraw();
  	panel.saveChangesTemp();
  }
}

void PanelUI::one_color_active(Fl_Widget *o, const char* whichElement) {
  flPanel panel;panel.loadTemp();
  uchar r;
  uchar g;
  uchar b;
  Fl::get_color((o->color()),r,g,b);
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	panel.setActiveBackground(colors, whichElement);
  	unsigned int unusedColor;
  	unsigned int colorSet = panel.getActiveBackground(unusedColor, whichElement);
  	panel.saveChangesTemp();
  	o->color(colorSet);
  	o->redraw();
  }
}

void PanelUI::opacity(Fl_Value_Input *o, Fl_Slider *slider, const char* whichElement) {
  flPanel panel;
  float opacity=slider->value();
  panel.setOpacity(opacity,whichElement);
  o->value(opacity*100);
}

void PanelUI::panel_label(Fl_Menu_Button *o) {
  flPanel panel;
  int num = 1;
  std::string x = panel.convert(num);
  std::string l = "Panel ";
  l+=x;
  o->copy_label(l.c_str());
  o->redraw();
}

void PanelUI::panel_position(const char* position) {
  flPanel fl_panel;
  std::string stringPosition = position;
  if((stringPosition.compare("top")==0)||(stringPosition.compare("bottom")==0)){
    fl_panel.panelPositionHoriz("fixed");
    fl_panel.panelLayout("horizontal");
    fl_panel.panelPositionVert(position);
  }
  else{
    fl_panel.panelLayout("vertical");
    fl_panel.panelPositionVert("center");
    fl_panel.panelPositionHoriz(position);
  }
}

void PanelUI::remove_app() {
  unsigned int appLine=app_browser->value();
  unsigned int size =app_browser->size();
  if(appLine <= size && appLine !=0){
    std::string whichAPP = app_browser->text(appLine);
    Apps app;
    app.deletePanelItem(whichAPP);
    //std::cout<<whichAPP<<std::endl;
    refresh_app_browser();
  }
}

void PanelUI::refresh_app_browser() {
  Apps app;
  app_browser->clear();
  app.populate(app_browser);
}

void PanelUI::remove_indicator() {
  unsigned int line_item = indicator_browser->value();
  std::string item = indicator_browser->text(line_item);
  std::cout<<item<<std::endl;
  Apps app;
  if(item.compare("Network")==0){app.deleteNetworkMonitor();}
  else if(item.compare("Battery")==0){app.deleteBattery();}
  else if(item.compare("Volume")==0){app.deleteVolume();}
}

void PanelUI::save_user_clock() {
  const char* result = clock_style->value();
  Apps app;
  app.changeClock(result);
  clock_config_window->hide();
}

unsigned int PanelUI::switch_panel(Fl_Menu_Item *o) {
  unsigned int whichPanel = o->value();
  return whichPanel;
}

void PanelUI::width_height_border(Fl_Slider *slider_o, Fl_Value_Input *input_o, const char* dimension) {
  flPanel fl_panel;
  int panelSize=slider_o->value();
  input_o->value(panelSize);
  std::string border = dimension;
  std::string stringInt = fl_panel.convert(panelSize);
  if(border.compare("border")==0){
    std::cerr<<"Border size: "<< panelSize<<std::endl;
    if (panelSize == 0){
      fl_panel.setValue(dimension,"false");
      return;
    }
  }
  fl_panel.setValue(dimension,panelSize);
}

void PanelUI::input_width_height_border(Fl_Slider *slider_o, Fl_Value_Input *input_o, const char* dimension) {
  flPanel fl_panel;
  int panelSize=input_o->value();
  slider_o->value(panelSize);
  std::string border = dimension;
  std::string stringInt = fl_panel.convert(panelSize);
  if(border.compare("border")==0){
    std::cerr<<"Border size: "<< panelSize<<std::endl;
    if (panelSize == 0){
      fl_panel.setValue(dimension,"false");
      return;
    }
  }
  fl_panel.setValue(dimension,panelSize);
}
