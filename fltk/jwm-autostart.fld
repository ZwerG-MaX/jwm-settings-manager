# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include "../include/autostart.hpp"} {public global
} 

decl {\#include "../include/fltkfunctions.hpp"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../data/icons/jsm-autostart.xpm"} {public global
} 

class AutostartUI {open
} {
  Function {make_window()} {open
  } {
    code {load();} {}
    Fl_Window autostart_window {
      label {Autostart Programs} open
      xywh {718 242 335 270} type Double color 31 resizable
      code0 {startup(o,jsm_autostart_xpm);} xclass {jsm-autostart} visible
    } {
      Fl_Scroll {} {open selected
        xywh {0 0 335 270} color 31
      } {
        Fl_Input program_name {
          tooltip {You can add extra arguments here} xywh {85 205 245 30} box FLAT_BOX selection_color 47 align 1 when 8
        }
        Fl_Button {} {
          label Cancel
          callback {cancel();}
          xywh {215 240 57 25} box FLAT_BOX color 80 selection_color 38 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {const char* proggie = program_name->value();
if(proggie!=NULL){add_program_to_autostart(autoStartBrowser,proggie);}}
          tooltip {Write to configuration file} xywh {281 240 49 25} box FLAT_BOX color 61 selection_color 38 labelcolor 55
        }
        Fl_Button add_item {
          label {@+}
          callback {const char* proggie = program_name->value();
if(proggie==NULL){
  debug_out("Choose a program");
  choose_a_program(program_name);
}
else{
  const char* val="JWM";
  if(tabbies->value() == xdg_tab)val="XDG";
  if(val==NULL){
    std::cerr<<"No tab is correctly selected"<<std::endl;
    return;
  }
  std::string VAL=val;
  debug_out("Configuration for: "+VAL);
  if(VAL.compare("JWM")==0){
    std::string pro=proggie;
    if (pro.compare("")==0){choose_a_program(program_name);}
    else{
     debug_out("Adding:"+pro+":");
      add_program_to_autostart(autoStartBrowser,proggie);
    }
  }
  else{
    std::string desktopeditor=linuxcommon::term_out("which desktop-file-editor");
    if(desktopeditor.compare("")!=0){
      desktopeditor+=" ";
      desktopeditor+=xdgbrowser->text(xdgbrowser->value());
      int sys=system(desktopeditor.c_str());
      if(sys!=0){debug_out(desktopeditor+" did not work");}
    }
    else{debug_out("Desktop File editor was not found!");}
  }
}
program_name->value("");
program_name->redraw();}
          tooltip {Add OR chose a program} xywh {5 205 30 30} box FLAT_BOX color 23 selection_color 38
        }
        Fl_Button remove_item {
          callback {const char* val=browser_name->value();
if(val==NULL){
  std::cerr<<"No tab is correctly selected"<<std::endl;
  return;
}
std::string VAL=val;
if(VAL.compare("JWM")==0){remove_program_from_autostart(autoStartBrowser);}
else{remove_program_from_xdg_autostart(xdgbrowser);}
program_name->value("");
program_name->redraw();}
          image {custom_buttons/minus} xywh {45 205 30 30} box FLAT_BOX color 23 selection_color 38
        }
        Fl_Tabs tabbies {open
          xywh {0 0 335 200} box FLAT_BOX
        } {
          Fl_Group jwm_tab {
            label JWM
            callback {browser_name->value("JWM");} open
            xywh {0 35 335 165}
          } {
            Fl_Browser autoStartBrowser {
              xywh {10 45 315 145} type Hold box FLAT_BOX selection_color 55
              code0 {populateFLBrowser(o,"StartupCommand");}
            }
          }
          Fl_Group xdg_tab {
            label XDG
            callback {//browser_name->value("XDG");} open
            xywh {0 35 335 165} hide deactivate
          } {
            Fl_Browser xdgbrowser {
              callback {const char* chosen =o->text(o->value());
if(chosen!=NULL){
  program_name->value(chosen);
  program_name->redraw();
}}
              xywh {10 45 315 145} type Hold box FLAT_BOX selection_color 55
              code0 {listAutostartXDG(o);}
            }
          }
        }
        Fl_Input browser_name {
          xywh {95 5 220 25} box FLAT_BOX selection_color 47 align 1 when 8 hide
        }
      }
    }
  }
} 
