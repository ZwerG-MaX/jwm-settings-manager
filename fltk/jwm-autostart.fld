# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/Config.h"} {public global
} 

decl {\#include "../include/flAutostart.h"} {public global
} 

decl {\#include <FL/Fl_Select_Browser.H>} {public global
} 

decl {\#include "../include/ui.h"} {public global
} 

decl {\#include "../data/icons/jsm-autostart.xpm"} {public global
} 

class AutostartUI {open : {public Config}
} {
  Function {make_window()} {open
  } {
    code {load();
saveChangesTemp();} {}
    Fl_Window autostart_window {
      label {Autostart Programs} open
      xywh {221 217 335 230} type Double color 31 hide resizable
      code0 {startup(o);} xclass {jsm-autostart}
    } {
      Fl_Scroll {} {open
        xywh {0 0 335 230} color 31
      } {
        Fl_Input program_name {
          tooltip {You can add extra arguments here} xywh {100 160 220 25} box FLAT_BOX selection_color 47 align 1 when 8
        }
        Fl_Button {} {
          label Cancel
          callback {cancel(autostart_window);
UI ux;
ux.showSettings();}
          xywh {195 195 57 25} box FLAT_BOX color 80 selection_color 38 labelcolor 7
        }
        Fl_Button save_button {
          label OK
          callback {std::string proggie = program_name->value();
if(proggie.compare("")!=0){add_program_to_autostart();}
saveNoRestart();
autostart_window->hide();
UI ux;
ux.showSettings();}
          tooltip {Write to configuration file} xywh {261 195 49 25} box FLAT_BOX color 61 selection_color 38 labelcolor 55
        }
        Fl_Button add_item {
          label {@+}
          callback {std::string proggie = program_name->value();
if(proggie.compare("")==0){choose_a_program();}
else{add_program_to_autostart();}}
          tooltip {Add the chosen program} xywh {15 155 35 35} box FLAT_BOX color 23 selection_color 38
        }
        Fl_Browser autoStartBrowser {
          xywh {15 10 305 140} type Hold box FLAT_BOX selection_color 55
          code0 {flAutostart a;}
          code1 {a.getAutostart(autoStartBrowser);}
        }
        Fl_Button remove_item {
          callback {remove_program_from_autostart();}
          image {custom_buttons/minus} xywh {55 155 35 35} box FLAT_BOX color 23 selection_color 38
        }
      }
    }
  }
  Function {choose_a_program()} {open
  } {
    code {const char * f = "/usr/bin/";
const char * m="Choose a program";
const char *p="*";
Fl_Native_File_Chooser fnfc;
fnfc.title(m);
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter(p);
fnfc.directory(f); // default directory to use
// Show native chooser
switch ( fnfc.show() ){
  case -1:
     break; // ERROR
  case 1:
    break; // CANCEL
  default:
    const char *result =fnfc.filename();
    if(result!=NULL){
	std::string String = result;
	unsigned found = String.find_last_of("/");
	String.erase(0,found+1);
	result = String.c_str();
	program_name->value(result);
    }
    break; // FILE CHOSEN
}} {}
  }
  Function {add_program_to_autostart()} {open
  } {
    code {flAutostart a;
const char * input = program_name->value();
if(input!=NULL){
	autoStartBrowser->clear();
	a.addAutostart(input);
	a.getAutostart(autoStartBrowser);
	autoStartBrowser->redraw();
}} {}
  }
  Function {remove_program_from_autostart()} {open
  } {
    code {flAutostart a;
const char * item = autoStartBrowser->text(autoStartBrowser->value());
if (item !=NULL){
	a.removeAutostart(item);
	autoStartBrowser->clear();
	a.getAutostart(autoStartBrowser);
	autoStartBrowser->redraw();
}
else{
	fl_message("Please click on an item to remove!");
}} {}
  }
} 

Function {startup(Fl_Window *o)} {open
} {
  code {Config config; config.under_mouse(o);
o->icon(config.Get_Fl_Icon(jsm_autostart_xpm));} {}
} 
