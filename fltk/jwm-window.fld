# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.hpp"} {public global
} 

decl {\#include "../include/window.hpp"} {public global
} 

decl {\#include "../data/icons/jsm-windows.xpm"} {public global
} 

decl {\#include "../include/ui.hpp"} {public global
} 

class WindowUI {open : {public JSM_Window}
} {
  decl {std::string browser_line} {protected global
  }
  decl {std::string context} {protected global
  }
  decl {int JWMVERSION;} {private local
  }
  decl {int whichElement;} {private local
  }
  Function {add_option_window()} {} {
    Fl_Window add_opt_window {
      label {Add an Option}
      xywh {732 115 500 280} type Double hide resizable
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Scroll {} {open
        xywh {0 0 500 280} resizable
      } {
        Fl_Browser options_available {
          callback {int line = options_available->value();
options_desc->select(line);
const char* value = options_available->text(line);
if(value!=NULL){
  check_opts(value,desktop_num,layer_value,opacity_value,icon_value,layer_chooser);
}}
          xywh {10 10 115 195} type Hold box FLAT_BOX selection_color 80
          code0 {populateOptions(o);}
        }
        Fl_Browser options_desc {
          xywh {135 10 360 195} type Hold box FLAT_BOX selection_color 80 labeltype NO_LABEL align 1
          code0 {populateDesc(o);}
        }
        Fl_Input icon_value {
          label Icon
          tooltip {The Icon Name} xywh {65 210 100 25} box FLAT_BOX align 8 deactivate
        }
        Fl_Slider opacity_value {
          label Opacity
          xywh {335 210 100 25} type Horizontal box GTK_DOWN_BOX color 41 align 8 step 0.2 value 1 deactivate
        }
        Fl_Value_Input desktop_num {
          xywh {205 210 35 25} box FLAT_BOX align 8 maximum 10000 deactivate
        }
        Fl_Button {} {
          label Cancel
          callback {add_opt_window->hide();}
          tooltip {Cancel changes} xywh {370 245 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, groups_browser);
saveChangesTemp();
add_opt_window->hide();
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
          tooltip {Save Changes} xywh {430 245 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Menu_Button layer_chooser {
          label Layer open
          tooltip {Choose a layer} xywh {65 240 100 25} box FLAT_BOX color 23 deactivate
        } {
          MenuItem {} {
            label below
            callback {layer_value->value("below");}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label normal
            callback {layer_value->value("normal");}
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label above
            callback {layer_value->value("above");}
            xywh {20 20 100 20}
          }
        }
        Fl_Output layer_value {
          tooltip {The layer this option effects} xywh {170 240 100 25} box FLAT_BOX deactivate
        }
        Fl_Button {} {
          callback {std::string ICON=choose_an_icon();
if(ICON.compare("")!=0){
  icon_value->value(ICON.c_str());
  makeWidgetIcon(ICON,o,48);
}}
          tooltip {Choose an Icon} xywh {10 210 50 50} box FLAT_BOX color 23
        }
      }
    }
  }
  Function {add_class_window()} {} {
    Fl_Window class_win {
      label {Add Class} open
      xywh {218 580 375 50} type Double hide
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Input input_to_add_class {
        label {Class to Add}
        xywh {105 10 195 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {const char* input = input_to_add_class->value();
if(input!=NULL){
  add_class(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  class_win->hide();
}}
        tooltip {Write to configuration file} xywh {315 10 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {add_program_window()} {} {
    Fl_Window prog_win {
      label {Program to add} open
      xywh {208 542 380 40} type Double hide
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Input input_to_add_prog {
        xywh {115 10 195 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {const char* input = input_to_add_prog->value();
if(input!=NULL){
  add_prog(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  prog_win->hide();
}}
        tooltip {Write to configuration file} xywh {320 10 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button {} {
        label {Program @+}
        callback {choose_a_program(input_to_add_prog);}
        xywh {10 10 95 25} box FLAT_BOX color 23
      }
    }
  }
  Function {add_context_window()} {open
  } {
    Fl_Window context_add_win {
      label {Add Item} open
      xywh {851 111 310 155} type Double hide
    } {
      Fl_Menu_Button {} {
        label {Button Action}
        tooltip {Typically the left button} xywh {10 80 135 30} box FLAT_BOX color 23 selection_color 80
      } {
        MenuItem {} {
          label {move to the next window in the task list}
          callback {const char * action = "next";
menu_cb(action,action_input);}
          xywh {35 35 100 20}
        }
        MenuItem {} {
          label {move to the next window in the stacking order}
          callback {const char * action = "nextstacked";
menu_cb(action,action_input);}
          xywh {45 45 100 20}
        }
        MenuItem {} {
          label {move to the previous window in the task list}
          callback {const char * action = "prev";
menu_cb(action,action_input);}
          xywh {45 45 100 20}
        }
        MenuItem {} {
          label {move to the previous window in the stacking order}
          callback {const char * action = "prevstacked";
menu_cb(action,action_input);}
          xywh {55 55 100 20}
        }
        MenuItem {} {
          label {close window}
          callback {const char * action = "close";
menu_cb(action,action_input);}
          xywh {55 55 100 20}
        }
        MenuItem {} {
          label {fullscreen window}
          callback {const char * action = "fullscreen";
menu_cb(action,action_input);}
          xywh {65 65 100 20}
        }
        MenuItem {} {
          label {minimize window}
          callback {const char * action = "minimize";
menu_cb(action,action_input);}
          xywh {75 75 100 20}
        }
        MenuItem {} {
          label {maximize window}
          callback {const char * action = "maximize";
menu_cb(action,action_input);}
          xywh {85 85 100 20}
        }
        MenuItem {} {
          label {roll up window}
          callback {const char * action = "shade";
menu_cb(action,action_input);}
          xywh {95 95 100 20}
        }
        MenuItem {} {
          label {move window}
          callback {const char * action = "move";
menu_cb(action,action_input);}
          xywh {105 105 100 20}
        }
        MenuItem {} {
          label {resize window}
          callback {const char * action = "resize";
menu_cb(action,action_input);}
          xywh {115 115 100 20}
        }
        MenuItem {} {
          label {show window menu}
          callback {const char * action = "window";
menu_cb(action,action_input);}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {Show Application menu}
          callback {const char * action = "root:5";
menu_cb(action,action_input);}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {Show Places Menu}
          callback {const char * action = "root:7";
menu_cb(action,action_input);}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {Show Shutdown menu}
          callback {const char * action = "root:9";
menu_cb(action,action_input);}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {move one desktop to the right}
          callback {const char * action = "rdesktop";
menu_cb(action,action_input);}
          xywh {115 115 100 20}
        }
        MenuItem {} {
          label {move one desktop to the left}
          callback {const char * action = "ldesktop";
menu_cb(action,action_input);}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {move one desktop up}
          callback {const char * action = "udesktop";
menu_cb(action,action_input);}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {move one desktop down}
          callback {const char * action = "ddesktop";
menu_cb(action,action_input);}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {restart the Window Manager}
          callback {const char * action = "restart";
menu_cb(action,action_input);}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {exit the Window Manager}
          callback {const char * action = "exit";
menu_cb(action,action_input);}
          xywh {165 165 100 20}
        }
        MenuItem {} {
          label {Show any hidden Panels}
          callback {const char * action = "showtray";
menu_cb(action,action_input);}
          xywh {175 175 100 20}
        }
        MenuItem {} {
          label {Maximize to the Top of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxtop";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {Maximize to the Bottom of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxbottom";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {Maximize to the Left of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxleft";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {Maximize to the Right of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxright";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {Maximize Vertical}
          callback {if(JWMVERSION>=230){
  const char * action = "maxv";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {165 165 100 20}
        }
        MenuItem {} {
          label {Maximize Horizontal}
          callback {if(JWMVERSION>=230){
  const char * action = "maxh";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {175 175 100 20}
        }
        MenuItem {} {
          label {Send Window Up a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendu";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {185 185 100 20}
        }
        MenuItem {} {
          label {Send Window Down a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendd";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {195 195 100 20}
        }
        MenuItem {} {
          label {Send Window Right a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendr";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {205 205 100 20}
        }
        MenuItem {} {
          label {Send Window Left a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendl";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {215 215 100 20}
        }
        MenuItem {} {
          label {Restore a minimized window}
          callback {if(JWMVERSION>=233){
  const char * action = "restore";
  menu_cb(action,action_input);
}
else{
  o->hide();
}}
          xywh {25 25 100 20}
        }
      }
      Fl_Output add_button {
        tooltip {The mouse button you click} xywh {95 45 50 30} box FLAT_BOX selection_color 72
      }
      Fl_Output add_context_button {
        tooltip {The part of the window you click} xywh {155 10 150 30} box FLAT_BOX selection_color 72
        code0 {o->value(context.c_str());}
      }
      Fl_Button {} {
        label Cancel
        callback {context_add_win->hide();}
        xywh {195 120 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button {} {
        label OK
        callback {add_context();
context_add_win->hide();}
        tooltip {Write to configuration file} xywh {260 120 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button {} {
        callback {std::string program = choose_a_program();
if(program.compare("")==0){
  return;
}
program=addExecToLine(program);
action_input->value(program.c_str());
action_input->redraw();}
        tooltip {Choose a program} image {custom_buttons/gear16.png} xywh {110 115 35 35} box FLAT_BOX color 23 align 256
      }
      Fl_Box {} {
        label {OR program}
        xywh {15 115 90 35}
      }
      Fl_Menu_Button {} {
        label Button
        tooltip {Negative values are for Button Release, positive are for Click.  Double values are Double Click.} xywh {10 45 80 30} box FLAT_BOX color 23 selection_color 72
      } {
        MenuItem {} {
          label 1
          callback {std::string value="1";
add_button->value(value.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {-1}
          callback {std::string value="-1";
add_button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label 11
          callback {std::string value="11";
add_button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label 2
          callback {std::string value="2";
add_button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label {-2}
          callback {std::string value="-2";
add_button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label 22
          callback {std::string value="22";
add_button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label 3
          callback {std::string value="3";
add_button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label {-3}
          callback {std::string value="-3";
add_button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 33
          callback {std::string value="33";
add_button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 4
          callback {std::string value="4";
add_button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 5
          callback {std::string value="5";
add_button->value(value.c_str());}
          xywh {40 40 100 20}
        }
      }
      Fl_Input action_input {
        tooltip {The action to perform} xywh {155 80 150 30} box FLAT_BOX selection_color 72
      }
      Fl_Input add_mask {
        label Modifier
        tooltip {The modifier key} xywh {250 45 55 30} box FLAT_BOX selection_color 72
      }
      Fl_Menu_Button {} {
        label {Item to add}
        xywh {10 10 135 30} box FLAT_BOX color 23 selection_color 72
      } {
        MenuItem {} {
          label {Title Bar}
          callback {std::string item="title";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Icon
          callback {std::string item="icon";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Border
          callback {std::string item="border";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Close
          callback {std::string item="close";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Maximize
          callback {std::string item="maximize";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Minimize
          callback {std::string item="minimize";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Root
          callback {std::string item="root";
add_context_button->value(item.c_str());}
          xywh {0 0 100 20}
        }
      }
    }
  }
  Function {button_order_window()} {} {
    Fl_Window button_orderer {open
      xywh {527 387 225 165} type Double hide
    } {
      Fl_Input ordering {
        label {m Maximize button
i Minimize (iconify) button
t Window title
w Window menu button
x Close button}
        tooltip {Title Button Order

m Maximize button
i Minimize (iconify) button
t Window title
w Window menu button
x Close button} xywh {25 15 190 25} box FLAT_BOX selection_color 80 align 2
        code0 {std::string val=getElementText("TitleButtonOrder");}
        code1 {if(val.compare("")==0){val="wtimx";}}
        code2 {o->value(val.c_str());}
      }
      Fl_Button {} {
        label Cancel
        callback {button_orderer->hide();}
        xywh {60 125 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button {} {
        label OK
        callback {std::string val=ordering->value();
setElementText("TitleButtonOrder",val);
saveChanges();}
        tooltip {Write to configuration file} xywh {125 125 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {configure_context()} {} {
    Fl_Window context_config {
      label {Configure Item} open
      xywh {841 101 310 155} type Double hide
    } {
      Fl_Menu_Button {} {
        label {Button Action}
        tooltip {Typically the left button} xywh {10 80 135 30} box FLAT_BOX color 23 selection_color 80
      } {
        MenuItem {} {
          label {move to the next window in the task list}
          callback {const char * action = "next";
menu_cb(action,value_1);}
          xywh {35 35 100 20}
        }
        MenuItem {} {
          label {move to the next window in the stacking order}
          callback {const char * action = "nextstacked";
menu_cb(action,value_1);}
          xywh {45 45 100 20}
        }
        MenuItem {} {
          label {move to the previous window in the task list}
          callback {const char * action = "prev";
menu_cb(action,value_1);}
          xywh {45 45 100 20}
        }
        MenuItem {} {
          label {move to the previous window in the stacking order}
          callback {const char * action = "prevstacked";
menu_cb(action,value_1);}
          xywh {55 55 100 20}
        }
        MenuItem {} {
          label {close window}
          callback {const char * action = "close";
menu_cb(action,value_1);}
          xywh {55 55 100 20}
        }
        MenuItem {} {
          label {fullscreen window}
          callback {const char * action = "fullscreen";
menu_cb(action,value_1);}
          xywh {65 65 100 20}
        }
        MenuItem {} {
          label {minimize window}
          callback {const char * action = "minimize";
menu_cb(action,value_1);}
          xywh {75 75 100 20}
        }
        MenuItem {} {
          label {maximize window}
          callback {const char * action = "maximize";
menu_cb(action,value_1);}
          xywh {85 85 100 20}
        }
        MenuItem {} {
          label {roll up window}
          callback {const char * action = "shade";
menu_cb(action,value_1);}
          xywh {95 95 100 20}
        }
        MenuItem {} {
          label {move window}
          callback {const char * action = "move";
menu_cb(action,value_1);}
          xywh {105 105 100 20}
        }
        MenuItem {} {
          label {resize window}
          callback {const char * action = "resize";
menu_cb(action,value_1);}
          xywh {115 115 100 20}
        }
        MenuItem {} {
          label {show window menu}
          callback {const char * action = "window";
menu_cb(action,value_1);}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {Show Application menu}
          callback {const char * action = "root:5";
menu_cb(action,value_1);}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {Show Places Menu}
          callback {const char * action = "root:7";
menu_cb(action,value_1);}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {Show Shutdown menu}
          callback {const char * action = "root:9";
menu_cb(action,value_1);}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {move one desktop to the right}
          callback {const char * action = "rdesktop";
menu_cb(action,value_1);}
          xywh {115 115 100 20}
        }
        MenuItem {} {
          label {move one desktop to the left}
          callback {const char * action = "ldesktop";
menu_cb(action,value_1);}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {move one desktop up}
          callback {const char * action = "udesktop";
menu_cb(action,value_1);}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {move one desktop down}
          callback {const char * action = "ddesktop";
menu_cb(action,value_1);}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {restart the Window Manager}
          callback {const char * action = "restart";
menu_cb(action,value_1);}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {exit the Window Manager}
          callback {const char * action = "exit";
menu_cb(action,value_1);}
          xywh {165 165 100 20}
        }
        MenuItem {} {
          label {Show any hidden Panels}
          callback {const char * action = "showtray";
menu_cb(action,value_1);}
          xywh {175 175 100 20}
        }
        MenuItem {} {
          label {Maximize to the Top of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxtop";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {125 125 100 20}
        }
        MenuItem {} {
          label {Maximize to the Bottom of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxbottom";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {135 135 100 20}
        }
        MenuItem {} {
          label {Maximize to the Left of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxleft";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {145 145 100 20}
        }
        MenuItem {} {
          label {Maximize to the Right of the screen}
          callback {if(JWMVERSION>=230){
  const char * action = "maxright";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {155 155 100 20}
        }
        MenuItem {} {
          label {Maximize Vertical}
          callback {if(JWMVERSION>=230){
  const char * action = "maxv";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {165 165 100 20}
        }
        MenuItem {} {
          label {Maximize Horizontal}
          callback {if(JWMVERSION>=230){
  const char * action = "maxh";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {175 175 100 20}
        }
        MenuItem {} {
          label {Send Window Up a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendu";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {185 185 100 20}
        }
        MenuItem {} {
          label {Send Window Down a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendd";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {195 195 100 20}
        }
        MenuItem {} {
          label {Send Window Right a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendr";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {205 205 100 20}
        }
        MenuItem {} {
          label {Send Window Left a Desktop}
          callback {if(JWMVERSION>=230){
  const char * action = "sendl";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {215 215 100 20}
        }
        MenuItem {} {
          label {Restore a minimized window}
          callback {if(JWMVERSION>=233){
  const char * action = "restore";
  menu_cb(action,value_1);
}
else{
  o->hide();
}}
          xywh {25 25 100 20}
        }
      }
      Fl_Output button {
        tooltip {The mouse button you click} xywh {95 45 50 30} box FLAT_BOX selection_color 72
        code0 {o->value(getTabItem(0,browser_line).c_str());}
      }
      Fl_Output context_button {
        label {Item to configure}
        tooltip {The part of the window you click} xywh {135 10 170 30} box FLAT_BOX selection_color 72
        code0 {o->value(context.c_str());}
      }
      Fl_Button {} {
        label Cancel
        callback {context_config->hide();}
        xywh {195 120 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
      }
      Fl_Button {} {
        label OK
        callback {save_context();
saveChangesTemp();
context_config->hide();}
        tooltip {Write to configuration file} xywh {260 120 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button {} {
        callback {std::string program = choose_a_program();
if(program.compare("")==0){
  return;
}
program=addExecToLine(program);
value_1->value(program.c_str());
value_1->redraw();}
        tooltip {Choose a program} image {custom_buttons/gear16.png} xywh {110 115 35 35} box FLAT_BOX color 23 align 256
      }
      Fl_Box {} {
        label {OR program}
        xywh {15 115 90 35}
      }
      Fl_Menu_Button {} {
        label Button
        tooltip {Negative values are for Button Release, positive are for Click.  Double values are Double Click.} xywh {10 45 80 30} box FLAT_BOX color 23 selection_color 72
      } {
        MenuItem {} {
          label 1
          callback {std::string value="1";
button->value(value.c_str());}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {-1}
          callback {std::string value="-1";
button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label 11
          callback {std::string value="11";
button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label 2
          callback {std::string value="2";
button->value(value.c_str());}
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label {-2}
          callback {std::string value="-2";
button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label 22
          callback {std::string value="22";
button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label 3
          callback {std::string value="3";
button->value(value.c_str());}
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label {-3}
          callback {std::string value="-3";
button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 33
          callback {std::string value="33";
button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 4
          callback {std::string value="4";
button->value(value.c_str());}
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label 5
          callback {std::string value="5";
button->value(value.c_str());}
          xywh {40 40 100 20}
        }
      }
      Fl_Input value_1 {
        tooltip {The action to perform} xywh {155 80 150 30} box FLAT_BOX selection_color 72
        code0 {o->value(getTabItem(1,browser_line).c_str());}
      }
      Fl_Input mask {
        label Modifier
        tooltip {The modifier key} xywh {250 45 55 30} box FLAT_BOX selection_color 72
        code0 {o->value(getTabItem(2,browser_line).c_str());}
      }
    }
  }
  Function {make_gtk_theme_window()} {} {
    Fl_Window theme_window {
      label {Widget theme} open
      xywh {358 429 310 265} type Double hide
    } {
      Fl_Scroll {} {open
        xywh {0 0 310 265}
      } {
        Fl_Browser theme_browser {
          label {You will need to close any open windows to see the change}
          tooltip {You will need to close any open windows to see the change} xywh {5 5 300 190} type Hold box FLAT_BOX selection_color 80 align 130
          code0 {populateGTKThemes(o);}
        }
        Fl_Button {} {
          label Cancel
          callback {theme_window->hide();}
          xywh {190 240 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {if(!switchGTKTheme(theme_browser)){debug_out("Failed to change the GTK theme");}
theme_window->hide();}
          tooltip {You will need to close any open windows to see the change} xywh {255 240 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
      }
    }
  }
  Function {make_window()} {} {
    code {if(!load()){debug_out("DIDN'T LOAD in jwm-window");}
JWMVERSION=JWMversion();} {}
    Fl_Window window_window {
      label {Window Settings}
      xywh {134 80 510 310} type Double color 47 hide resizable
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Scroll {} {open
        xywh {0 0 510 315} color 31
      } {
        Fl_Tabs {} {open
          xywh {0 0 510 280} box FLAT_BOX color 45 selection_color 51
        } {
          Fl_Group {} {
            label Appearance open
            xywh {0 30 510 250} selection_color 45
          } {
            Fl_Box {} {
              tooltip {The  color  of  the  title bar (gradients are supported).  The default is \#CC7700:\#884400.} xywh {0 35 255 160} box FLAT_BOX color 47
            }
            Fl_Box {} {
              label {Active Window}
              xywh {60 35 160 25} labelfont 1 labelcolor 35 align 384
            }
            Fl_Box {} {
              label {Title bar}
              xywh {39 75 60 25} labelcolor 35
            }
            Fl_Button a_title_color1 {
              label {Color 1}
              callback {set_one_title_color(o,1,max_a_image,max_image,min_image,close_image);}
              tooltip {The  color  of  the  title bar (gradients are supported).  The default is \#CC7700:\#884400.} xywh {108 75 60 25} box FLAT_BOX color 23 align 5
              code0 {active_color_loader(o,1);}
            }
            Fl_Button a_title_color2 {
              label {Color 2}
              callback {set_two_title_colors(o,1);}
              tooltip {The color of the text and  buttons  in  the  title bar.  The default is white.} xywh {173 75 60 25} box FLAT_BOX color 23 align 5
              code0 {active_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Font Color}
              xywh {22 105 80 25} labelcolor 35
            }
            Fl_Button a_font_color {
              callback {set_font_color(a_font_color, 1);}
              tooltip {The color of the text and  buttons  in  the  title bar.  The default is white.} xywh {108 105 60 25} box FLAT_BOX color 23 when 6
              code0 {font_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Border Color}
              xywh {5 135 100 25} labelcolor 35
            }
            Fl_Button a_border_color {
              callback {set_border_color(o,1,1);}
              tooltip {The color of the window outline.  The default is a darkened version of  the  window  background.} xywh {108 135 60 25} box FLAT_BOX color 23 when 6
              code0 {border_color_loader(o,1,1);}
            }
            Fl_Slider active_o_slider {
              label {Opacity  }
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {108 165 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 3 step 0.01 value 1
              code0 {opacity_loader(o,1);}
            }
            Fl_Value_Input active_o_slider_v {
              label {%}
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {203 165 35 25} box FLAT_BOX selection_color 80 labelsize 10 align 8 when 3
              code0 {float v = active_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              xywh {255 35 255 160} box FLAT_BOX color 45
            }
            Fl_Box {} {
              label {Background  Window}
              xywh {270 35 220 25} labelfont 1 labelcolor 32 align 128
            }
            Fl_Box {} {
              label {Title bar}
              xywh {281 80 70 25} labelcolor 35
            }
            Fl_Button inactive_color {
              label {Color 1}
              callback {set_one_title_color(o,2);}
              tooltip {The color of the title bar (gradients are  supported)  of inactive windows.  The default is \#333333:\#111111.} xywh {360 75 60 25} box FLAT_BOX color 23 align 5 when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Button inactive_color2 {
              label {Color 2}
              callback {set_two_title_colors(o, 2);}
              tooltip {The color of the title bar (gradients are  supported)  of inactive windows.  The default is \#333333:\#111111.} xywh {425 75 60 25} box FLAT_BOX color 23 align 5 when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Font Color}
              xywh {263 107 95 25} labelcolor 35
            }
            Fl_Button inactive_font_color {
              callback {set_font_color(inactive_font_color, 2);}
              tooltip {The color of the text and  buttons  in  the  title bar of inactive windows.  The default is white.} xywh {360 105 60 25} box FLAT_BOX color 23 when 6
              code0 {font_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Border Color}
              xywh {257 135 90 25} labelcolor 35
            }
            Fl_Button inactive_border_color {
              callback {set_border_color(o,2,1);}
              tooltip {The color of the window  outline  for  inactive  windows. The  default  is  a  darkened version of the window background.} xywh {360 135 60 25} box FLAT_BOX color 23 when 6
              code0 {border_color_loader(o,2,1);}
            }
            Fl_Slider inactive_o_slider {
              label {Opacity }
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {355 165 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 3 step 0.01 value 1
              code0 {opacity_loader(o,2);}
            }
            Fl_Value_Input inactive_o_slider_v {
              label {%}
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {450 165 35 25} box FLAT_BOX selection_color 80 labelsize 10 align 8 when 3
              code0 {float v = inactive_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              label {Change the Window Button Images}
              xywh {0 200 115 80} labelfont 1 labelcolor 35 align 128
            }
            Fl_Box {} {
              label { Maximize (Activated)}
              xywh {175 240 70 40} align 128
            }
            Fl_Button max_a_image {
              callback {choose_button("ButtonMaxActive");
get_button(o,"ButtonMaxActive",a_title_color1);}
              tooltip {Choose an icon to display for the minimize button on client windows instead of the default.} xywh {115 200 40 40} box FLAT_BOX color 23 align 256
              code0 {get_button(o,"ButtonMaxActive",a_title_color1);}
            }
            Fl_Box {} {
              label { Maximize}
              xywh {240 245 90 15}
            }
            Fl_Button max_image {
              callback {choose_button("ButtonMax");
get_button(o,"ButtonMax",a_title_color1);}
              tooltip {Choose an icon to display for the maximize button on maximized client windows instead of the default.} xywh {186 200 40 40} box FLAT_BOX color 23 align 256
              code0 {get_button(o,"ButtonMax",a_title_color1);}
            }
            Fl_Box {} {
              label { Minimize}
              xywh {95 247 90 16}
            }
            Fl_Button min_image {
              callback {choose_button("ButtonMin");
get_button(o,"ButtonMin",a_title_color1);}
              tooltip {Choose an icon to display for the maximize button on client windows instead of the default.} xywh {258 200 40 40} box FLAT_BOX color 23 align 256
              code0 {get_button(o,"ButtonMin",a_title_color1);}
            }
            Fl_Box {} {
              label { Close}
              xywh {315 243 70 17}
            }
            Fl_Button close_image {
              callback {choose_button("ButtonClose");
get_button(o,"ButtonClose",a_title_color1);}
              tooltip {Choose an icon to display for the close button on client windows instead of the default.} xywh {330 200 40 40} box FLAT_BOX color 23 align 256
              code0 {get_button(o,"ButtonClose",a_title_color1);}
            }
            Fl_Button inactive_border_color2 {
              callback {set_border_color(o,2,2);}
              tooltip {If motif window decorations are  specified,  two colors  may  be  given separated by a ':' to set the down and up colors respetively.} xywh {425 135 60 25} box FLAT_BOX color 23 when 6
              code0 {if(secondColor(o)){border_color_loader(o,2,2);}}
            }
            Fl_Button a_border_color2 {
              callback {set_border_color(o,1,2);}
              tooltip {If motif window decorations are  specified,  two colors  may  be  given separated by a ':' to set the down and up colors respetively.} xywh {175 135 60 25} box FLAT_BOX color 23 when 6
              code0 {if(secondColor(o)){border_color_loader(o,1,2);}}
            }
            Fl_Button button_actions {
              label {Button Actions}
              callback {mouse_bindings_window()->show();}
              tooltip {Configure buttons for many features} xywh {385 240 110 35} box FLAT_BOX color 23 align 256
              code0 {hideWidgetForVersion(o,240);}
            }
            Fl_Button button_order {
              label {Button Order}
              callback {button_order_window()->show();}
              tooltip {Choose an icon to display for the close button on client windows instead of the default.} xywh {385 200 110 35} box FLAT_BOX color 23 align 256
              code0 {hideWidgetForVersion(o,240);}
            }
          }
          Fl_Group {} {
            label Settings
            xywh {10 35 485 245} selection_color 45 hide
          } {
            Fl_Slider t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(t_slider,t_slider_v,2);}
              tooltip {This is the top with the program name, and close button, etc..} xywh {205 35 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 when 3 minimum 2 maximum 78 step 1 value 20
              code1 {int y = getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Input t_slider_v {
              label pixels
              callback {title_bar_modifier(t_slider,t_slider_v,1);}
              tooltip {This is the top with the program name, and close button, etc..} xywh {340 35 31 25} box FLAT_BOX labelsize 10 align 8 when 3
              code0 {int v = t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider b_slider {
              label {Size of the Window Frame}
              callback {border_modifier(o,b_slider_v,2);}
              tooltip {This makes the edges of the window larger or smaller to help you grab them more easily} xywh {205 65 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 when 3 minimum 1 maximum 28 step 1 value 4
              code1 {int x = getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Input b_slider_v {
              label pixels
              callback {border_modifier(b_slider,o,1);}
              tooltip {This makes the edges of the window larger or smaller to help you grab them more easily} xywh {340 65 31 25} box FLAT_BOX labelsize 10 align 8 when 3
              code0 {int v = b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Menu_Button focus_menu {
              label {Choose how the Window comes to the front of the screen}
              tooltip {This determines how windows are brought to the front} xywh {20 125 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label { Click to focus and raise.}
                callback {setThing("FocusModel","click");}
                xywh {30 30 100 20}
              }
              MenuItem {} {
                label {Mouse over to focus. Click to raise.}
                callback {setThing("FocusModel","sloppy");}
                xywh {25 25 100 20}
              }
              MenuItem {} {
                label {Click to focus. Click title or border to raise.}
                callback {setThing("FocusModel","clicktitle");}
                xywh {40 40 100 20}
                code0 {if(JWMVERSION<237)o->hide();}
              }
              MenuItem {} {
                label {Mouse over to focus. Click title or border to raise.}
                callback {setThing("FocusModel"," sloppytitle");}
                xywh {50 50 100 20}
                code0 {if(JWMVERSION<237)o->hide();}
              }
            }
            Fl_Menu_Button resize_menu {
              label {Appearance of the Window while Resizing}
              tooltip {What the windows look like while resizing} xywh {20 155 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {setThing("ResizeMode","opaque");}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {setThing("ResizeMode","outline");}
                xywh {5 5 100 20}
              }
            }
            Fl_Menu_Button move_menu {
              label {Appearance of Window while Moving}
              tooltip {What the windows look like while moving} xywh {20 185 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {setThing("MoveMode","opaque");}
                xywh {20 20 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {setThing("MoveMode","outline");}
                xywh {15 15 100 20}
              }
            }
            Fl_Menu_Button snap_menu {
              label {Choose what the Windows will snap to}
              tooltip {This determines how windows 'Snap' to other windows, and screen edges} xywh {20 215 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {The Screen's Edges}
                callback {int i = snap_int->value();
const char *mode ="screen";
setThings("SnapMode",mode,i);}
                xywh {40 40 100 20}
              }
              MenuItem {} {
                label {The Border of other Windows}
                callback {int i = snap_int->value();
const char *mode ="border";
setThings("SnapMode",mode,i);}
                xywh {50 50 100 20}
              }
              MenuItem {} {
                label {No snapping}
                callback {int i = 0;
const char *mode ="none";
setThings("SnapMode",mode,i);}
                xywh {50 50 100 20}
              }
            }
            Fl_Value_Input snap_int {
              label {How close (in pixels) does the window need to be to snap?}
              callback {int d = o->value();
setSnap(d);}
              xywh {20 245 30 30} box FLAT_BOX labelsize 10 align 8 when 3 minimum 1 maximum 32 step 1 value 5
              code1 {int value = getSnap();}
              code2 {o->value(value);}
            }
            Fl_Slider corner_slider {
              label {Size of Corner}
              callback {corner_change(o);}
              tooltip {The corner width of the window border for rounded  window borders.   The  default is 4, the minimum is 0 (rectangular), and the maximum is 5 (most rounded).} xywh {205 95 60 25} type Horizontal box GTK_DOWN_BOX color 41 align 4 maximum 5 step 1 value 4
              code0 {corner_load(o);}
            }
          }
          Fl_Group {} {
            label Groups
            xywh {0 30 510 230} selection_color 45 hide
          } {
            Fl_Browser groups_browser {
              label {Current Groups}
              callback {populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              tooltip {Program groups allow one to specify options which apply to a group of programs by their name and/or class. A program group is created with the Group tag. As many program groups can be created as desired.} xywh {15 55 85 155} type Hold box FLAT_BOX align 1
              code1 {getGroups(o);}
            }
            Fl_Button group_add {
              label {@+}
              callback {XplusG(groups_browser);}
              tooltip {Add a new group of options for windows} xywh {15 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_group {
              callback {XminusG(groups_browser);}
              tooltip {Remove ENTIRE selected group} image {custom_buttons/minus} xywh {51 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser opt_browser {
              label {Current Options}
              tooltip {Window specific options} xywh {120 55 120 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button opt_add {
              label {@+}
              callback {add_option_window()->show();}
              tooltip {Add a new option to the current group} xywh {120 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_opt {
              callback {if(XminusO(groups_browser,opt_browser)){
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}}
              tooltip {Remove selected option} image {custom_buttons/minus} xywh {156 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser name_browser {
              label {Program Name}
              tooltip {Programs that are effected by the options} xywh {255 55 115 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button prog_add {
              label {@+}
              callback {if(XplusN(groups_browser)){
  add_program_window()->show();
}}
              tooltip {Add a program effected by the option} xywh {255 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_prog {
              callback {XminusN(groups_browser,name_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              tooltip {Remove selected Program name} image {custom_buttons/minus} xywh {291 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser class_browser {
              label {Window Class}
              tooltip {Window classes that effected by the options} xywh {385 55 115 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button class_add {
              label {@+}
              callback {if(XplusC(groups_browser)){
  add_class_window()->show();
}}
              tooltip {Add a new Window class effected by the option} xywh {385 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_class {
              callback {XminusC(groups_browser,class_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              tooltip {Remove selected Window Class} image {custom_buttons/minus} xywh {422 230 30 30} box FLAT_BOX color 23
            }
          }
          Fl_Group {} {
            label Advanced
            xywh {5 40 465 240} selection_color 45 hide
          } {
            Fl_Slider a_b_slider {
              label {Window Border Size}
              callback {border_modifier(o,a_b_slider_v);}
              tooltip {The  width of window borders in pixels. The default is 4, the minimum is 1, and the maximum is 128.} xywh {190 80 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 when 3 minimum 1 maximum 128 step 1 value 4
              code1 {int x = getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Output a_b_slider_v {
              label pixels
              tooltip {The  width of window borders in pixels. The default is 4, the minimum is 1, and the maximum is 128.} xywh {320 80 35 25} box FLAT_BOX color 54 labelsize 10 align 8 when 3 minimum 1 maximum 128 step 1 value 4
              code0 {int v = a_b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider a_t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(a_t_slider,a_t_slider_v);}
              tooltip {The height of window title bars  in  pixels.  By  default this is set to the size of the title font. The minimum is 1, and the maximum is 256.} xywh {190 110 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 when 3 minimum 1 maximum 256 step 1 value 20
              code1 {int y = getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Output a_t_slider_v {
              label pixels
              tooltip {The height of window title bars  in  pixels.  By  default this is set to the size of the title font. The minimum is 1, and the maximum is 256.} xywh {320 110 35 25} box FLAT_BOX color 54 labelsize 10 align 8 when 3 minimum 1 maximum 256 value 20
              code0 {int v = a_t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Box {} {
              label {This can make your window borders and Title bar}
              xywh {80 40 375 15}
            }
            Fl_Box {} {
              label {REALLY HUGE!}
              xywh {145 55 250 30} labelfont 1 labelsize 24
            }
            Fl_Input default_icon {
              label {Default Menu Button Icon}
              tooltip {An  icon to display for the menu button on client windows instead of the default. This is used for  client  windows that do not specify an icon.} xywh {190 230 125 25} box FLAT_BOX
              code0 {if(JWMVERSION<235){o->hide();}}
              code1 {else{std::string tmp=getElementText("ButtonMenu");if(tmp.compare("")!=0){o->value(tmp.c_str());}}}
            }
            Fl_Button default_icon_button {
              callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  default_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
  if(!setElementText("ButtonMenu",icon)){
    errorOUT("Could not set default icon");
  }
}}
              tooltip {Default Menu Button Icon.  An  icon to display for the menu button on client windows instead of the default. This is used for  client  windows that do not specify an icon.} xywh {320 230 50 50} box FLAT_BOX color 23
              code0 {if(JWMVERSION<235){o->hide();}}
            }
            Fl_Input default_icon_win {
              label {Default Window Icon}
              tooltip {An icon to display for windows that  do  not  specify  an icon.} xywh {190 200 125 25} box FLAT_BOX
              code0 {if(JWMVERSION<236){o->hide();}}
              code1 {else{std::string tmp=getElementText("DefaultIcon");if(tmp.compare("")!=0){o->value(tmp.c_str());}}}
            }
            Fl_Button default_icon_button_win {
              callback {std::string icon=choose_an_icon();
if(icon.compare("")!=0){
  default_icon->value(icon.c_str());
  makeWidgetIcon(icon,o,48);
  if(!setElementText("DefaultIcon",icon)){
    errorOUT("Could not set default icon");
  }
}}
              tooltip {Default Window  Icon.  An icon to display for windows that  do  not  specify  an icon.} xywh {320 175 50 50} box FLAT_BOX color 23
              code0 {if(JWMVERSION<236){o->hide();}}
            }
            Fl_Menu_Button {} {
              label {title decorations}
              xywh {35 170 150 25} box FLAT_BOX color 23
              code0 {if(JWMVERSION<236){o->hide();}}
            } {
              MenuItem motif {
                label motif
                callback {std::string decor="motif";
if(!setElementAttribute("WindowStyle","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations->value(decor.c_str());decorations->redraw();}
                xywh {0 0 100 20}
              }
              MenuItem flat {
                label flat
                callback {std::string decor="flat";
if(!setElementAttribute("WindowStyle","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations->value(decor.c_str());decorations->redraw();}
                xywh {0 0 100 20}
              }
            }
            Fl_Output decorations {
              xywh {190 170 125 25} box FLAT_BOX selection_color 80
              code0 {o->value("flat");o->redraw();}
              code1 {if(JWMVERSION<236){o->hide();}}
              code2 {else{std::string decor=getElementAttribute("WindowStyle","decorations");if(decor.compare("")!=0){o->value(decor.c_str());o->redraw();}}}
            }
            Fl_Menu_Button {} {
              label {border decorations}
              xywh {35 140 150 25} box FLAT_BOX color 23
              code0 {if(JWMVERSION<236){o->hide();}}
            } {
              MenuItem motif_border {
                label motif
                callback {std::string decor="motif";
if(!setElementAttribute("WindowStyle","Outline","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations_border->value(decor.c_str());
decorations_border->redraw();}
                xywh {20 20 100 20}
              }
              MenuItem flat_border {
                label flat
                callback {std::string decor="flat";
if(!setElementAttribute("WindowStyle","Outline","decorations",decor)){
  errorOUT("Could not set window decorations");
}
decorations_border->value(decor.c_str());
decorations_border->redraw();}
                xywh {20 20 100 20}
              }
            }
            Fl_Output decorations_border {
              xywh {190 140 125 25} box FLAT_BOX selection_color 80
              code0 {o->value("flat");o->redraw();}
              code1 {if(JWMVERSION<236){o->hide();}}
              code2 {else{std::string decor=getElementAttribute("WindowStyle","Outline","decorations");if(decor.compare("")!=0){o->value(decor.c_str());o->redraw();}}}
            }
          }
        }
        Fl_Button {} {
          label Cancel
          callback {window_window->hide();
cancel();
//showSettings();}
          xywh {390 285 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {saveChanges();
quit();}
          tooltip {Write to configuration file} xywh {455 285 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Button {} {
          label {Change GTK Widget theme}
          callback {make_gtk_theme_window()->show();}
          tooltip {You will need to close any open windows to see the change} xywh {10 285 205 25} box FLAT_BOX color 23 selection_color 48
        }
      }
    }
  }
  Function {mouse_bindings_window()} {open
  } {
    Fl_Window action_window {
      label {Window Actions} open
      xywh {96 393 280 310} type Double hide
    } {
      Fl_Scroll {} {open
        xywh {0 0 285 310}
      } {
        Fl_Button context_close {
          callback {context="close";
populateMouseContext(context_browser,context);}
          tooltip {The close button on a window.} xywh {10 10 40 40} box FLAT_BOX color 23
          code0 {get_button(o,"ButtonClose",a_title_color1);}
        }
        Fl_Button context_minimize {
          callback {context="minimize";
populateMouseContext(context_browser,context);}
          tooltip {The maximize button on a window.} xywh {66 10 40 40} box FLAT_BOX color 23 align 256
          code0 {get_button(o,"ButtonMin",a_title_color1);}
        }
        Fl_Button context_maximize {
          callback {context="maximize";
populateMouseContext(context_browser,context);}
          tooltip {The maximize button on a window.} xywh {123 10 40 40} box FLAT_BOX color 23 align 256
          code0 {get_button(o,"ButtonMaxActive",a_title_color1);}
        }
        Fl_Button context_title {
          label {Title Bar}
          callback {context="title";
populateMouseContext(context_browser,context);}
          tooltip {The title bar of a window.} xywh {180 10 90 40} box FLAT_BOX color 23 align 256
          code0 {o->color(activeBGColor(1));}
          code1 {o->labelcolor(fontColor(1));}
        }
        Fl_Button context_icon {
          label Icon
          callback {context="icon";
populateMouseContext(context_browser,context);}
          tooltip {The icon button on a window.} xywh {10 55 40 40} box FLAT_BOX color 23 align 256
          code0 {o->color(activeBGColor(1));}
          code1 {o->labelcolor(fontColor(1));}
        }
        Fl_Button context_border {
          label Border
          callback {context="border";
populateMouseContext(context_browser,context);}
          tooltip {The window border.} xywh {90 55 70 40} box FLAT_BOX color 23 align 256
        }
        Fl_Button context_root {
          label Root
          callback {context="root";
populateMouseContext(context_browser,context);}
          tooltip {The title bar of a window} xywh {200 55 70 40} box FLAT_BOX color 23 align 256
        }
        Fl_Browser context_browser {
          label {Button          Action               Modifier}
          callback {browser_line=o->text(o->value());}
          xywh {15 115 260 145} type Hold box FLAT_BOX selection_color 80 align 5
          code0 {static int widths[] = { 70,150,70 };}
          code1 {o->column_widths(widths);}
        }
        Fl_Button {} {
          label {@+}
          callback {context_browser->clear();
add_context_window()->show();}
          tooltip {Add Item} xywh {15 265 35 35} box FLAT_BOX color 23 align 256
        }
        Fl_Button {} {
          callback {if(!checkFlBrowserItem(context_browser))return;
context_browser->clear();
configure_context()->show();}
          tooltip {Configure Item} image {custom_buttons/gear16.png} xywh {95 265 35 35} box FLAT_BOX color 23 align 256
        }
        Fl_Button {} {
          label {-}
          callback {if(!checkFlBrowserItem(context_browser))return;
if(deleteContext(getTabItem(1,browser_line),context,getTabItem(0,browser_line),getTabItem(2,browser_line))){
  if(saveChangesTemp())
    context_browser->remove(context_browser->value());
}}
          tooltip {Remove Item} xywh {55 265 35 35} box FLAT_BOX color 23 labelfont 1 labelsize 40 align 256
        }
        Fl_Button {} {
          label Cancel
          callback {action_window->hide();}
          xywh {160 275 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {action_window->hide();
saveChanges();}
          tooltip {Write to configuration file} xywh {221 275 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
      }
    }
  }
  Function {menu_cb(const char* action, Fl_Input * o)} {open
  } {
    code {if(context.compare("")==0) return;
o->value(action);
o->redraw();} {}
  }
  Function {button_choice_cb(int buttonnum, Fl_Output* o)} {open
  } {
    code {std::string num = linuxcommon::convert_num_to_string(buttonnum);} {}
  }
  Function {save_context()} {open
  } {
    code {if(OutputIsEmpty(context_button))return;
if(OutputIsEmpty(button))return;
if(InputIsEmpty(value_1))return;
std::string Button=button->value();
std::string Action=value_1->value();
context=context_button->value();
std::string Mask;
std::string old_action=getTabItem(1,browser_line).c_str();
std::string old_button=getTabItem(0,browser_line).c_str();
std::string old_mask=getTabItem(2,browser_line).c_str();
if(!InputIsEmpty(mask)){
  Mask=mask->value();
}
modifyContext(old_action,Action,context,old_button,Button,old_mask,Mask);} {}
  }
  Function {add_context()} {open
  } {
    code {debug_out("add_context()");
if(OutputIsEmpty(add_context_button))return;
if(OutputIsEmpty(add_button))return;
if(InputIsEmpty(action_input))return;
std::string Button=add_button->value();
std::string Action=action_input->value();
context=add_context_button->value();
std::string Mask;
if(!InputIsEmpty(add_mask)){
  Mask=add_mask->value();
}
addContext(Action,context,Button,Mask);} {selected
    }
  }
} 
