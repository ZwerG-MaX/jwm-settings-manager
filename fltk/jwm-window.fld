# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
comment {/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using pugixml and FLTK
 *
 *         Copyright (C) 2016  Israel <israeldahl@gmail.com>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */} {in_source in_header
} 

decl {\#include <libintl.h>} {public global
} 

decl {\#include <string>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <iostream>} {public global
} 

decl {\#include "../include/jwmrc.h"} {public global
} 

decl {\#include "../include/window.hpp"} {public global
} 

decl {\#include "../data/icons/jsm-windows.xpm"} {public global
} 

class WindowUI {open
} {
  Function {add_option_window()} {open
  } {
    Fl_Window add_opt_window {
      label {Add an Option} open
      xywh {730 133 435 435} type Double hide
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Scroll {} {open
        xywh {0 0 430 430}
      } {
        Fl_Browser options_available {
          callback {int line = options_available->value();
options_desc->select(line);
const char* value = options_available->text(line);
if(value!=NULL){
  check_opts(value,desktop_num,layer_value,opacity_value,icon_value,layer_chooser);
}}
          xywh {10 10 115 375} type Hold box FLAT_BOX selection_color 80
          code0 {populateOptions(o);}
        }
        Fl_Button {} {
          label {@+}
          callback {add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, add_tracker, options_desc);}
          xywh {10 390 30 30} box FLAT_BOX color 23
        }
        Fl_Browser options_desc {
          xywh {135 10 285 220} type Hold box FLAT_BOX selection_color 80 labeltype NO_LABEL align 1
          code0 {populateDesc(o);}
        }
        Fl_Input icon_value {
          label Icon
          xywh {135 235 100 25} box FLAT_BOX align 8 deactivate
        }
        Fl_Slider opacity_value {
          label Opacity
          xywh {135 325 100 25} type Horizontal box GTK_DOWN_BOX color 41 align 8 step 0.2 value 1 deactivate
        }
        Fl_Value_Input desktop_num {
          label Desktop
          xywh {135 355 35 25} box FLAT_BOX align 8 maximum 10000 deactivate
        }
        Fl_Browser add_tracker {
          label Adding
          xywh {335 250 85 125} box FLAT_BOX align 1
        }
        Fl_Button {} {
          label Cancel
          callback {add_opt_window->hide();}
          xywh {300 400 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {add_option_to_group(options_available, icon_value, desktop_num, layer_value, opacity_value, add_tracker, options_desc);saveChanges();
add_opt_window->hide();
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
          tooltip {Write to configuration file} xywh {375 400 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
        Fl_Menu_Button layer_chooser {
          label Layer open
          xywh {135 265 100 25} box FLAT_BOX color 23 deactivate
        } {
          MenuItem {} {
            label below
            callback {layer_value->value("below");}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label normal
            callback {layer_value->value("normal");}
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label above
            callback {layer_value->value("above");}
            xywh {20 20 100 20}
          }
        }
        Fl_Output layer_value {
          xywh {135 295 100 25} box FLAT_BOX deactivate
        }
        Fl_Button {} {
          callback {std::string ICON=choose_an_icon();
if(ICON.compare("")!=0){
  icon_value->value(ICON.c_str());
  makeWidgetIcon(ICON,o,48);
}}
          xywh {275 235 50 50} box FLAT_BOX color 23
        }
      }
    }
  }
  Function {add_class_window()} {open
  } {
    Fl_Window class_win {
      label {Add Class} open
      xywh {218 580 375 50} type Double hide
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Input input_to_add_class {
        label {Class to Add}
        xywh {105 10 195 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {const char* input = input_to_add_class->value();
if(input!=NULL){
  add_class(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  class_win->hide();
}}
        tooltip {Write to configuration file} xywh {315 10 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
    }
  }
  Function {add_program_window()} {open
  } {
    Fl_Window prog_win {
      label {Program to add} open
      xywh {208 542 380 40} type Double hide
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows}
    } {
      Fl_Input input_to_add_prog {
        xywh {115 10 195 25} box FLAT_BOX
      }
      Fl_Button {} {
        label OK
        callback {const char* input = input_to_add_prog->value();
if(input!=NULL){
  add_prog(groups_browser,input);
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
  prog_win->hide();
}}
        tooltip {Write to configuration file} xywh {320 10 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
      }
      Fl_Button {} {
        label {Program @+}
        callback {choose_a_program(input_to_add_prog);}
        xywh {10 10 95 25} box FLAT_BOX color 23
      }
    }
  }
  Function {make_window()} {open
  } {
    code {if(!load()){debug_out("DIDN'T LOAD in jwm-window");}
else{debug_out("LOADED doc in jwm-window");}} {}
    Fl_Window window_window {
      label {Window Settings} open
      xywh {75 163 510 315} type Double color 31 resizable
      code0 {startup(o,jsm_windows_xpm);} xclass {jsm-windows} visible
    } {
      Fl_Scroll {} {open
        xywh {0 0 510 315} color 31
      } {
        Fl_Tabs {} {open
          xywh {0 0 510 280} box FLAT_BOX selection_color 51
        } {
          Fl_Group {} {
            label Appearance open selected
            xywh {0 30 510 250}
          } {
            Fl_Box {} {
              xywh {0 35 255 160} box FLAT_BOX color 51
            }
            Fl_Box {} {
              label {Active Window}
              xywh {60 35 160 25} labelfont 1 labelcolor 35 align 384
            }
            Fl_Box {} {
              label {Title bar}
              xywh {39 75 60 25} labelcolor 35
            }
            Fl_Button a_title_color1 {
              label {Color 1}
              callback {set_one_title_color(o,1,max_a_image,max_image,min_image,close_image);}
              xywh {108 75 60 25} box FLAT_BOX color 23 align 5
              code0 {active_color_loader(o,1);}
            }
            Fl_Button a_title_color2 {
              label {Color 2}
              callback {set_two_title_colors(o,1);}
              xywh {173 75 60 25} box FLAT_BOX color 23 align 5
              code0 {active_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Font Color}
              xywh {22 105 80 25} labelcolor 35
            }
            Fl_Button a_font_color {
              callback {set_font_color(a_font_color, 1);}
              xywh {108 105 60 25} box FLAT_BOX color 23 when 6
              code0 {font_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Border Color}
              xywh {5 135 100 25} labelcolor 35
            }
            Fl_Button a_border_color {
              callback {set_border_color(a_border_color, 1);}
              xywh {108 135 60 25} box FLAT_BOX color 23 when 6
              code0 {border_color_loader(o,1);}
            }
            Fl_Slider active_o_slider {
              label {Opacity  }
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {108 165 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 4 step 0.01 value 1
              code0 {opacity_loader(o,1);}
            }
            Fl_Value_Input active_o_slider_v {
              label {%}
              callback {set_opacity(active_o_slider,active_o_slider_v,1);}
              xywh {203 165 35 25} box FLAT_BOX selection_color 80 labelsize 10 align 8 when 3 value 1
              code0 {float v = active_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              xywh {255 35 255 160} box FLAT_BOX color 45
            }
            Fl_Box {} {
              label {Background  Window}
              xywh {270 35 220 25} labelfont 1 labelcolor 32 align 128
            }
            Fl_Box {} {
              label {Title bar}
              xywh {281 80 70 25} labelcolor 35
            }
            Fl_Button inactive_color {
              label {Color 1}
              callback {set_one_title_color(o,2);}
              xywh {360 75 60 25} box FLAT_BOX color 23 align 5 when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Button inactive_color2 {
              label {Color 2}
              callback {set_two_title_colors(o, 2);}
              xywh {425 75 60 25} box FLAT_BOX color 23 align 5 when 6
              code0 {inactive_color_loader(o,1);}
            }
            Fl_Box {} {
              label {Font Color}
              xywh {263 107 95 25} labelcolor 35
            }
            Fl_Button inactive_font_color {
              callback {set_font_color(inactive_font_color, 2);}
              xywh {360 105 60 25} box FLAT_BOX color 23 when 6
              code0 {font_color_loader(o,2);}
            }
            Fl_Box {} {
              label {Border Color}
              xywh {257 135 90 25} labelcolor 35
            }
            Fl_Button inactive_border_color {
              callback {set_border_color(inactive_border_color, 2);}
              xywh {360 135 60 25} box FLAT_BOX color 23 when 6
              code0 {border_color_loader(o,2);}
            }
            Fl_Slider inactive_o_slider {
              label {Opacity }
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              tooltip {A compositor (like xcompmgr) must be installed} xywh {355 165 90 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 29 align 4 when 4 step 0.01 value 1
              code0 {opacity_loader(o,2);}
            }
            Fl_Value_Input inactive_o_slider_v {
              label {%}
              callback {set_opacity(inactive_o_slider,inactive_o_slider_v,2);}
              xywh {450 165 35 25} box FLAT_BOX selection_color 80 labelsize 10 align 8 when 3
              code0 {float v = inactive_o_slider->value();}
              code1 {o->value(v*100);}
            }
            Fl_Box {} {
              label {Change the Window Button Images}
              xywh {15 200 115 80} labelfont 1 labelcolor 35 align 128
            }
            Fl_Box {} {
              label { Maximize (Activated)}
              xywh {245 240 70 40} align 128
            }
            Fl_Button max_a_image {
              callback {choose_button("ButtonMaxActive");
get_button(o,"ButtonMaxActive",a_title_color1);}
              tooltip {Choose an image (XBM) for the Maximized button} xywh {255 200 40 40} box FLAT_BOX color 43 align 256
              code0 {get_button(o,"ButtonMaxActive",a_title_color1);}
            }
            Fl_Box {} {
              label { Maximize}
              xywh {340 245 90 5}
            }
            Fl_Button max_image {
              callback {choose_button("ButtonMax");
get_button(o,"ButtonMax",a_title_color1);}
              tooltip {Choose an image (XBM) for the Maximized button} xywh {360 200 40 40} box FLAT_BOX color 43 align 256
              code0 {get_button(o,"ButtonMax",a_title_color1);}
            }
            Fl_Box {} {
              label { Minimize}
              xywh {125 247 90 3}
            }
            Fl_Button min_image {
              callback {choose_button("ButtonMin");
get_button(o,"ButtonMin",a_title_color1);}
              tooltip {Choose an image (XBM) for the Maximized button} xywh {145 200 40 40} box FLAT_BOX color 43 align 256
              code0 {get_button(o,"ButtonMin",a_title_color1);}
            }
            Fl_Box {} {
              label { Close}
              xywh {435 245 70 5}
            }
            Fl_Button close_image {
              callback {choose_button("ButtonClose");
get_button(o,"ButtonClose",a_title_color1);}
              tooltip {Choose an image (XBM) for the Maximized button} xywh {450 200 40 40} box FLAT_BOX color 43 align 256
              code0 {get_button(o,"ButtonClose",a_title_color1);}
            }
          }
          Fl_Group {} {
            label Settings open
            xywh {10 35 485 245} hide
          } {
            Fl_Slider t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(t_slider,t_slider_v,2);}
              tooltip {This is the top with the program name, and close button, etc..} xywh {205 35 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 2 maximum 78 step 1 value 20
              code1 {int y = getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Input t_slider_v {
              label pixels
              callback {title_bar_modifier(t_slider,t_slider_v,1);}
              xywh {340 35 31 25} box FLAT_BOX labelsize 10 align 8 when 3
              code0 {int v = t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider b_slider {
              label {Size of the Window Frame}
              callback {border_modifier(o,b_slider_v,2);}
              tooltip {This makes the edges of the window larger or smaller to help you grab them more easily} xywh {205 65 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 1 maximum 28 step 1 value 4
              code1 {int x = getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Input b_slider_v {
              label pixels
              callback {border_modifier(b_slider,o,1);}
              xywh {340 65 31 25} box FLAT_BOX labelsize 10 align 8 when 3
              code0 {int v = b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Menu_Button focus_menu {
              label {Choose how the Window comes to the front of the screen} open
              tooltip {This determines how windows are brought to the front} xywh {20 125 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {By Clicking on it}
                callback {setThing("FocusModel","click");}
                xywh {30 30 100 20}
              }
              MenuItem {} {
                label {By moving the mouse over it}
                callback {setThing("FocusModel","sloppy");}
                xywh {25 25 100 20}
              }
            }
            Fl_Menu_Button resize_menu {
              label {Appearance of the Window while Resizing} open
              tooltip {What the windows look like while resizing} xywh {20 155 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {setThing("ResizeMode","opaque");}
                xywh {10 10 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {setThing("ResizeMode","outline");}
                xywh {5 5 100 20}
              }
            }
            Fl_Menu_Button move_menu {
              label {Appearance of Window while Moving} open
              tooltip {What the windows look like while moving} xywh {20 185 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {Make it an Opaque box}
                callback {setThing("MoveMode","opaque");}
                xywh {20 20 100 20}
              }
              MenuItem {} {
                label {Show an Outline only}
                callback {setThing("MoveMode","outline");}
                xywh {15 15 100 20}
              }
            }
            Fl_Menu_Button snap_menu {
              label {Choose what the Windows will snap to} open
              tooltip {This determines how windows 'Snap' to other windows, and screen edges} xywh {20 215 450 25} box FLAT_BOX color 23 selection_color 72 labelcolor 35 textcolor 35
            } {
              MenuItem {} {
                label {The Screen's Edges}
                callback {int i = snap_int->value();
const char *mode ="screen";
setThings("SnapMode",mode,i);}
                xywh {40 40 100 20}
              }
              MenuItem {} {
                label {The Border of other Windows}
                callback {int i = snap_int->value();
const char *mode ="border";
setThings("SnapMode",mode,i);}
                xywh {50 50 100 20}
              }
              MenuItem {} {
                label {No snapping}
                callback {int i = 0;
const char *mode ="none";
setThings("SnapMode",mode,i);}
                xywh {50 50 100 20}
              }
            }
            Fl_Value_Input snap_int {
              label {How close (in pixels) does the window need to be to snap?}
              callback {int d = o->value();
setSnap(d);}
              xywh {20 245 30 30} box FLAT_BOX labelsize 10 align 8 when 3 minimum 1 maximum 32 step 1 value 5
              code1 {int value = getSnap();}
              code2 {o->value(value);}
            }
            Fl_Slider corner_slider {
              label {Size of Corner}
              callback {corner_change(o);}
              tooltip {This changes the curvature of the window's corners} xywh {205 95 60 25} type Horizontal box GTK_DOWN_BOX color 41 align 4 maximum 5 step 1 value 4
              code0 {corner_load(o);}
            }
          }
          Fl_Group {} {
            label Groups open
            xywh {0 30 510 230} hide
          } {
            Fl_Browser groups_browser {
              label {Current Groups}
              callback {populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              tooltip {Program groups allow one to specify options which apply to a group of programs by their name and/or class. A program group is created with the Group tag. As many program groups can be created as desired.} xywh {15 55 85 155} type Hold box FLAT_BOX align 1
              code1 {getGroups(o);}
            }
            Fl_Button group_add {
              label {@+}
              callback {XplusG(groups_browser);}
              xywh {15 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_group {
              callback {XminusG(groups_browser);}
              image {custom_buttons/minus} xywh {51 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser opt_browser {
              label {Current Options}
              xywh {120 55 120 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button opt_add {
              label {@+}
              callback {std::string value=XplusO(groups_browser);
if(value.compare("")!=0){
  add_option_window()->show();
  options_desc->copy_label(value.c_str());
}}
              xywh {120 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_opt {
              callback {if(XminusO(groups_browser,opt_browser)){
  populate_groups(groups_browser,opt_browser,class_browser,name_browser);
}}
              image {custom_buttons/minus} xywh {156 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser name_browser {
              label {Program Name}
              xywh {255 55 115 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button prog_add {
              label {@+}
              callback {if(XplusN(groups_browser)){
  add_program_window()->show();
}}
              xywh {255 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_prog {
              callback {XminusN(groups_browser,name_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              image {custom_buttons/minus} xywh {291 230 30 30} box FLAT_BOX color 23
            }
            Fl_Browser class_browser {
              label {Window Class}
              xywh {385 55 115 155} type Hold box FLAT_BOX align 1
            }
            Fl_Button class_add {
              label {@+}
              callback {if(XplusC(groups_browser)){
  add_class_window()->show();
}}
              xywh {385 230 30 30} box FLAT_BOX color 23
            }
            Fl_Button rm_class {
              callback {XminusC(groups_browser,class_browser);
populate_groups(groups_browser,opt_browser,class_browser,name_browser);}
              image {custom_buttons/minus} xywh {422 230 30 30} box FLAT_BOX color 23
            }
          }
          Fl_Group {} {
            label Advanced
            xywh {5 45 460 205} hide
          } {
            Fl_Slider a_b_slider {
              label {Window Border Size}
              callback {border_modifier(o,a_b_slider_v);}
              tooltip {Width of the window borders} xywh {190 150 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 1 maximum 128 step 1 value 4
              code1 {int x = getBorderWidth();}
              code2 {o->value(x);}
            }
            Fl_Value_Output a_b_slider_v {
              label pixels
              xywh {320 150 35 25} box FLAT_BOX color 54 labelsize 10 align 8 when 3
              code0 {int v = a_b_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Slider a_t_slider {
              label {Window Title Bar Size}
              callback {title_bar_modifier(a_t_slider,a_t_slider_v);}
              tooltip {Height of the Window's Title Bar} xywh {190 190 125 25} type Horizontal box GTK_DOWN_BOX color 41 selection_color 50 align 4 minimum 2 maximum 256 step 1 value 20
              code1 {int y = getBorderHeight();}
              code2 {o->value(y);}
            }
            Fl_Value_Output a_t_slider_v {
              label pixels
              xywh {320 190 35 25} box FLAT_BOX color 54 labelsize 10 align 8 when 3
              code0 {int v = a_t_slider->value();}
              code1 {o->value(v);}
            }
            Fl_Box {} {
              label {This can make your window borders and Title bar}
              xywh {80 55 375 15}
            }
            Fl_Box {} {
              label {REALLY HUGE!}
              xywh {145 70 250 50} labelfont 1 labelsize 24
            }
          }
        }
        Fl_Button {} {
          label Cancel
          callback {window_window->hide();
cancel();
//showSettings();}
          xywh {390 285 55 25} box FLAT_BOX down_box GTK_DOWN_BOX color 80 selection_color 81 labelcolor 7
        }
        Fl_Button {} {
          label OK
          callback {saveChanges();
//showSettings();}
          tooltip {Write to configuration file} xywh {455 285 45 25} box FLAT_BOX down_box GTK_DOWN_BOX color 61 selection_color 59 labelcolor 55
        }
      }
    }
  }
} 
