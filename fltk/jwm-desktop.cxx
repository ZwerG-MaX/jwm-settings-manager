/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-desktop.h"

void DesktopUI::cb_background_displayer_thingie_i(Fl_Box* o, void*) {
  background(o);
}
void DesktopUI::cb_background_displayer_thingie(Fl_Box* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_background_displayer_thingie_i(o,v);
}

void DesktopUI::cb_Choose_i(Fl_Button*, void*) {
  bg_chooser_cb();
}
void DesktopUI::cb_Choose(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Choose_i(o,v);
}

void DesktopUI::cb_Choose1_i(Fl_Button*, void*) {
  one_color();
}
void DesktopUI::cb_Choose1(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Choose1_i(o,v);
}

void DesktopUI::cb_Choose2_i(Fl_Button*, void*) {
  two_color();
}
void DesktopUI::cb_Choose2(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Choose2_i(o,v);
}

void DesktopUI::cb_Choose3_i(Fl_Button*, void*) {
  flDesktop desktop;
}
void DesktopUI::cb_Choose3(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Choose3_i(o,v);
}

void DesktopUI::cb_icons_check_i(Fl_Check_Button*, void*) {
  use_icons_on_desktop();
}
void DesktopUI::cb_icons_check(Fl_Check_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_icons_check_i(o,v);
}

void DesktopUI::cb_Multiple_i(Fl_Check_Button*, void*) {
  useMultipleDesktops();
}
void DesktopUI::cb_Multiple(Fl_Check_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Multiple_i(o,v);
}

void DesktopUI::cb_num_desktop_w_i(Fl_Value_Input* o, void*) {
  int width = int((o->value()));
num_desktop_wh_cb("width",width);
}
void DesktopUI::cb_num_desktop_w(Fl_Value_Input* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_num_desktop_w_i(o,v);
}

void DesktopUI::cb_num_desktop_h_i(Fl_Value_Input* o, void*) {
  int height = int((o->value()));
num_desktop_wh_cb("height",height);
}
void DesktopUI::cb_num_desktop_h(Fl_Value_Input* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_num_desktop_h_i(o,v);
}

void DesktopUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel();
desktop_window->hide();
UI ux;
ux.showSettings();
}
void DesktopUI::cb_Cancel(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void DesktopUI::cb_OK_i(Fl_Button*, void*) {
  saveJWMRC();
desktop_window->hide();
UI ux;
ux.showSettings();
}
void DesktopUI::cb_OK(Fl_Button* o, void* v) {
  ((DesktopUI*)(o->parent()->parent()->user_data()))->cb_OK_i(o,v);
}

Fl_Double_Window* DesktopUI::make_window() {
  load();
  { Fl_Double_Window* o = desktop_window = new Fl_Double_Window(395, 515, gettext("Desktop Settings"));
    desktop_window->color((Fl_Color)31);
    desktop_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 395, 510);
      o->color((Fl_Color)31);
      { Fl_Box* o = background_displayer_thingie = new Fl_Box(25, 85, 345, 270);
        background_displayer_thingie->box(FL_GTK_DOWN_BOX);
        background_displayer_thingie->color((Fl_Color)37);
        background_displayer_thingie->callback((Fl_Callback*)cb_background_displayer_thingie);
        background_displayer_thingie->when(FL_WHEN_RELEASE_ALWAYS);
        background(o);
      } // Fl_Box* background_displayer_thingie
      { color_display1 = new Fl_Box(25, 85, 345, 270);
        color_display1->box(FL_GTK_DOWN_BOX);
        color_display1->color((Fl_Color)37);
        color_display1->when(FL_WHEN_RELEASE_ALWAYS);
        color_display1->hide();
      } // Fl_Box* color_display1
      { color_display2 = new Fl_Box(25, 215, 345, 140);
        color_display2->box(FL_GTK_DOWN_BOX);
        color_display2->color((Fl_Color)37);
        color_display2->when(FL_WHEN_RELEASE_ALWAYS);
        color_display2->hide();
      } // Fl_Box* color_display2
      { Fl_Button* o = new Fl_Button(25, 365, 110, 25, gettext("Choose Image"));
        o->box(FL_GTK_UP_BOX);
        o->callback((Fl_Callback*)cb_Choose);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(140, 365, 110, 25, gettext("Choose Color"));
        o->box(FL_GTK_UP_BOX);
        o->callback((Fl_Callback*)cb_Choose1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(255, 365, 125, 25, gettext("Choose Gradient"));
        o->tooltip(gettext("Make the background a Color Gradient"));
        o->box(FL_GTK_UP_BOX);
        o->callback((Fl_Callback*)cb_Choose2);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(130, 395, 135, 25, gettext("Choose Command"));
        o->tooltip(gettext("Use a command to set the background"));
        o->box(FL_GTK_UP_BOX);
        o->callback((Fl_Callback*)cb_Choose3);
        o->deactivate();
      } // Fl_Button* o
      { icons_check = new Fl_Check_Button(240, 435, 150, 25, gettext("Icons on Desktop"));
        icons_check->down_box(FL_GTK_DOWN_BOX);
        icons_check->selection_color((Fl_Color)59);
        icons_check->callback((Fl_Callback*)cb_icons_check);
        icons_check->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        icons_check->when(FL_WHEN_CHANGED);
        icons_on_desktop();
      } // Fl_Check_Button* icons_check
      { Fl_Output* o = current_bg = new Fl_Output(25, 30, 345, 30, gettext("Current Background"));
        current_bg->box(FL_GTK_DOWN_BOX);
        current_bg->color(FL_LIGHT1);
        current_bg->selection_color(FL_DARK_RED);
        current_bg->labelfont(1);
        current_bg->align(Fl_Align(33));
        flDesktop desktop;
        const char * bg = desktop.getBackground();
        o->value(bg);
      } // Fl_Output* current_bg
      { Fl_Check_Button* o = new Fl_Check_Button(20, 430, 155, 25, gettext("Multiple Desktops"));
        o->tooltip(gettext("This allows you to have multiple screens to work on from one Display"));
        o->down_box(FL_GTK_DOWN_BOX);
        o->selection_color((Fl_Color)59);
        o->callback((Fl_Callback*)cb_Multiple);
        o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        o->when(FL_WHEN_CHANGED);
        bool m = multipleDesktops();
        if(m){o->value(1);}
        else{o->value(0);}
      } // Fl_Check_Button* o
      { Fl_Value_Input* o = num_desktop_w = new Fl_Value_Input(20, 455, 20, 25, gettext("Number of Desktops Wide"));
        num_desktop_w->box(FL_GTK_DOWN_BOX);
        num_desktop_w->color((Fl_Color)53);
        num_desktop_w->callback((Fl_Callback*)cb_num_desktop_w);
        num_desktop_w->align(Fl_Align(FL_ALIGN_RIGHT));
        int width = getIntAttribute("Desktops","width");
        o->value(width);
      } // Fl_Value_Input* num_desktop_w
      { Fl_Value_Input* o = num_desktop_h = new Fl_Value_Input(20, 480, 20, 25, gettext("Number of Desktops High "));
        num_desktop_h->box(FL_GTK_DOWN_BOX);
        num_desktop_h->color((Fl_Color)53);
        num_desktop_h->callback((Fl_Callback*)cb_num_desktop_h);
        num_desktop_h->align(Fl_Align(FL_ALIGN_RIGHT));
        int height = getIntAttribute("Desktops","height");
        o->value(height);
      } // Fl_Value_Input* num_desktop_h
      { Fl_Button* o = new Fl_Button(260, 480, 65, 25, gettext("Cancel"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)81);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(335, 480, 45, 25, gettext("OK"));
        o->tooltip(gettext("Write to configuration file"));
        o->box(FL_GTK_UP_BOX);
        o->color((Fl_Color)61);
        o->selection_color((Fl_Color)59);
        o->labelcolor((Fl_Color)55);
        o->callback((Fl_Callback*)cb_OK);
      } // Fl_Button* o
      o->end();
    } // Fl_Scroll* o
    Config config;config.under_mouse(o);
    desktop_window->end();
    desktop_window->resizable(desktop_window);
  } // Fl_Double_Window* desktop_window
  return desktop_window;
}

void DesktopUI::bg_chooser_cb() {
  flDesktop desktop;
  std::string background = getenv("HOME");
  background +="/Pictures/";
  const char * bg = background.c_str();//"/usr/share/backgrounds";
  const char * m="Choose a Background";
  const char *p="*.{jpg,JPG,png,PNG}";
  int r = 0;
  char *result = fl_file_chooser(m,p,bg,r);
  if(result!=NULL){
  	//Is it a png or JPG?
  	std::string extention, resultStr;
  	resultStr = result;
  	extention = resultStr.substr((strlen(result)-4),4);
  	std::transform(extention.begin(), extention.end(), extention.begin(), ::tolower);
  	if ((extention.compare(".png")==0) ||
  	    (extention.compare(".jpg")==0) ||
  	    (extention.compare(".jpeg")==0) ||
  	    (extention.compare(".svg")==0)){
  		current_bg->value(result);
  		const char* type="image";
  		desktop.setBackground(type,result);
  		color_display1->hide();
  		color_display2->hide();
  		desktop.setFlImage(background_displayer_thingie,result);
  	}
  }
}

void DesktopUI::one_color() {
  flDesktop desktop;
  uchar r;
  uchar g;
  uchar b;
  
  int c;
  const char * label ="choose";
  c= fl_color_chooser(label,r,g,b,2);
  
  double* colors = new double[4];
  colors[0] = int(r); 
  colors[1] = int(g);
  colors[2] = int(b);
  colors[3] = 0;
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	desktop.setBackground(colors);
  	unsigned int unusedColor;
  	unsigned int colorSet = desktop.getBackground(unusedColor);
  	color_display1->color(colorSet);
  	color_display1->show();
  	color_display2->hide();
  	background_displayer_thingie->hide();
  	saveChangesTemp();
  }
}

void DesktopUI::two_color() {
  flDesktop desktop;
  uchar r;
  uchar g;
  uchar b;
  int c;
  const char * label ="Choose 1st Color";
  c= fl_color_chooser(label,r,g,b,2);
  double* gradient1 = new double[4];
  gradient1[0] = int(r); 
  gradient1[1] = int(g);
  gradient1[2] = int(b);
  gradient1[3] = 0;
  if(c!=0){ //If color chooser isn't canceled... do stuff
  	uchar r2;
  	uchar g2;
  	uchar b2;
  	int c2;
  	const char * label2 ="Choose 2nd Color";
  	c2= fl_color_chooser(label2,r2,g2,b2,2);
  	double* gradient2 = new double[4];
  	gradient2[0] = int(r2); 
  	gradient2[1] = int(g2);
  	gradient2[2] = int(b2);
  	gradient2[3] = 0;
  	if(c2!=0){ //If color chooser isn't canceled... do stuff
  		desktop.setBackground(gradient1,gradient2);
  		unsigned int color2;
  		unsigned int color1 = desktop.getBackground(color2);
  		color_display1->color(color1);
  		color_display2->color(color2);
  		color_display1->show();
  		color_display2->show();
  		background_displayer_thingie->hide();
  		color_display1->redraw();
  		color_display2->redraw();
  		saveChangesTemp();
  	}
  }
}

void DesktopUI::background(Fl_Box*o) {
  flDesktop desktop;
  const char * bg = desktop.getBackground();
  desktop.setFlImage(o,bg);
}

bool DesktopUI::multipleDesktops() {
  int width = getIntAttribute("Desktops","width");
  int height = getIntAttribute("Desktops","height");
  if (((height==1) && (width ==0)) || ((height==0) && (width ==1))){return false;}
  return false;
}

void DesktopUI::useMultipleDesktops() {
  if(!multipleDesktops()){
  int width = int((num_desktop_w->value()));
  int height = int((num_desktop_h->value()));
  if (width == 1 && height ==1 ){width =2;}
  setAttribute("Desktops","width",width);
  setAttribute("Desktops","height",height);
  }
}

void DesktopUI::num_desktop_wh_cb(const char* whichone, int value) {
  setAttribute("Desktops",whichone,value);
  int w = int((num_desktop_w->value()));
  int h = int((num_desktop_h->value()));
  int defaultValue = 1;
  if(w==0){setAttribute("Desktops","width",defaultValue);}
  if(h==0){setAttribute("Desktops","height",defaultValue);}
}

void DesktopUI::use_icons_on_desktop() {
  flDesktop desktop;
  desktop.setIconsOnDesktop();
  background(background_displayer_thingie);
}

void DesktopUI::icons_on_desktop() {
  flDesktop desktop;
  if(desktop.filemanagerRunning() ){icons_check->value(1);}
  else{icons_check->value(0);}
}

Fl_Double_Window* DesktopUI::warning_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(370, 145);
    w = o;
    o->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(55, 25, 255, 50, gettext("This option only works without Icons on the desktop, do you want to remove th\
em?"));
      o->labelfont(1);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(230, 90, 55, 25, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)62);
      o->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(90, 90, 65, 25, gettext("Cancel"));
      o->box(FL_GTK_UP_BOX);
      o->color((Fl_Color)80);
      o->labelcolor(FL_BACKGROUND2_COLOR);
    } // Fl_Button* o
    Config config;config.under_mouse(o);
    o->end();
  } // Fl_Double_Window* o
  return w;
}
