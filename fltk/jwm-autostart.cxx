/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "jwm-autostart.h"

void AutostartUI::cb_Cancel_i(Fl_Button*, void*) {
  cancel(autostart_window);
UI ux;
ux.showSettings();
}
void AutostartUI::cb_Cancel(Fl_Button* o, void* v) {
  ((AutostartUI*)(o->parent()->parent()->user_data()))->cb_Cancel_i(o,v);
}

void AutostartUI::cb_save_button_i(Fl_Button*, void*) {
  std::string proggie = program_name->value();
if(proggie.compare("")!=0){add_program_to_autostart();}
saveNoRestart();
autostart_window->hide();
UI ux;
ux.showSettings();
}
void AutostartUI::cb_save_button(Fl_Button* o, void* v) {
  ((AutostartUI*)(o->parent()->parent()->user_data()))->cb_save_button_i(o,v);
}

void AutostartUI::cb_add_item_i(Fl_Button*, void*) {
  std::string proggie = program_name->value();
if(proggie.compare("")==0){choose_a_program();}
else{add_program_to_autostart();};
}
void AutostartUI::cb_add_item(Fl_Button* o, void* v) {
  ((AutostartUI*)(o->parent()->parent()->user_data()))->cb_add_item_i(o,v);
}

void AutostartUI::cb_remove_item_i(Fl_Button*, void*) {
  remove_program_from_autostart();
}
void AutostartUI::cb_remove_item(Fl_Button* o, void* v) {
  ((AutostartUI*)(o->parent()->parent()->user_data()))->cb_remove_item_i(o,v);
}

#include <FL/Fl_Bitmap.H>
static unsigned char idata_minus[] =
{0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,
0,0,0};
static Fl_Bitmap image_minus(idata_minus, 16, 16);

Fl_Double_Window* AutostartUI::make_window() {
  load();
  saveChangesTemp();
  { Fl_Double_Window* o = autostart_window = new Fl_Double_Window(335, 230, gettext("Autostart Programs"));
    autostart_window->color((Fl_Color)31);
    autostart_window->user_data((void*)(this));
    { Fl_Scroll* o = new Fl_Scroll(0, 0, 335, 230);
      o->color((Fl_Color)31);
      { program_name = new Fl_Input(100, 160, 220, 25);
        program_name->tooltip(gettext("You can add extra arguments here"));
        program_name->box(FL_FLAT_BOX);
        program_name->selection_color(FL_DARK1);
        program_name->align(Fl_Align(FL_ALIGN_TOP));
        program_name->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* program_name
      { Fl_Button* o = new Fl_Button(195, 195, 57, 25, gettext("Cancel"));
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)80);
        o->selection_color((Fl_Color)38);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_Cancel);
      } // Fl_Button* o
      { save_button = new Fl_Button(261, 195, 49, 25, gettext("OK"));
        save_button->tooltip(gettext("Write to configuration file"));
        save_button->box(FL_FLAT_BOX);
        save_button->color((Fl_Color)61);
        save_button->selection_color((Fl_Color)38);
        save_button->labelcolor((Fl_Color)55);
        save_button->callback((Fl_Callback*)cb_save_button);
      } // Fl_Button* save_button
      { add_item = new Fl_Button(15, 155, 35, 35, gettext("@+"));
        add_item->tooltip(gettext("Add the chosen program"));
        add_item->box(FL_FLAT_BOX);
        add_item->color((Fl_Color)23);
        add_item->selection_color((Fl_Color)38);
        add_item->callback((Fl_Callback*)cb_add_item);
      } // Fl_Button* add_item
      { autoStartBrowser = new Fl_Browser(15, 10, 305, 140);
        autoStartBrowser->type(2);
        autoStartBrowser->box(FL_FLAT_BOX);
        autoStartBrowser->selection_color((Fl_Color)55);
        flAutostart a;
        a.getAutostart(autoStartBrowser);
      } // Fl_Browser* autoStartBrowser
      { remove_item = new Fl_Button(55, 155, 35, 35);
        remove_item->box(FL_FLAT_BOX);
        remove_item->color((Fl_Color)23);
        remove_item->selection_color((Fl_Color)38);
        remove_item->image(image_minus);
        remove_item->callback((Fl_Callback*)cb_remove_item);
      } // Fl_Button* remove_item
      o->end();
    } // Fl_Scroll* o
    startup(o);
    autostart_window->xclass("jsm-autostart");
    autostart_window->end();
    autostart_window->resizable(autostart_window);
  } // Fl_Double_Window* autostart_window
  return autostart_window;
}

void AutostartUI::choose_a_program() {
  const char * f = "/usr/bin/";
  const char * m="Choose a program";
  const char *p="*";
  Fl_Native_File_Chooser fnfc;
  fnfc.title(m);
  fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
  fnfc.filter(p);
  fnfc.directory(f); // default directory to use
  // Show native chooser
  switch ( fnfc.show() ){
    case -1:
       break; // ERROR
    case 1:
      break; // CANCEL
    default:
      const char *result =fnfc.filename();
      if(result!=NULL){
  	std::string String = result;
  	unsigned found = String.find_last_of("/");
  	String.erase(0,found+1);
  	result = String.c_str();
  	program_name->value(result);
      }
      break; // FILE CHOSEN
  }
}

void AutostartUI::add_program_to_autostart() {
  flAutostart a;
  const char * input = program_name->value();
  if(input!=NULL){
  	autoStartBrowser->clear();
  	a.addAutostart(input);
  	a.getAutostart(autoStartBrowser);
  	autoStartBrowser->redraw();
  }
}

void AutostartUI::remove_program_from_autostart() {
  flAutostart a;
  const char * item = autoStartBrowser->text(autoStartBrowser->value());
  if (item !=NULL){
  	a.removeAutostart(item);
  	autoStartBrowser->clear();
  	a.getAutostart(autoStartBrowser);
  	autoStartBrowser->redraw();
  }
  else{
  	fl_message("Please click on an item to remove!");
  }
}

void startup(Fl_Window *o) {
  Config config; config.under_mouse(o);
  o->icon(config.Get_Fl_Icon(jsm_autostart_xpm));
}
