#!/bin/bash
# MANY thanks to Puppy and technosaurus!!
shopt -s nullglob
APP_ROOT="5"
SYS_ROOT="8"
JWMRC="$HOME/.jwmrc"
if [ ! -d "${HOME}"/.config ]
then
  mkdir "${HOME}"/.config
fi
MENUFILE="${HOME}/.config/torimenu"
GNOME_SYS_MENUFILE="${HOME}/.config/gnomesystem"
GNOME_APPS_MENUFILE="${HOME}/.config/gnomeapps"
DD=/usr/share/desktop-directories
ICONDIRS=( $(grep "<IconPath" "${JWMRC}" | sed 's|<IconPath>||' | sed 's|</IconPath>||'| sed 's|/usr/share/pixmaps/ ||'| sed 's|/usr/share/icons/ ||') )
png=0
svg=0
for i in "${ICONDIRS[@]}"
do
DIR2="$i"
  PNG=$(ls ${DIR2}*.png 2>/dev/null)
  if [ ! -z "${PNG}" ]
  then
    png=$((png+1))
  fi
  SVG=$(ls ${DIR2}*.svg 2>/dev/null)
  if [ ! -z "${SVG}" ]
  then
    svg=$((svg+1))
  fi
done
if [ $((svg>png)) ]
then
   EXT=".svg"
else
   EXT=".png"
fi

## Make sure our menu files exist
# default
if [ -f "${MENUFILE}" ]
then
  rm "${MENUFILE}"
  echo "replacing '$MENUFILE'"
else
  echo "creating '$MENUFILE'"
  touch "${MENUFILE}"
fi
# Gnome Apps
if [ -f "${GNOME_APPS_MENUFILE}" ]
then
  rm "${GNOME_APPS_MENUFILE}"
  echo "replacing '$GNOME_APPS_MENUFILE'"
else
  echo "creating '$GNOME_APPS_MENUFILE'"
  touch "${GNOME_APPS_MENUFILE}"
fi
# Gnome system
if [ -f "${GNOME_SYS_MENUFILE}" ]
then
  rm "${GNOME_SYS_MENUFILE}"
  echo "replacing '$GNOME_SYS_MENUFILE'"
else
  echo "creating '$GNOME_SYS_MENUFILE'"
  touch "${GNOME_SYS_MENUFILE}"
fi

## Make sure the $HOME variable is set
if [ ! -d "${HOME}" ]
then
  echo "WARNING: Please set your HOME environment variable and re-run $0"
  exit 1
fi

## Make sure our Desktop Directories folder is intact
if [ ! -d "${DD}" ]
then
  echo "You are missing the Desktop Directories.. in $DD
you must install this program again or modify this script $0"
  exit 1
fi
{	#localization block
[ "$myLANG" ] || myLANG="${LANGUAGE%% *}"
[ "$myLANG" ] || myLANG="${LANG%_*}"

[ -f "/usr/share/locale/$myLANG/LC_MESSAGES/jwm" ] && . "/usr/share/locale/$myLANG/LC_MESSAGES/jwm"
}

{	#parse .desktop files and sort generated menu entries into subcategories
for DESKTOP_FILE in /usr/share/applications/*.desktop ; do
	NAME="" ICON="" CATS="" EXEC="" LINE="" TERM="" #prevent carryover from previous file
	while read LINE || [ "$LINE" ]; do
		#if [ "$LINE" == "[Desktop Action*" ]
		#then
		case $LINE in
                        OnlyShowIn=*)
                             NAME=""
                             ICON=""
                             CATS=""
                             EXEC=""
                             TERM=""
                             break;;
                        NoDisplay=true)
                             NAME=""
                             ICON=""
                             CATS=""
                             EXEC=""
                             TERM=""
                             break;;
			Name?${myLANG%_*}?=*|Name=*) NAME="${LINE#*=}"'' ;; # sc0ttman... should use "Name[$myLANG]=" if found
			'[Desktop Entry'*) continue ;;
			TryExec=*|Exec=*) EXEC="${LINE#*=}"'' ;;
			Categories=*) CATS="${LINE#*=}"'' ;;
			Icon=*) ICON="${LINE#*=}"''  ;;
			Terminal=*) TERM="${LINE#*=}"'';;
			"["*) break ;; ##any other groups thanks to technosaurus
			
			# Comment=*|Comment?${LANG%_*}?=*) COMMENT="${LINE#*=}"''  ;; #jwm doesn't support tooltips on menu items yet ... uncomment this if it ever does
		esac
	done < "$DESKTOP_FILE"

if [ "${TERM}" == "true" ]
then
  EXEC="x-terminal-emulator -e ${EXEC}"
fi

if [[ "${ICON##*.}" == "xpm" ]] || [[ "${ICON##*.}" == "svg" ]] || [[ "${ICON##*.}" == "png" ]] || [[ "${ICON}" == "/*" ]]
then
	MenuEntry='
	<Program label="'${NAME}'" icon="'${ICON}'">'${EXEC%\ \%?}'</Program>'
else
	MenuEntry='
	<Program label="'${NAME}'" icon="'${ICON}${EXT}'">'${EXEC%\ \%?}'</Program>'
fi

#	[ "${EXEC}" ] && MenuEntry='<Program label="'${NAME}'" icon="'${ICON}${EXT}'">'${EXEC%\ \%?}'</Program> '
	#CATS="${CATS%;*}" # sc0ttman, keep just the first (or only) category.. everything before the semi-colon ;...no we may want multiple entries?
	for CAT in $(echo "${CATS//;/	}") ; do
	#We are just going to build in the /etc/xdg/menus/hierarchy b/c its faster to inline it ... and Ctrl+Tab gets annoying
	case "$CAT" in
		AudioVideo)
                  AV=${AV}${MenuEntry}
                  break;;
		Development)
                  DEV=${DEV}${MenuEntry}
                  break;;
		Education)
                  ED=${ED}${MenuEntry}
                  break;;
		Game)
                  GAME=${GAME}${MenuEntry}
                  break;;
		Graphics)
                  ART=${ART}${MenuEntry}
                  break;;
		Network)
                  NET=${NET}${MenuEntry}
                  break;;
		Office)
                  OFF=${OFF}${MenuEntry}
                  break;;
		Science)
                  SCI=${SCI}${MenuEntry}
                  break;;
		Settings)
                  SET=${SET}${MenuEntry}
                  break;;
		System)
                  SYS=${SYS}${MenuEntry}
                  break;;
		Utility)
                  ACC=${ACC}${MenuEntry}
                  break;;
		*)
                  Misc=${MISC}${MenuEntry} #add Miscellaneous category?

	esac
	done
done
}
for MENU_A in ${DD}/jwm-accessories* ; do
	A_NAME="" A_ICON="" A_LINE="" #prevent carryover from previous file
	while read A_LINE || [ "$A_LINE" ]; do
		case $A_LINE in
			Name?${myLANG%_*}?=*|Name=*) A_NAME="${A_LINE#*=}"'';;
			Icon=*) A_ICON="${A_LINE#*=}"''  ;;
		esac
	done < "$MENU_A"
done
for MENU_D in ${DD}/jwm-development* ; do
	D_NAME="" D_ICON="" D_LINE="" #prevent carryover from previous file
	while read D_LINE || [ "$D_LINE" ]; do
		case $D_LINE in
			Name?${myLANG%_*}?=*|Name=*) D_NAME="${D_LINE#*=}"'';;
			Icon=*) D_ICON="${D_LINE#*=}"''  ;;
		esac
	done < "$MENU_D"
done
for MENU_E in ${DD}/jwm-education* ; do
	while read E_LINE || [ "$E_LINE" ]; do
		case $E_LINE in
			Name?${myLANG%_*}?=*|Name=*) E_NAME="${E_LINE#*=}"'';;
			Icon=*) E_ICON="${E_LINE#*=}"''  ;;
		esac
	done < "$MENU_E"
done
for MENU_G in ${DD}/jwm-graphics* ; do
	while read G_LINE || [ "$G_LINE" ]; do
		case $G_LINE in
			Name?${myLANG%_*}?=*|Name=*) G_NAME="${G_LINE#*=}"'';;
			Icon=*) G_ICON="${G_LINE#*=}"''  ;;
		esac
	done < "$MENU_G"
done
for MENU_I in ${DD}/jwm-network* ; do
	while read I_LINE || [ "$I_LINE" ]; do
		case $I_LINE in
			Name?${myLANG%_*}?=*|Name=*) I_NAME="${I_LINE#*=}"'';;
			Icon=*) I_ICON="${I_LINE#*=}"''  ;;
		esac
	done < "$MENU_I"
done
for MENU_SYS in ${DD}/jwm-sys* ; do
	while read SYS_LINE || [ "$SYS_LINE" ]; do
		case $SYS_LINE in
			Name?${myLANG%_*}?=*|Name=*) SYS_NAME="${SYS_LINE#*=}"'';;
			Icon=*) SYS_ICON="${SYS_LINE#*=}"''  ;;
		esac
	done < "$MENU_SYS"
done
for MENU_SETT in ${DD}/jwm-settings* ; do
	while read SETT_LINE || [ "$SETT_LINE" ]; do
		case $SETT_LINE in
			Name?${myLANG%_*}?=*|Name=*) SETT_NAME="${SETT_LINE#*=}"'';;
			Icon=*) SETT_ICON="${SETT_LINE#*=}"''  ;;
		esac
	done < "$MENU_SETT"
done
for MENU_GAME in ${DD}/jwm-games* ; do
	while read GAME_LINE || [ "$GAME_LINE" ]; do
		case $GAME_LINE in
			Name?${myLANG%_*}?=*|Name=*) GAME_NAME="${GAME_LINE#*=}"'';;
			Icon=*) GAME_ICON="${GAME_LINE#*=}"''  ;;
		esac
	done < "$MENU_GAME"
done
for MENU_O in ${DD}/jwm-office* ; do
	while read O_LINE || [ "$O_LINE" ]; do
		case $O_LINE in
			Name?${myLANG%_*}?=*|Name=*) O_NAME="${O_LINE#*=}"'';;
			Icon=*) O_ICON="${O_LINE#*=}"''  ;;
		esac
	done < "$MENU_O"
done
for MENU_OTHER in ${DD}/jwm-other* ; do
	while read OTHER_LINE || [ "$OTHER_LINE" ]; do
		case $OTHER_LINE in
			Name?${myLANG%_*}?=*|Name=*) OTHER_NAME="${OTHER_LINE#*=}"'';;
			Icon=*) OTHER_ICON="${OTHER_LINE#*=}"''  ;;
		esac
	done < "$MENU_OTHER"
done
for MENU_M in ${DD}/jwm-multimedia* ; do
	while read M_LINE || [ "$M_LINE" ]; do
		case $M_LINE in
			Name?${myLANG%_*}?=*|Name=*) M_NAME="${M_LINE#*=}"'';;
			Icon=*) M_ICON="${M_LINE#*=}"''  ;;
		esac
	done < "$MENU_M"
done
{	#Now generate the full menu with some formatting

if [ ! -z "${ACC}" ]
then
#Utility)ACC=${ACC}${MenuEntry};;
MENU='<Menu label="'${A_NAME}'" icon="'${A_ICON}${EXT}'" height="0">
	'${ACC}'
</Menu>'
fi
if [ ! -z "${ED}" ]
then
#Education)ED=${ED}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${E_NAME}'" icon="'${E_ICON}${EXT}'" height="0">
	'${ED}'
</Menu>'
fi
if [ ! -z "${NET}" ]
then
#Network)NET=${NET}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${I_NAME}'" icon="'${I_ICON}${EXT}'" height="0">
	'${NET}'
</Menu>'
fi
if [ ! -z "${OFF}" ]
then
#Office)OFF=${OFF}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${O_NAME}'" icon="'${O_ICON}${EXT}'" height="0">
	'${OFF}'
</Menu>'
fi
if [ ! -z "${GAME}" ]
then
#Game)GAME=${GAME}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${GAME_NAME}'" icon="'${GAME_ICON}${EXT}'" height="0">
	'${GAME}'
</Menu>'
fi
if [ ! -z "${ART}" ]
then
#Graphics)ART=${ART}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${G_NAME}'" icon="'${G_ICON}${EXT}'" height="0">
  '${ART}'
</Menu>'
fi
if [ ! -z "${AV}" ]
then
#AudioVideo)AV=${AV}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${M_NAME}'" icon="'${M_ICON}${EXT}'" height="0">
  '${AV}'
</Menu>'
fi

if [ ! -z "${DEV}" ]
then
#Development)DEV=${DEV}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${D_NAME}'" icon="'${D_ICON}${EXT}'" height="0">
  '${DEV}'
</Menu>'
fi
if [ ! -z "${SCI}" ] && [ ! -z "${MISC}" ]
then
#Science)SCI=${SCI}${MenuEntry};;
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
MENU=''${MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${SCI}'
  '${MISC}'
</Menu>'
elif [ -z "${SCI}" ] && [ ! -z "${MISC}" ]
then
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
MENU=''${MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${MISC}'
</Menu>'
elif [ ! -z "${SCI}" ] && [ -z "${MISC}" ]
then
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
MENU=''${MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${SCI}'
</Menu>'
fi

if [ ! -z "${SET}" ]
then
#Settings)SET=${SET}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${SETT_NAME}'" icon="'${SETT_ICON}${EXT}'" height="0">
  '${SET}'
</Menu>'
fi
if [ ! -z "${SYS}" ]
then
#System)SYS=${SYS}${MenuEntry};;
MENU=''${MENU}'
<Menu label="'${SYS_NAME}'" icon="'${SYS_ICON}${EXT}'" height="0">
  '${SYS}'
</Menu>'
fi
}
MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$APP_ROOT'">
  '"$MENU"'
  </RootMenu>
</JWM>'
echo "$MENU" >> "${MENUFILE}"
sed -i 's/&/&amp;/g' "${MENUFILE}"


##################GNOME MENUS##############################


#*****************GNOME SYSTEM MENU***************#
{

if [ ! -z "${SET}" ] && [ ! -z "${SYS}" ]
then
GNOME_MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$SYS_ROOT'">
  '${SET}'
    <Menu label="'${SYS_NAME}'" icon="'${SYS_ICON}${EXT}'" height="0">
      '${SYS}'
   </Menu>
  </RootMenu>
</JWM>'
elif [ -z "${SET}" ] && [ ! -z "${SYS}" ]
then
GNOME_MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$SYS_ROOT'">
  '${SYS}'
  </RootMenu>
</JWM>'
elif [ ! -z "${SET}" ] && [ -z "${SYS}" ]
then
GNOME_MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$SYS_ROOT'">
  '${SET}'
  </RootMenu>
</JWM>'
else
  # Nothing to see here...
  GNOME_MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$SYS_ROOT'">
  </RootMenu>
</JWM>'
fi
}
echo "$GNOME_MENU" >> "${GNOME_SYS_MENUFILE}"
sed -i 's/&/&amp;/g' "${GNOME_SYS_MENUFILE}"

#*****************GNOME APP MENU***************#
{	#Now generate the full menu with some formatting

if [ ! -z "${ACC}" ]
then
#Utility)ACC=${ACC}${MenuEntry};;
GNOME_APP_MENU='<Menu label="'${A_NAME}'" icon="'${A_ICON}${EXT}'" height="0">
	'${ACC}'
</Menu>'
fi
if [ ! -z "${ED}" ]
then
#Education)ED=${ED}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${E_NAME}'" icon="'${E_ICON}${EXT}'" height="0">
	'${ED}'
</Menu>'
fi
if [ ! -z "${NET}" ]
then
#Network)NET=${NET}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${I_NAME}'" icon="'${I_ICON}${EXT}'" height="0">
	'${NET}'
</Menu>'
fi
if [ ! -z "${OFF}" ]
then
#Office)OFF=${OFF}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${O_NAME}'" icon="'${O_ICON}${EXT}'" height="0">
	'${OFF}'
</Menu>'
fi
if [ ! -z "${GAME}" ]
then
#Game)GAME=${GAME}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${GAME_NAME}'" icon="'${GAME_ICON}${EXT}'" height="0">
	'${GAME}'
</Menu>'
fi
if [ ! -z "${ART}" ]
then
#Graphics)ART=${ART}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${G_NAME}'" icon="'${G_ICON}${EXT}'" height="0">
  '${ART}'
</Menu>'
fi
if [ ! -z "${AV}" ]
then
#AudioVideo)AV=${AV}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${M_NAME}'" icon="'${M_ICON}${EXT}'" height="0">
  '${AV}'
</Menu>'
fi

if [ ! -z "${DEV}" ]
then
#Development)DEV=${DEV}${MenuEntry};;
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${D_NAME}'" icon="'${D_ICON}${EXT}'" height="0">
  '${DEV}'
</Menu>'
fi
if [ ! -z "${SCI}" ] && [ ! -z "${MISC}" ]
then
#Science)SCI=${SCI}${MenuEntry};;
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${SCI}'
  '${MISC}'
</Menu>'
elif [ -z "${SCI}" ] && [ ! -z "${MISC}" ]
then
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${MISC}'
</Menu>'
elif [ ! -z "${SCI}" ] && [ -z "${MISC}" ]
then
#*)Misc=${MISC}${MenuEntry};; #add Miscellaneous category?
GNOME_APP_MENU=''${GNOME_APP_MENU}'
<Menu label="'${OTHER_NAME}'" icon="'${OTHER_ICON}${EXT}'" height="0">
  '${SCI}'
</Menu>'
fi
}
GNOME_APP_MENU='<?xml version="1.0"?>
<JWM>
<!-- generated by '$PWD'/'$0' -->
  <RootMenu height="0" onroot="'$APP_ROOT'">
  '"$GNOME_APP_MENU"'
  </RootMenu>
</JWM>'
echo "$GNOME_APP_MENU" >> "${GNOME_APPS_MENUFILE}"
sed -i 's/&/&amp;/g' "${GNOME_APPS_MENUFILE}"

RESULT=$(jwm -reload)
echo "Done!
$RESULT"

