/*                 Joe's Window Manager Configuration
 *
 * This program configures JWM using tinyxml2 and FLTK
 *
 *         Copyright (C) 2014  Israel <israel@torios.org>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * This has been developed as a part of the ToriOS Project
 * This has been developed by Israel<israel@torios.org>
 *
 *
 * You may redistribute this, but you must keep this comment in place
 * Jesus is my Lord, and if you don't like it feel free to ignore it.
 */
// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include <libintl.h>
#include "../include/FL_Font_Chooser.h"

void FontSelector::cb_Cancel_i(Fl_Button*, void*) {
//  flFont f; f.cancel();
font_window->hide();
}
void FontSelector::cb_Cancel(Fl_Button* o, void* v) {
  ((FontSelector*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void FontSelector::cb_OK_i(Fl_Button*, void*) {
  ok_cb();
}
void FontSelector::cb_OK(Fl_Button* o, void* v) {
  ((FontSelector*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

Fl_Double_Window* FontSelector::make_window() {
  { font_chooser_window = new Fl_Double_Window(455, 270, gettext("Choose a Font"));
    font_chooser_window->color((Fl_Color)31);
    font_chooser_window->user_data((void*)(this));
    { Fl_Browser* o = new Fl_Browser(10, 25, 180, 185, gettext("Family:"));
      o->selection_color(FL_DARK_RED);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* o
    { Fl_Browser* o = new Fl_Browser(200, 25, 180, 185, gettext("Style:"));
      o->selection_color(FL_DARK_RED);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* o
    { Fl_Browser* o = new Fl_Browser(400, 50, 45, 160);
      o->selection_color(FL_DARK_RED);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Browser* o
    { Fl_Value_Input* o = new Fl_Value_Input(400, 20, 35, 25, gettext("Size:"));
      o->box(FL_GTK_DOWN_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* o
    { new Fl_Text_Editor(200, 25, 180, 185);
    } // Fl_Text_Editor* o
    { new Fl_Output(10, 220, 210, 30);
    } // Fl_Output* o
    { Fl_Button* o = new Fl_Button(295, 225, 60, 25, gettext("Cancel"));
      o->tooltip(gettext("No changes will be saved"));
      o->box(FL_GTK_UP_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)80);
      o->selection_color((Fl_Color)81);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(370, 225, 45, 25, gettext("OK"));
      o->box(FL_GTK_UP_BOX);
      o->down_box(FL_GTK_DOWN_BOX);
      o->color((Fl_Color)61);
      o->selection_color((Fl_Color)59);
      o->labelcolor((Fl_Color)55);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    font_chooser_window->end();
  } // Fl_Double_Window* font_chooser_window
  return font_chooser_window;
}

void FontSelector::ok_cb() {
  printf("Hello, World!\n");
  //useful stuff goes here
  font_chooser_window->hide();
}

void FontSelector::cancel_cb() {
  printf("Hello, World!\n");
  //useful stuff goes here
  font_chooser_window->hide();
}
